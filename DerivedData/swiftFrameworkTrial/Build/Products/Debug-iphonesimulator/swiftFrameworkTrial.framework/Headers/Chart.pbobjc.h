// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ChartShape;
@class ChartStyle;
@class Chart_ChartObj;
@class Chart_ChartObj_Legend;
@class ColorMap;
@class ManualLayout;
@class PictureValue;
@class PlotArea;
@class Properties;
@class TextBody;
@class TitleElement;
GPB_ENUM_FWD_DECLARE(PositionElement);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Chart_ChartObj_DisplayBlank

typedef GPB_ENUM(Chart_ChartObj_DisplayBlank) {
  Chart_ChartObj_DisplayBlank_Span = 0,
  Chart_ChartObj_DisplayBlank_Gap = 1,
  Chart_ChartObj_DisplayBlank_Zero = 2,
};

GPBEnumDescriptor *Chart_ChartObj_DisplayBlank_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Chart_ChartObj_DisplayBlank_IsValidValue(int32_t value);

#pragma mark - ChartRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ChartRoot : GPBRootObject
@end

#pragma mark - Chart

typedef GPB_ENUM(Chart_FieldNumber) {
  Chart_FieldNumber_Obj = 1,
  Chart_FieldNumber_ColorMap = 2,
  Chart_FieldNumber_TextBody = 3,
  Chart_FieldNumber_Props = 4,
  Chart_FieldNumber_Style = 5,
  Chart_FieldNumber_StyleNumber = 6,
  Chart_FieldNumber_Picture = 7,
  Chart_FieldNumber_ChartShape = 8,
};

/**
 * Root Node for Chart - similar to ChartSpace.
 **/
@interface Chart : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Chart_ChartObj *obj;
/** Test to see if @c obj has been set. */
@property(nonatomic, readwrite) BOOL hasObj;

/** Overriding Color Map. */
@property(nonatomic, readwrite, strong, null_resettable) ColorMap *colorMap;
/** Test to see if @c colorMap has been set. */
@property(nonatomic, readwrite) BOOL hasColorMap;

@property(nonatomic, readwrite, strong, null_resettable) TextBody *textBody;
/** Test to see if @c textBody has been set. */
@property(nonatomic, readwrite) BOOL hasTextBody;

@property(nonatomic, readwrite, strong, null_resettable) Properties *props;
/** Test to see if @c props has been set. */
@property(nonatomic, readwrite) BOOL hasProps;

@property(nonatomic, readwrite, strong, null_resettable) ChartStyle *style;
/** Test to see if @c style has been set. */
@property(nonatomic, readwrite) BOOL hasStyle;

/** Added for compatability reasons, mainly for exporting. */
@property(nonatomic, readwrite) int32_t styleNumber;

@property(nonatomic, readwrite) BOOL hasStyleNumber;
/** Convert the chart as picture and store it here - It will be used by apps which are yet to support rendering. */
@property(nonatomic, readwrite, strong, null_resettable) PictureValue *picture;
/** Test to see if @c picture has been set. */
@property(nonatomic, readwrite) BOOL hasPicture;

@property(nonatomic, readwrite, strong, null_resettable) ChartShape *chartShape;
/** Test to see if @c chartShape has been set. */
@property(nonatomic, readwrite) BOOL hasChartShape;

@end

#pragma mark - Chart_ChartObj

typedef GPB_ENUM(Chart_ChartObj_FieldNumber) {
  Chart_ChartObj_FieldNumber_Title = 1,
  Chart_ChartObj_FieldNumber_Legend = 2,
  Chart_ChartObj_FieldNumber_PlotArea = 3,
  Chart_ChartObj_FieldNumber_DispBlankAs = 4,
  Chart_ChartObj_FieldNumber_PlotVisible = 5,
};

@interface Chart_ChartObj : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) TitleElement *title;
/** Test to see if @c title has been set. */
@property(nonatomic, readwrite) BOOL hasTitle;

@property(nonatomic, readwrite, strong, null_resettable) Chart_ChartObj_Legend *legend;
/** Test to see if @c legend has been set. */
@property(nonatomic, readwrite) BOOL hasLegend;

@property(nonatomic, readwrite, strong, null_resettable) PlotArea *plotArea;
/** Test to see if @c plotArea has been set. */
@property(nonatomic, readwrite) BOOL hasPlotArea;

/** How to display blank values. */
@property(nonatomic, readwrite) Chart_ChartObj_DisplayBlank dispBlankAs;

@property(nonatomic, readwrite) BOOL hasDispBlankAs;
/** Should we plot only visible points or not. */
@property(nonatomic, readwrite) BOOL plotVisible;

@property(nonatomic, readwrite) BOOL hasPlotVisible;
@end

#pragma mark - Chart_ChartObj_Legend

typedef GPB_ENUM(Chart_ChartObj_Legend_FieldNumber) {
  Chart_ChartObj_Legend_FieldNumber_Pos = 1,
  Chart_ChartObj_Legend_FieldNumber_Props = 2,
  Chart_ChartObj_Legend_FieldNumber_Overlay = 3,
  Chart_ChartObj_Legend_FieldNumber_Layout = 4,
  Chart_ChartObj_Legend_FieldNumber_TextBody = 5,
};

@interface Chart_ChartObj_Legend : GPBMessage

@property(nonatomic, readwrite) enum PositionElement pos;

@property(nonatomic, readwrite) BOOL hasPos;
/** Only Fill, Stroke and effects are supported. */
@property(nonatomic, readwrite, strong, null_resettable) Properties *props;
/** Test to see if @c props has been set. */
@property(nonatomic, readwrite) BOOL hasProps;

/** Specified whether this element shall overlap the other elements. */
@property(nonatomic, readwrite) BOOL overlay;

@property(nonatomic, readwrite) BOOL hasOverlay;
/** If the legend is manually placed , we will have this entry. */
@property(nonatomic, readwrite, strong, null_resettable) ManualLayout *layout;
/** Test to see if @c layout has been set. */
@property(nonatomic, readwrite) BOOL hasLayout;

@property(nonatomic, readwrite, strong, null_resettable) TextBody *textBody;
/** Test to see if @c textBody has been set. */
@property(nonatomic, readwrite) BOOL hasTextBody;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
