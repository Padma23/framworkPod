// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Dimension;
@class Position;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - TransformRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface TransformRoot : GPBRootObject
@end

#pragma mark - Transform

typedef GPB_ENUM(Transform_FieldNumber) {
  Transform_FieldNumber_Rotate = 1,
  Transform_FieldNumber_Fliph = 2,
  Transform_FieldNumber_Flipv = 3,
  Transform_FieldNumber_Dim = 4,
  Transform_FieldNumber_Pos = 5,
  Transform_FieldNumber_ChDim = 6,
  Transform_FieldNumber_ChPos = 7,
};

@interface Transform : GPBMessage

/** rotated value */
@property(nonatomic, readwrite) int32_t rotate;

@property(nonatomic, readwrite) BOOL hasRotate;
/** true , if flipped in horizontal axis. */
@property(nonatomic, readwrite) BOOL fliph;

@property(nonatomic, readwrite) BOOL hasFliph;
/** true , if flipped in vertical axis. */
@property(nonatomic, readwrite) BOOL flipv;

@property(nonatomic, readwrite) BOOL hasFlipv;
/** Dimension */
@property(nonatomic, readwrite, strong, null_resettable) Dimension *dim;
/** Test to see if @c dim has been set. */
@property(nonatomic, readwrite) BOOL hasDim;

/** Position */
@property(nonatomic, readwrite, strong, null_resettable) Position *pos;
/** Test to see if @c pos has been set. */
@property(nonatomic, readwrite) BOOL hasPos;

/** Individual Shape position = groupShapePos + (ShapePos - chPos in group); */
@property(nonatomic, readwrite, strong, null_resettable) Dimension *chDim;
/** Test to see if @c chDim has been set. */
@property(nonatomic, readwrite) BOOL hasChDim;

/** Used by GroupShape, position of the child elements. The position of the child element starts from */
@property(nonatomic, readwrite, strong, null_resettable) Position *chPos;
/** Test to see if @c chPos has been set. */
@property(nonatomic, readwrite) BOOL hasChPos;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
