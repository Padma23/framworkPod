// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pictureproperties.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Color;
@class PictureProperties_ColorChange;
@class PictureProperties_ColorMode;
@class PictureProperties_Luminance;
GPB_ENUM_FWD_DECLARE(PresetProps);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PictureProperties_ColorMode_Mode

typedef GPB_ENUM(PictureProperties_ColorMode_Mode) {
  /** No Recolor */
  PictureProperties_ColorMode_Mode_None = 0,

  /** turned into GrayScale. */
  PictureProperties_ColorMode_Mode_Grayscale = 1,

  /** turned into BlackAndWhite Image. */
  PictureProperties_ColorMode_Mode_Bilevel = 2,

  /** Sepia Mode */
  PictureProperties_ColorMode_Mode_Sepia = 3,

  /** Apply Duotone filter. */
  PictureProperties_ColorMode_Mode_Duotone = 4,
};

GPBEnumDescriptor *PictureProperties_ColorMode_Mode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PictureProperties_ColorMode_Mode_IsValidValue(int32_t value);

#pragma mark - PicturepropertiesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface PicturepropertiesRoot : GPBRootObject
@end

#pragma mark - PictureProperties

typedef GPB_ENUM(PictureProperties_FieldNumber) {
  PictureProperties_FieldNumber_Luminance = 1,
  PictureProperties_FieldNumber_ColorMode = 2,
  PictureProperties_FieldNumber_ColorChange = 3,
  PictureProperties_FieldNumber_Preset = 4,
  PictureProperties_FieldNumber_Alpha = 5,
  PictureProperties_FieldNumber_Rotate = 6,
  PictureProperties_FieldNumber_Fliph = 7,
  PictureProperties_FieldNumber_Flipv = 8,
};

@interface PictureProperties : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PictureProperties_Luminance *luminance;
/** Test to see if @c luminance has been set. */
@property(nonatomic, readwrite) BOOL hasLuminance;

@property(nonatomic, readwrite, strong, null_resettable) PictureProperties_ColorMode *colorMode;
/** Test to see if @c colorMode has been set. */
@property(nonatomic, readwrite) BOOL hasColorMode;

/** To Change one color in a picture to another color. */
@property(nonatomic, readwrite, strong, null_resettable) PictureProperties_ColorChange *colorChange;
/** Test to see if @c colorChange has been set. */
@property(nonatomic, readwrite) BOOL hasColorChange;

/** Preset Color Properties. */
@property(nonatomic, readwrite) enum PresetProps preset;

@property(nonatomic, readwrite) BOOL hasPreset;
/** transparency ranges from 0-1 , 0 indicates none(opaque) , 1 indicates fully transparent. */
@property(nonatomic, readwrite) float alpha;

@property(nonatomic, readwrite) BOOL hasAlpha;
@property(nonatomic, readwrite) int32_t rotate;

@property(nonatomic, readwrite) BOOL hasRotate;
/** true , if flipped in horizontal axis. */
@property(nonatomic, readwrite) BOOL fliph;

@property(nonatomic, readwrite) BOOL hasFliph;
/** true , if flipped in vertical axis. */
@property(nonatomic, readwrite) BOOL flipv;

@property(nonatomic, readwrite) BOOL hasFlipv;
@end

#pragma mark - PictureProperties_Luminance

typedef GPB_ENUM(PictureProperties_Luminance_FieldNumber) {
  PictureProperties_Luminance_FieldNumber_Brightness = 1,
  PictureProperties_Luminance_FieldNumber_Contrast = 2,
};

@interface PictureProperties_Luminance : GPBMessage

/** ranges from -1 to 1. */
@property(nonatomic, readwrite) float brightness;

@property(nonatomic, readwrite) BOOL hasBrightness;
/** ranges from -1 to 1. */
@property(nonatomic, readwrite) float contrast;

@property(nonatomic, readwrite) BOOL hasContrast;
@end

#pragma mark - PictureProperties_ColorMode

typedef GPB_ENUM(PictureProperties_ColorMode_FieldNumber) {
  PictureProperties_ColorMode_FieldNumber_Mode = 1,
  PictureProperties_ColorMode_FieldNumber_DuotoneArray = 2,
  PictureProperties_ColorMode_FieldNumber_Bilevel = 3,
};

@interface PictureProperties_ColorMode : GPBMessage

/** Color Mode applied to the picture. */
@property(nonatomic, readwrite) PictureProperties_ColorMode_Mode mode;

@property(nonatomic, readwrite) BOOL hasMode;
/** Array of colors using which the picture will be recolored , as of now only duotone recoloring is supported i.e. two colors in the array. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Color*> *duotoneArray;
/** The number of items in @c duotoneArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger duotoneArray_Count;

/** Threshold value for bilevel, ranges from 0-1. */
@property(nonatomic, readwrite) float bilevel;

@property(nonatomic, readwrite) BOOL hasBilevel;
@end

#pragma mark - PictureProperties_ColorChange

typedef GPB_ENUM(PictureProperties_ColorChange_FieldNumber) {
  PictureProperties_ColorChange_FieldNumber_From = 1,
  PictureProperties_ColorChange_FieldNumber_To = 2,
};

/**
 * Mainly used to make a color transparent.
 **/
@interface PictureProperties_ColorChange : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Color *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;

@property(nonatomic, readwrite, strong, null_resettable) Color *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
