// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: barchart.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class BarChartDetails;
@class ChartLine;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum BarChart_BarType

typedef GPB_ENUM(BarChart_BarType) {
  BarChart_BarType_Bar = 0,
  BarChart_BarType_Col = 1,
};

GPBEnumDescriptor *BarChart_BarType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BarChart_BarType_IsValidValue(int32_t value);

#pragma mark - BarchartRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface BarchartRoot : GPBRootObject
@end

#pragma mark - BarChart

typedef GPB_ENUM(BarChart_FieldNumber) {
  BarChart_FieldNumber_Type = 1,
  BarChart_FieldNumber_Details = 2,
  BarChart_FieldNumber_Overlap = 3,
  BarChart_FieldNumber_SeriesLinesArray = 4,
};

@interface BarChart : GPBMessage

@property(nonatomic, readwrite) BarChart_BarType type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, strong, null_resettable) BarChartDetails *details;
/** Test to see if @c details has been set. */
@property(nonatomic, readwrite) BOOL hasDetails;

/** This specifies how much shall bars/columns overlap i.e. each series bar/column overlapping. ranges from -1 to +1 i.e. percent values. */
@property(nonatomic, readwrite) float overlap;

@property(nonatomic, readwrite) BOOL hasOverlap;
/** Series lines */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ChartLine*> *seriesLinesArray;
/** The number of items in @c seriesLinesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger seriesLinesArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
