// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: themedefault.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ColorMap;
@class Properties;
@class ThemeDefault_ObjectDefaults;
@class ThemeReference;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ThemedefaultRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ThemedefaultRoot : GPBRootObject
@end

#pragma mark - ThemeDefault

typedef GPB_ENUM(ThemeDefault_FieldNumber) {
  ThemeDefault_FieldNumber_Bg = 1,
  ThemeDefault_FieldNumber_Fill = 2,
  ThemeDefault_FieldNumber_Stroke = 3,
  ThemeDefault_FieldNumber_ColorMap = 4,
  ThemeDefault_FieldNumber_Shape = 5,
  ThemeDefault_FieldNumber_Line = 6,
};

@interface ThemeDefault : GPBMessage

/** Can carry values from 0-2. This is the theme index value. */
@property(nonatomic, readwrite) int32_t bg;

@property(nonatomic, readwrite) BOOL hasBg;
@property(nonatomic, readwrite) int32_t fill;

@property(nonatomic, readwrite) BOOL hasFill;
@property(nonatomic, readwrite) int32_t stroke;

@property(nonatomic, readwrite) BOOL hasStroke;
/**
 * Color Values present in Theme are mapped to new values . bg1 is the default color for the background fill and a1 is the default color for the
 * fill shape.
 **/
@property(nonatomic, readwrite, strong, null_resettable) ColorMap *colorMap;
/** Test to see if @c colorMap has been set. */
@property(nonatomic, readwrite) BOOL hasColorMap;

@property(nonatomic, readwrite, strong, null_resettable) ThemeDefault_ObjectDefaults *shape;
/** Test to see if @c shape has been set. */
@property(nonatomic, readwrite) BOOL hasShape;

@property(nonatomic, readwrite, strong, null_resettable) ThemeDefault_ObjectDefaults *line;
/** Test to see if @c line has been set. */
@property(nonatomic, readwrite) BOOL hasLine;

@end

#pragma mark - ThemeDefault_ObjectDefaults

typedef GPB_ENUM(ThemeDefault_ObjectDefaults_FieldNumber) {
  ThemeDefault_ObjectDefaults_FieldNumber_Props = 1,
  ThemeDefault_ObjectDefaults_FieldNumber_ThemeRef = 2,
};

@interface ThemeDefault_ObjectDefaults : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Properties *props;
/** Test to see if @c props has been set. */
@property(nonatomic, readwrite) BOOL hasProps;

/** Text box */
@property(nonatomic, readwrite, strong, null_resettable) ThemeReference *themeRef;
/** Test to see if @c themeRef has been set. */
@property(nonatomic, readwrite) BOOL hasThemeRef;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
