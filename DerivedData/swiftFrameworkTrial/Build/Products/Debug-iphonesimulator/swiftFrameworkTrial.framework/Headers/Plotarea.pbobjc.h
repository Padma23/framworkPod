// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plotarea.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AreaChart;
@class Bar3DChart;
@class BarChart;
@class BubbleChart;
@class ChartAxis;
@class DataLabels;
@class DoughnutChart;
@class Line3DChart;
@class LineChart;
@class ManualLayout;
@class Pie3DChart;
@class PieChart;
@class PlotArea_ChartDetails;
@class PlotArea_DataTable;
@class Properties;
@class RepresentivePieChart;
@class ScatterChart;
@class TextBody;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PlotArea_ChartDetails_ChartType

typedef GPB_ENUM(PlotArea_ChartDetails_ChartType) {
  PlotArea_ChartDetails_ChartType_Bar = 0,
  PlotArea_ChartDetails_ChartType_Bar3D = 1,
  PlotArea_ChartDetails_ChartType_Line = 2,
  PlotArea_ChartDetails_ChartType_Line3D = 3,
  PlotArea_ChartDetails_ChartType_Area = 4,
  PlotArea_ChartDetails_ChartType_Area3D = 5,
  PlotArea_ChartDetails_ChartType_Pie = 6,
  PlotArea_ChartDetails_ChartType_Pie3D = 7,
  PlotArea_ChartDetails_ChartType_Reppie = 8,
  PlotArea_ChartDetails_ChartType_Doughnut = 9,
  PlotArea_ChartDetails_ChartType_Scatter = 10,
  PlotArea_ChartDetails_ChartType_Bubble = 11,
};

GPBEnumDescriptor *PlotArea_ChartDetails_ChartType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PlotArea_ChartDetails_ChartType_IsValidValue(int32_t value);

#pragma mark - Enum PlotArea_ChartDetails_Grouping

typedef GPB_ENUM(PlotArea_ChartDetails_Grouping) {
  PlotArea_ChartDetails_Grouping_Standard = 0,
  PlotArea_ChartDetails_Grouping_Clustered = 1,
  PlotArea_ChartDetails_Grouping_Stacked = 2,
  PlotArea_ChartDetails_Grouping_Percentstacked = 3,
};

GPBEnumDescriptor *PlotArea_ChartDetails_Grouping_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PlotArea_ChartDetails_Grouping_IsValidValue(int32_t value);

#pragma mark - PlotareaRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface PlotareaRoot : GPBRootObject
@end

#pragma mark - PlotArea

typedef GPB_ENUM(PlotArea_FieldNumber) {
  PlotArea_FieldNumber_ChartArray = 1,
  PlotArea_FieldNumber_AxisArray = 2,
  PlotArea_FieldNumber_Layout = 3,
  PlotArea_FieldNumber_DataTable = 4,
  PlotArea_FieldNumber_Props = 5,
};

@interface PlotArea : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PlotArea_ChartDetails*> *chartArray;
/** The number of items in @c chartArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger chartArray_Count;

/** Category , Value, Date , Series Axis details. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ChartAxis*> *axisArray;
/** The number of items in @c axisArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger axisArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) ManualLayout *layout;
/** Test to see if @c layout has been set. */
@property(nonatomic, readwrite) BOOL hasLayout;

@property(nonatomic, readwrite, strong, null_resettable) PlotArea_DataTable *dataTable;
/** Test to see if @c dataTable has been set. */
@property(nonatomic, readwrite) BOOL hasDataTable;

@property(nonatomic, readwrite, strong, null_resettable) Properties *props;
/** Test to see if @c props has been set. */
@property(nonatomic, readwrite) BOOL hasProps;

@end

#pragma mark - PlotArea_ChartDetails

typedef GPB_ENUM(PlotArea_ChartDetails_FieldNumber) {
  PlotArea_ChartDetails_FieldNumber_Type = 1,
  PlotArea_ChartDetails_FieldNumber_AxisIdArray = 2,
  PlotArea_ChartDetails_FieldNumber_VaryColors = 3,
  PlotArea_ChartDetails_FieldNumber_DataLabel = 4,
  PlotArea_ChartDetails_FieldNumber_Grouping = 5,
  PlotArea_ChartDetails_FieldNumber_Bar = 6,
  PlotArea_ChartDetails_FieldNumber_Bar3D = 7,
  PlotArea_ChartDetails_FieldNumber_Line = 8,
  PlotArea_ChartDetails_FieldNumber_Line3D = 9,
  PlotArea_ChartDetails_FieldNumber_Area = 10,
  PlotArea_ChartDetails_FieldNumber_Pie = 11,
  PlotArea_ChartDetails_FieldNumber_Pie3D = 12,
  PlotArea_ChartDetails_FieldNumber_Reppie = 13,
  PlotArea_ChartDetails_FieldNumber_Doughnut = 14,
  PlotArea_ChartDetails_FieldNumber_Scatter = 15,
  PlotArea_ChartDetails_FieldNumber_Bubble = 16,
};

@interface PlotArea_ChartDetails : GPBMessage

@property(nonatomic, readwrite) PlotArea_ChartDetails_ChartType type;

@property(nonatomic, readwrite) BOOL hasType;
/**
 * Unique Identifier for each axis. We will have two entries in this for x and y axis.
 * The ids will basically map itself with the catAx and valAx Ids present in plotarea.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *axisIdArray;
/** The number of items in @c axisIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger axisIdArray_Count;

/** To determine if each data-point has a different color or not. */
@property(nonatomic, readwrite) BOOL varyColors;

@property(nonatomic, readwrite) BOOL hasVaryColors;
/** Data Label details for entire series. */
@property(nonatomic, readwrite, strong, null_resettable) DataLabels *dataLabel;
/** Test to see if @c dataLabel has been set. */
@property(nonatomic, readwrite) BOOL hasDataLabel;

@property(nonatomic, readwrite) PlotArea_ChartDetails_Grouping grouping;

@property(nonatomic, readwrite) BOOL hasGrouping;
@property(nonatomic, readwrite, strong, null_resettable) BarChart *bar;
/** Test to see if @c bar has been set. */
@property(nonatomic, readwrite) BOOL hasBar;

@property(nonatomic, readwrite, strong, null_resettable) Bar3DChart *bar3D;
/** Test to see if @c bar3D has been set. */
@property(nonatomic, readwrite) BOOL hasBar3D;

@property(nonatomic, readwrite, strong, null_resettable) LineChart *line;
/** Test to see if @c line has been set. */
@property(nonatomic, readwrite) BOOL hasLine;

@property(nonatomic, readwrite, strong, null_resettable) Line3DChart *line3D;
/** Test to see if @c line3D has been set. */
@property(nonatomic, readwrite) BOOL hasLine3D;

@property(nonatomic, readwrite, strong, null_resettable) AreaChart *area;
/** Test to see if @c area has been set. */
@property(nonatomic, readwrite) BOOL hasArea;

@property(nonatomic, readwrite, strong, null_resettable) PieChart *pie;
/** Test to see if @c pie has been set. */
@property(nonatomic, readwrite) BOOL hasPie;

@property(nonatomic, readwrite, strong, null_resettable) Pie3DChart *pie3D;
/** Test to see if @c pie3D has been set. */
@property(nonatomic, readwrite) BOOL hasPie3D;

@property(nonatomic, readwrite, strong, null_resettable) RepresentivePieChart *reppie;
/** Test to see if @c reppie has been set. */
@property(nonatomic, readwrite) BOOL hasReppie;

@property(nonatomic, readwrite, strong, null_resettable) DoughnutChart *doughnut;
/** Test to see if @c doughnut has been set. */
@property(nonatomic, readwrite) BOOL hasDoughnut;

@property(nonatomic, readwrite, strong, null_resettable) ScatterChart *scatter;
/** Test to see if @c scatter has been set. */
@property(nonatomic, readwrite) BOOL hasScatter;

@property(nonatomic, readwrite, strong, null_resettable) BubbleChart *bubble;
/** Test to see if @c bubble has been set. */
@property(nonatomic, readwrite) BOOL hasBubble;

@end

#pragma mark - PlotArea_DataTable

typedef GPB_ENUM(PlotArea_DataTable_FieldNumber) {
  PlotArea_DataTable_FieldNumber_HorizontalBorder = 1,
  PlotArea_DataTable_FieldNumber_VerticalBorder = 2,
  PlotArea_DataTable_FieldNumber_Outline = 3,
  PlotArea_DataTable_FieldNumber_LegendKeys = 4,
  PlotArea_DataTable_FieldNumber_Props = 5,
  PlotArea_DataTable_FieldNumber_TextBody = 6,
};

/**
 * Values for DataTable.
 * DataTable will be drawn if we this entry.
 **/
@interface PlotArea_DataTable : GPBMessage

/** Display Horizontal Border or not. */
@property(nonatomic, readwrite) BOOL horizontalBorder;

@property(nonatomic, readwrite) BOOL hasHorizontalBorder;
/** Display Vertical Border or not. */
@property(nonatomic, readwrite) BOOL verticalBorder;

@property(nonatomic, readwrite) BOOL hasVerticalBorder;
/** Display outline or not. */
@property(nonatomic, readwrite) BOOL outline;

@property(nonatomic, readwrite) BOOL hasOutline;
/** Display legend keys or not. */
@property(nonatomic, readwrite) BOOL legendKeys;

@property(nonatomic, readwrite) BOOL hasLegendKeys;
@property(nonatomic, readwrite, strong, null_resettable) Properties *props;
/** Test to see if @c props has been set. */
@property(nonatomic, readwrite) BOOL hasProps;

@property(nonatomic, readwrite, strong, null_resettable) TextBody *textBody;
/** Test to see if @c textBody has been set. */
@property(nonatomic, readwrite) BOOL hasTextBody;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
