// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stroke.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Fill;
@class Marker;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Stroke_StrokeType

/** NO line means none fill for the line */
typedef GPB_ENUM(Stroke_StrokeType) {
  /** solid */
  Stroke_StrokeType_Solid = 0,

  /** dashed */
  Stroke_StrokeType_Dash = 1,

  /** Round Dot */
  Stroke_StrokeType_RoundDot = 2,

  /** Square Dot */
  Stroke_StrokeType_SquareDot = 3,

  /** long dashes */
  Stroke_StrokeType_LongDash = 4,

  /** dash dot */
  Stroke_StrokeType_Dashdot = 5,

  /** long dash dot */
  Stroke_StrokeType_LongDashDot = 6,

  /** long dash dot dot */
  Stroke_StrokeType_LongDashDotDot = 7,
};

GPBEnumDescriptor *Stroke_StrokeType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Stroke_StrokeType_IsValidValue(int32_t value);

#pragma mark - Enum Stroke_JoinType

typedef GPB_ENUM(Stroke_JoinType) {
  Stroke_JoinType_Round = 1,
  Stroke_JoinType_Bevel = 2,
  Stroke_JoinType_Miter = 3,
};

GPBEnumDescriptor *Stroke_JoinType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Stroke_JoinType_IsValidValue(int32_t value);

#pragma mark - Enum Stroke_CapType

typedef GPB_ENUM(Stroke_CapType) {
  Stroke_CapType_Flat = 1,
  Stroke_CapType_Cround = 2,
  Stroke_CapType_Square = 3,
};

GPBEnumDescriptor *Stroke_CapType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Stroke_CapType_IsValidValue(int32_t value);

#pragma mark - StrokeRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface StrokeRoot : GPBRootObject
@end

#pragma mark - Stroke

typedef GPB_ENUM(Stroke_FieldNumber) {
  Stroke_FieldNumber_Type = 1,
  Stroke_FieldNumber_Width = 2,
  Stroke_FieldNumber_Jointype = 3,
  Stroke_FieldNumber_Fill = 4,
  Stroke_FieldNumber_Captype = 5,
  Stroke_FieldNumber_Headend = 6,
  Stroke_FieldNumber_Tailend = 7,
};

@interface Stroke : GPBMessage

/** stroke type */
@property(nonatomic, readwrite) Stroke_StrokeType type;

@property(nonatomic, readwrite) BOOL hasType;
/** stroke width , indicated in px. */
@property(nonatomic, readwrite) float width;

@property(nonatomic, readwrite) BOOL hasWidth;
/** Join type */
@property(nonatomic, readwrite) Stroke_JoinType jointype;

@property(nonatomic, readwrite) BOOL hasJointype;
/** fill value for stroke */
@property(nonatomic, readwrite, strong, null_resettable) Fill *fill;
/** Test to see if @c fill has been set. */
@property(nonatomic, readwrite) BOOL hasFill;

/** cap type */
@property(nonatomic, readwrite) Stroke_CapType captype;

@property(nonatomic, readwrite) BOOL hasCaptype;
/** marker at the head end */
@property(nonatomic, readwrite, strong, null_resettable) Marker *headend;
/** Test to see if @c headend has been set. */
@property(nonatomic, readwrite) BOOL hasHeadend;

/** marker at tail end. */
@property(nonatomic, readwrite, strong, null_resettable) Marker *tailend;
/** Test to see if @c tailend has been set. */
@property(nonatomic, readwrite) BOOL hasTailend;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
