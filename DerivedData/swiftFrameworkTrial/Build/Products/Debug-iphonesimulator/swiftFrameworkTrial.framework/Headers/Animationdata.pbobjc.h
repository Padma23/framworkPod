// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animationdata.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AnimationData_AnimationDetail;
@class AnimationData_AnimationDetail_AnimationRepeat;
@class AnimationData_AnimationTrigger;
@class AnimationData_AnimationTrigger_AnimationClick;
@class DisplayAnimation;
@class StyleAnimation;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum AnimationData_AnimationVariant

typedef GPB_ENUM(AnimationData_AnimationVariant) {
  AnimationData_AnimationVariant_Entry = 0,
  AnimationData_AnimationVariant_Exit = 1,
  AnimationData_AnimationVariant_Emphasis = 2,

  /** Path Animation */
  AnimationData_AnimationVariant_Path = 3,
};

GPBEnumDescriptor *AnimationData_AnimationVariant_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AnimationData_AnimationVariant_IsValidValue(int32_t value);

#pragma mark - Enum AnimationData_AnimationTrigger_AnimationStart

typedef GPB_ENUM(AnimationData_AnimationTrigger_AnimationStart) {
  /** On Click */
  AnimationData_AnimationTrigger_AnimationStart_Click = 0,

  /** Start with the previous effect */
  AnimationData_AnimationTrigger_AnimationStart_Witheffect = 1,

  /** Start after the previous effect */
  AnimationData_AnimationTrigger_AnimationStart_Aftereffect = 2,
};

GPBEnumDescriptor *AnimationData_AnimationTrigger_AnimationStart_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AnimationData_AnimationTrigger_AnimationStart_IsValidValue(int32_t value);

#pragma mark - Enum AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType

typedef GPB_ENUM(AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType) {
  /** Until Next Click */
  AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Nextclick = 0,

  /** Until Next Slide */
  AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Nextslide = 1,

  /** repeat for a count. */
  AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Repeatcount = 2,
};

GPBEnumDescriptor *AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_IsValidValue(int32_t value);

#pragma mark - AnimationdataRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface AnimationdataRoot : GPBRootObject
@end

#pragma mark - AnimationData

typedef GPB_ENUM(AnimationData_FieldNumber) {
  AnimationData_FieldNumber_Id_p = 1,
  AnimationData_FieldNumber_Variant = 2,
  AnimationData_FieldNumber_Entry = 3,
  AnimationData_FieldNumber_Exit = 4,
  AnimationData_FieldNumber_Emphasis = 5,
  AnimationData_FieldNumber_Trigger = 6,
  AnimationData_FieldNumber_Detail = 7,
  AnimationData_FieldNumber_ParentId = 8,
};

@interface AnimationData : GPBMessage

/** Animation id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite) AnimationData_AnimationVariant variant;

@property(nonatomic, readwrite) BOOL hasVariant;
@property(nonatomic, readwrite, strong, null_resettable) DisplayAnimation *entry;
/** Test to see if @c entry has been set. */
@property(nonatomic, readwrite) BOOL hasEntry;

@property(nonatomic, readwrite, strong, null_resettable) DisplayAnimation *exit;
/** Test to see if @c exit has been set. */
@property(nonatomic, readwrite) BOOL hasExit;

@property(nonatomic, readwrite, strong, null_resettable) StyleAnimation *emphasis;
/** Test to see if @c emphasis has been set. */
@property(nonatomic, readwrite) BOOL hasEmphasis;

@property(nonatomic, readwrite, strong, null_resettable) AnimationData_AnimationTrigger *trigger;
/** Test to see if @c trigger has been set. */
@property(nonatomic, readwrite) BOOL hasTrigger;

/** Details about the animation. */
@property(nonatomic, readwrite, strong, null_resettable) AnimationData_AnimationDetail *detail;
/** Test to see if @c detail has been set. */
@property(nonatomic, readwrite) BOOL hasDetail;

/**
 * Whenever a para contains an animation , we need to know the animation it overrides.
 * This variable will carry the id of the animationgroup overridden.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *parentId;
/** Test to see if @c parentId has been set. */
@property(nonatomic, readwrite) BOOL hasParentId;

@end

#pragma mark - AnimationData_AnimationTrigger

typedef GPB_ENUM(AnimationData_AnimationTrigger_FieldNumber) {
  AnimationData_AnimationTrigger_FieldNumber_Start = 1,
  AnimationData_AnimationTrigger_FieldNumber_Click = 2,
};

/**
 * Animation trigger
 **/
@interface AnimationData_AnimationTrigger : GPBMessage

@property(nonatomic, readwrite) AnimationData_AnimationTrigger_AnimationStart start;

@property(nonatomic, readwrite) BOOL hasStart;
/** Defines Target for Click */
@property(nonatomic, readwrite, strong, null_resettable) AnimationData_AnimationTrigger_AnimationClick *click;
/** Test to see if @c click has been set. */
@property(nonatomic, readwrite) BOOL hasClick;

@end

#pragma mark - AnimationData_AnimationTrigger_AnimationClick

typedef GPB_ENUM(AnimationData_AnimationTrigger_AnimationClick_FieldNumber) {
  AnimationData_AnimationTrigger_AnimationClick_FieldNumber_Id_p = 1,
};

@interface AnimationData_AnimationTrigger_AnimationClick : GPBMessage

/** Trigger Animation on click of this shape ID. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@end

#pragma mark - AnimationData_AnimationDetail

typedef GPB_ENUM(AnimationData_AnimationDetail_FieldNumber) {
  AnimationData_AnimationDetail_FieldNumber_Delay = 1,
  AnimationData_AnimationDetail_FieldNumber_Duration = 2,
  AnimationData_AnimationDetail_FieldNumber_Repeat = 3,
};

@interface AnimationData_AnimationDetail : GPBMessage

/** Delay the animation for given seconds. */
@property(nonatomic, readwrite) float delay;

@property(nonatomic, readwrite) BOOL hasDelay;
/** Animation Duration in seconds */
@property(nonatomic, readwrite) float duration;

@property(nonatomic, readwrite) BOOL hasDuration;
/** Type of Animation Repeat */
@property(nonatomic, readwrite, strong, null_resettable) AnimationData_AnimationDetail_AnimationRepeat *repeat;
/** Test to see if @c repeat has been set. */
@property(nonatomic, readwrite) BOOL hasRepeat;

@end

#pragma mark - AnimationData_AnimationDetail_AnimationRepeat

typedef GPB_ENUM(AnimationData_AnimationDetail_AnimationRepeat_FieldNumber) {
  AnimationData_AnimationDetail_AnimationRepeat_FieldNumber_Type = 1,
  AnimationData_AnimationDetail_AnimationRepeat_FieldNumber_RepeatCount = 2,
};

/**
 * Repeat the Animation
 **/
@interface AnimationData_AnimationDetail_AnimationRepeat : GPBMessage

@property(nonatomic, readwrite) AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType type;

@property(nonatomic, readwrite) BOOL hasType;
/** Animation Repeat Count */
@property(nonatomic, readwrite) int32_t repeatCount;

@property(nonatomic, readwrite) BOOL hasRepeatCount;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
