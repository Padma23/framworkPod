// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shapegeometry.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Shapegeometry.pbobjc.h"
 #import "Preset.pbobjc.h"
 #import "Customgeometry.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ShapegeometryRoot

@implementation ShapegeometryRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ShapegeometryRoot_FileDescriptor

static GPBFileDescriptor *ShapegeometryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ShapeGeometry

@implementation ShapeGeometry

@dynamic hasType, type;
@dynamic hasPreset, preset;
@dynamic hasCustom, custom;

typedef struct ShapeGeometry__storage_ {
  uint32_t _has_storage_[1];
  ShapeGeometry_ShapeGeometryType type;
  Preset *preset;
  CustomGeometry *custom;
} ShapeGeometry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ShapeGeometry_ShapeGeometryType_EnumDescriptor,
        .number = ShapeGeometry_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShapeGeometry__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "preset",
        .dataTypeSpecific.className = GPBStringifySymbol(Preset),
        .number = ShapeGeometry_FieldNumber_Preset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShapeGeometry__storage_, preset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomGeometry),
        .number = ShapeGeometry_FieldNumber_Custom,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShapeGeometry__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShapeGeometry class]
                                     rootClass:[ShapegeometryRoot class]
                                          file:ShapegeometryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShapeGeometry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ShapeGeometry_ShapeGeometryType

GPBEnumDescriptor *ShapeGeometry_ShapeGeometryType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Preset\000Custom\000";
    static const int32_t values[] = {
        ShapeGeometry_ShapeGeometryType_Preset,
        ShapeGeometry_ShapeGeometryType_Custom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ShapeGeometry_ShapeGeometryType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ShapeGeometry_ShapeGeometryType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ShapeGeometry_ShapeGeometryType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ShapeGeometry_ShapeGeometryType_Preset:
    case ShapeGeometry_ShapeGeometryType_Custom:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
