// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textboxprops.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Textboxprops.pbobjc.h"
 #import "Margin.pbobjc.h"
 #import "Verticalaligntype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TextboxpropsRoot

@implementation TextboxpropsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TextboxpropsRoot_FileDescriptor

static GPBFileDescriptor *TextboxpropsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - TextBoxProps

@implementation TextBoxProps

@dynamic hasValign, valign;
@dynamic hasInset, inset;
@dynamic hasColumn, column;
@dynamic hasAutoFit, autoFit;
@dynamic hasSpcProps, spcProps;
@dynamic hasWrap, wrap;

typedef struct TextBoxProps__storage_ {
  uint32_t _has_storage_[1];
  VerticalAlignType valign;
  TextBoxProps_TextWrap wrap;
  Margin *inset;
  TextBoxProps_ColumnLayout *column;
  TextBoxProps_AutoFit *autoFit;
  TextBoxProps_ParaSpacingProps *spcProps;
} TextBoxProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = VerticalAlignType_Top,
        .core.name = "valign",
        .core.dataTypeSpecific.enumDescFunc = VerticalAlignType_EnumDescriptor,
        .core.number = TextBoxProps_FieldNumber_Valign,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(TextBoxProps__storage_, valign),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "inset",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Margin),
        .core.number = TextBoxProps_FieldNumber_Inset,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(TextBoxProps__storage_, inset),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "column",
        .core.dataTypeSpecific.className = GPBStringifySymbol(TextBoxProps_ColumnLayout),
        .core.number = TextBoxProps_FieldNumber_Column,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(TextBoxProps__storage_, column),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "autoFit",
        .core.dataTypeSpecific.className = GPBStringifySymbol(TextBoxProps_AutoFit),
        .core.number = TextBoxProps_FieldNumber_AutoFit,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(TextBoxProps__storage_, autoFit),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "spcProps",
        .core.dataTypeSpecific.className = GPBStringifySymbol(TextBoxProps_ParaSpacingProps),
        .core.number = TextBoxProps_FieldNumber_SpcProps,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(TextBoxProps__storage_, spcProps),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = TextBoxProps_TextWrap_Rect,
        .core.name = "wrap",
        .core.dataTypeSpecific.enumDescFunc = TextBoxProps_TextWrap_EnumDescriptor,
        .core.number = TextBoxProps_FieldNumber_Wrap,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(TextBoxProps__storage_, wrap),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextBoxProps class]
                                     rootClass:[TextboxpropsRoot class]
                                          file:TextboxpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(TextBoxProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\007\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum TextBoxProps_TextWrap

GPBEnumDescriptor *TextBoxProps_TextWrap_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Rect\000";
    static const int32_t values[] = {
        TextBoxProps_TextWrap_None,
        TextBoxProps_TextWrap_Rect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TextBoxProps_TextWrap)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TextBoxProps_TextWrap_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TextBoxProps_TextWrap_IsValidValue(int32_t value__) {
  switch (value__) {
    case TextBoxProps_TextWrap_None:
    case TextBoxProps_TextWrap_Rect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TextBoxProps_ColumnLayout

@implementation TextBoxProps_ColumnLayout

@dynamic hasNum, num;
@dynamic hasGap, gap;

typedef struct TextBoxProps_ColumnLayout__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  int32_t gap;
} TextBoxProps_ColumnLayout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = TextBoxProps_ColumnLayout_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextBoxProps_ColumnLayout__storage_, num),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gap",
        .dataTypeSpecific.className = NULL,
        .number = TextBoxProps_ColumnLayout_FieldNumber_Gap,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextBoxProps_ColumnLayout__storage_, gap),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextBoxProps_ColumnLayout class]
                                     rootClass:[TextboxpropsRoot class]
                                          file:TextboxpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextBoxProps_ColumnLayout__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TextBoxProps)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextBoxProps_AutoFit

@implementation TextBoxProps_AutoFit

@dynamic hasType, type;
@dynamic hasNormal, normal;

typedef struct TextBoxProps_AutoFit__storage_ {
  uint32_t _has_storage_[1];
  TextBoxProps_AutoFit_AutoFitType type;
  TextBoxProps_AutoFit_NormalAutoFit *normal;
} TextBoxProps_AutoFit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = TextBoxProps_AutoFit_AutoFitType_EnumDescriptor,
        .number = TextBoxProps_AutoFit_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextBoxProps_AutoFit__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "normal",
        .dataTypeSpecific.className = GPBStringifySymbol(TextBoxProps_AutoFit_NormalAutoFit),
        .number = TextBoxProps_AutoFit_FieldNumber_Normal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextBoxProps_AutoFit__storage_, normal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextBoxProps_AutoFit class]
                                     rootClass:[TextboxpropsRoot class]
                                          file:TextboxpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextBoxProps_AutoFit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TextBoxProps)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum TextBoxProps_AutoFit_AutoFitType

GPBEnumDescriptor *TextBoxProps_AutoFit_AutoFitType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Normal\000Shape\000";
    static const int32_t values[] = {
        TextBoxProps_AutoFit_AutoFitType_None,
        TextBoxProps_AutoFit_AutoFitType_Normal,
        TextBoxProps_AutoFit_AutoFitType_Shape,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TextBoxProps_AutoFit_AutoFitType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TextBoxProps_AutoFit_AutoFitType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TextBoxProps_AutoFit_AutoFitType_IsValidValue(int32_t value__) {
  switch (value__) {
    case TextBoxProps_AutoFit_AutoFitType_None:
    case TextBoxProps_AutoFit_AutoFitType_Normal:
    case TextBoxProps_AutoFit_AutoFitType_Shape:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TextBoxProps_AutoFit_NormalAutoFit

@implementation TextBoxProps_AutoFit_NormalAutoFit

@dynamic hasFontScale, fontScale;
@dynamic hasLineSpaceScale, lineSpaceScale;

typedef struct TextBoxProps_AutoFit_NormalAutoFit__storage_ {
  uint32_t _has_storage_[1];
  float fontScale;
  float lineSpaceScale;
} TextBoxProps_AutoFit_NormalAutoFit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fontScale",
        .dataTypeSpecific.className = NULL,
        .number = TextBoxProps_AutoFit_NormalAutoFit_FieldNumber_FontScale,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextBoxProps_AutoFit_NormalAutoFit__storage_, fontScale),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "lineSpaceScale",
        .dataTypeSpecific.className = NULL,
        .number = TextBoxProps_AutoFit_NormalAutoFit_FieldNumber_LineSpaceScale,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextBoxProps_AutoFit_NormalAutoFit__storage_, lineSpaceScale),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextBoxProps_AutoFit_NormalAutoFit class]
                                     rootClass:[TextboxpropsRoot class]
                                          file:TextboxpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextBoxProps_AutoFit_NormalAutoFit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TextBoxProps_AutoFit)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextBoxProps_ParaSpacingProps

@implementation TextBoxProps_ParaSpacingProps

@dynamic hasSpcBefFirst, spcBefFirst;
@dynamic hasSpcAftLast, spcAftLast;

typedef struct TextBoxProps_ParaSpacingProps__storage_ {
  uint32_t _has_storage_[1];
} TextBoxProps_ParaSpacingProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spcBefFirst",
        .dataTypeSpecific.className = NULL,
        .number = TextBoxProps_ParaSpacingProps_FieldNumber_SpcBefFirst,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "spcAftLast",
        .dataTypeSpecific.className = NULL,
        .number = TextBoxProps_ParaSpacingProps_FieldNumber_SpcAftLast,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextBoxProps_ParaSpacingProps class]
                                     rootClass:[TextboxpropsRoot class]
                                          file:TextboxpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextBoxProps_ParaSpacingProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TextBoxProps)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
