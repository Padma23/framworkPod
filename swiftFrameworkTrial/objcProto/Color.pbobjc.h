// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: color.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ColorTweaks;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Color_ColorReference

typedef GPB_ENUM(Color_ColorReference) {
  /** Substitutes the holder color , Used in theme to indicate that the color choice. */
  Color_ColorReference_Holder = 0,

  /** Background 1 */
  Color_ColorReference_Bg1 = 1,

  /** Text 1 */
  Color_ColorReference_Tx1 = 2,

  /** Background 2 */
  Color_ColorReference_Bg2 = 3,

  /** Text 2 */
  Color_ColorReference_Tx2 = 4,

  /** Accent 1 */
  Color_ColorReference_A1 = 5,

  /** Accent 2 */
  Color_ColorReference_A2 = 6,

  /** Accent 3 */
  Color_ColorReference_A3 = 7,

  /** Accent 4 */
  Color_ColorReference_A4 = 8,

  /** Accent 5 */
  Color_ColorReference_A5 = 9,

  /** Accent 6 */
  Color_ColorReference_A6 = 10,

  /** Hyperlink */
  Color_ColorReference_Hlink = 11,

  /** Follow Hyperlink */
  Color_ColorReference_Followhlink = 12,

  /** custom , Used in local properties of shape (fill, stroke ...) to indicate other colors. */
  Color_ColorReference_Custom = 13,

  /** Light1 color of the theme. */
  Color_ColorReference_Lt1 = 14,

  /** Dark1 color of the theme. */
  Color_ColorReference_Dk1 = 15,
};

GPBEnumDescriptor *Color_ColorReference_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Color_ColorReference_IsValidValue(int32_t value);

#pragma mark - ColorRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ColorRoot : GPBRootObject
@end

#pragma mark - Color

typedef GPB_ENUM(Color_FieldNumber) {
  Color_FieldNumber_Type = 1,
  Color_FieldNumber_RgbArray = 2,
  Color_FieldNumber_Tweaks = 3,
};

@interface Color : GPBMessage

@property(nonatomic, readwrite) Color_ColorReference type;

@property(nonatomic, readwrite) BOOL hasType;
/** If the type is Custom , rgb color values are stored in an array , order red , green , blue */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *rgbArray;
/** The number of items in @c rgbArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rgbArray_Count;

/** Color tweaks */
@property(nonatomic, readwrite, strong, null_resettable) ColorTweaks *tweaks;
/** Test to see if @c tweaks has been set. */
@property(nonatomic, readwrite) BOOL hasTweaks;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
