// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: locks.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Locks.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LocksRoot

@implementation LocksRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - LocksRoot_FileDescriptor

static GPBFileDescriptor *LocksRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Locks

@implementation Locks

@dynamic hasNoHandles, noHandles;
@dynamic hasNoAspectChange, noAspectChange;
@dynamic hasNoArrowHeadChange, noArrowHeadChange;
@dynamic hasNoRotation, noRotation;
@dynamic hasNoResize, noResize;
@dynamic hasNoMove, noMove;
@dynamic hasNoShapeTypeChange, noShapeTypeChange;
@dynamic hasNoCrop, noCrop;
@dynamic hasNoGroup, noGroup;
@dynamic hasNoUnGroup, noUnGroup;
@dynamic hasNoSelect, noSelect;
@dynamic hasNoModify, noModify;
@dynamic lockersArray, lockersArray_Count;

typedef struct Locks__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *lockersArray;
} Locks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noHandles",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoHandles,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noAspectChange",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoAspectChange,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noArrowHeadChange",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoArrowHeadChange,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noRotation",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoRotation,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noResize",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoResize,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noMove",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoMove,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noShapeTypeChange",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoShapeTypeChange,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noCrop",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoCrop,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noGroup",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoGroup,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noUnGroup",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoUnGroup,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noSelect",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoSelect,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noModify",
        .dataTypeSpecific.className = NULL,
        .number = Locks_FieldNumber_NoModify,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lockersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Locks_LockedBy),
        .number = Locks_FieldNumber_LockersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Locks__storage_, lockersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Locks class]
                                     rootClass:[LocksRoot class]
                                          file:LocksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Locks__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001\t\000\002\016\000\003\021\000\004\n\000\005\010\000\006\006\000\007\021\000\010\006\000\t\007\000\n\t\000\013\010\000\014\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Locks_LockedBy

@implementation Locks_LockedBy

@dynamic hasProp, prop;
@dynamic hasLocker, locker;

typedef struct Locks_LockedBy__storage_ {
  uint32_t _has_storage_[1];
  Locks_LockedBy_LockProp prop;
  NSString *locker;
} Locks_LockedBy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prop",
        .dataTypeSpecific.enumDescFunc = Locks_LockedBy_LockProp_EnumDescriptor,
        .number = Locks_LockedBy_FieldNumber_Prop,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Locks_LockedBy__storage_, prop),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "locker",
        .dataTypeSpecific.className = NULL,
        .number = Locks_LockedBy_FieldNumber_Locker,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Locks_LockedBy__storage_, locker),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Locks_LockedBy class]
                                     rootClass:[LocksRoot class]
                                          file:LocksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Locks_LockedBy__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Locks)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Locks_LockedBy_LockProp

GPBEnumDescriptor *Locks_LockedBy_LockProp_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Handles\000AspectChange\000ArrowHeadChange\000Rot"
        "ation\000Resize\000Move\000ShapeTypeChange\000Crop\000G"
        "roup\000Ungroup\000Select\000Modify\000";
    static const int32_t values[] = {
        Locks_LockedBy_LockProp_Handles,
        Locks_LockedBy_LockProp_AspectChange,
        Locks_LockedBy_LockProp_ArrowHeadChange,
        Locks_LockedBy_LockProp_Rotation,
        Locks_LockedBy_LockProp_Resize,
        Locks_LockedBy_LockProp_Move,
        Locks_LockedBy_LockProp_ShapeTypeChange,
        Locks_LockedBy_LockProp_Crop,
        Locks_LockedBy_LockProp_Group,
        Locks_LockedBy_LockProp_Ungroup,
        Locks_LockedBy_LockProp_Select,
        Locks_LockedBy_LockProp_Modify,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Locks_LockedBy_LockProp)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Locks_LockedBy_LockProp_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Locks_LockedBy_LockProp_IsValidValue(int32_t value__) {
  switch (value__) {
    case Locks_LockedBy_LockProp_Handles:
    case Locks_LockedBy_LockProp_AspectChange:
    case Locks_LockedBy_LockProp_ArrowHeadChange:
    case Locks_LockedBy_LockProp_Rotation:
    case Locks_LockedBy_LockProp_Resize:
    case Locks_LockedBy_LockProp_Move:
    case Locks_LockedBy_LockProp_ShapeTypeChange:
    case Locks_LockedBy_LockProp_Crop:
    case Locks_LockedBy_LockProp_Group:
    case Locks_LockedBy_LockProp_Ungroup:
    case Locks_LockedBy_LockProp_Select:
    case Locks_LockedBy_LockProp_Modify:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
