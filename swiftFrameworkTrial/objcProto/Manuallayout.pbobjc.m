// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manuallayout.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Manuallayout.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ManuallayoutRoot

@implementation ManuallayoutRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ManuallayoutRoot_FileDescriptor

static GPBFileDescriptor *ManuallayoutRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ManualLayout

@implementation ManualLayout

@dynamic hasLeft, left;
@dynamic hasTop, top;
@dynamic hasWidth, width;
@dynamic hasHeight, height;

typedef struct ManualLayout__storage_ {
  uint32_t _has_storage_[1];
  ManualLayout_LayoutValue *left;
  ManualLayout_LayoutValue *top;
  ManualLayout_LayoutValue *width;
  ManualLayout_LayoutValue *height;
} ManualLayout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "left",
        .dataTypeSpecific.className = GPBStringifySymbol(ManualLayout_LayoutValue),
        .number = ManualLayout_FieldNumber_Left,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ManualLayout__storage_, left),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "top",
        .dataTypeSpecific.className = GPBStringifySymbol(ManualLayout_LayoutValue),
        .number = ManualLayout_FieldNumber_Top,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ManualLayout__storage_, top),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = GPBStringifySymbol(ManualLayout_LayoutValue),
        .number = ManualLayout_FieldNumber_Width,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ManualLayout__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = GPBStringifySymbol(ManualLayout_LayoutValue),
        .number = ManualLayout_FieldNumber_Height,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ManualLayout__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ManualLayout class]
                                     rootClass:[ManuallayoutRoot class]
                                          file:ManuallayoutRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ManualLayout__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ManualLayout_LayoutValue

@implementation ManualLayout_LayoutValue

@dynamic hasMode, mode;
@dynamic hasVal, val;

typedef struct ManualLayout_LayoutValue__storage_ {
  uint32_t _has_storage_[1];
  ManualLayout_LayoutValue_LayoutMode mode;
  float val;
} ManualLayout_LayoutValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = ManualLayout_LayoutValue_LayoutMode_EnumDescriptor,
        .number = ManualLayout_LayoutValue_FieldNumber_Mode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ManualLayout_LayoutValue__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = ManualLayout_LayoutValue_FieldNumber_Val,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ManualLayout_LayoutValue__storage_, val),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ManualLayout_LayoutValue class]
                                     rootClass:[ManuallayoutRoot class]
                                          file:ManuallayoutRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ManualLayout_LayoutValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ManualLayout)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ManualLayout_LayoutValue_LayoutMode

GPBEnumDescriptor *ManualLayout_LayoutValue_LayoutMode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Edge\000Factor\000";
    static const int32_t values[] = {
        ManualLayout_LayoutValue_LayoutMode_Edge,
        ManualLayout_LayoutValue_LayoutMode_Factor,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ManualLayout_LayoutValue_LayoutMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ManualLayout_LayoutValue_LayoutMode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ManualLayout_LayoutValue_LayoutMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case ManualLayout_LayoutValue_LayoutMode_Edge:
    case ManualLayout_LayoutValue_LayoutMode_Factor:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
