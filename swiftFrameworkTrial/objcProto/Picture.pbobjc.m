// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: picture.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Picture.pbobjc.h"
 #import "Offset.pbobjc.h"
 #import "Pictureproperties.pbobjc.h"
 #import "Picturevalue.pbobjc.h"
 #import "Properties.pbobjc.h"
 #import "Nonvisualpictureprops.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PictureRoot

@implementation PictureRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PictureRoot_FileDescriptor

static GPBFileDescriptor *PictureRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Picture

@implementation Picture

@dynamic hasNvOprops, nvOprops;
@dynamic hasValue, value;
@dynamic hasCrop, crop;
@dynamic hasPictureProps, pictureProps;
@dynamic hasProps, props;

typedef struct Picture__storage_ {
  uint32_t _has_storage_[1];
  NonVisualPictureProps *nvOprops;
  PictureValue *value;
  Offset *crop;
  PictureProperties *pictureProps;
  Properties *props;
} Picture__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nvOprops",
        .dataTypeSpecific.className = GPBStringifySymbol(NonVisualPictureProps),
        .number = Picture_FieldNumber_NvOprops,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Picture__storage_, nvOprops),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(PictureValue),
        .number = Picture_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Picture__storage_, value),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "crop",
        .dataTypeSpecific.className = GPBStringifySymbol(Offset),
        .number = Picture_FieldNumber_Crop,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Picture__storage_, crop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pictureProps",
        .dataTypeSpecific.className = GPBStringifySymbol(PictureProperties),
        .number = Picture_FieldNumber_PictureProps,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Picture__storage_, pictureProps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = Picture_FieldNumber_Props,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Picture__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Picture class]
                                     rootClass:[PictureRoot class]
                                          file:PictureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Picture__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\003E\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
