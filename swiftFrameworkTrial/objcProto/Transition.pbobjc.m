// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transition.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Transition.pbobjc.h"
 #import "Displayanimation.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TransitionRoot

@implementation TransitionRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TransitionRoot_FileDescriptor

static GPBFileDescriptor *TransitionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Transition

@implementation Transition

@dynamic hasAnim, anim;
@dynamic hasSpeed, speed;
@dynamic hasSound, sound;
@dynamic hasNoAdvanceOnClick, noAdvanceOnClick;
@dynamic hasAdvTime, advTime;

typedef struct Transition__storage_ {
  uint32_t _has_storage_[1];
  float speed;
  int32_t advTime;
  DisplayAnimation *anim;
  Transition_SoundAction *sound;
} Transition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anim",
        .dataTypeSpecific.className = GPBStringifySymbol(DisplayAnimation),
        .number = Transition_FieldNumber_Anim,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transition__storage_, anim),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "speed",
        .dataTypeSpecific.className = NULL,
        .number = Transition_FieldNumber_Speed,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Transition__storage_, speed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "sound",
        .dataTypeSpecific.className = GPBStringifySymbol(Transition_SoundAction),
        .number = Transition_FieldNumber_Sound,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Transition__storage_, sound),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "noAdvanceOnClick",
        .dataTypeSpecific.className = NULL,
        .number = Transition_FieldNumber_NoAdvanceOnClick,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "advTime",
        .dataTypeSpecific.className = NULL,
        .number = Transition_FieldNumber_AdvTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Transition__storage_, advTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transition class]
                                     rootClass:[TransitionRoot class]
                                          file:TransitionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transition__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\020\000\005\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Transition_SoundAction

@implementation Transition_SoundAction

@dynamic hasStSnd, stSnd;
@dynamic hasEndSnd, endSnd;

typedef struct Transition_SoundAction__storage_ {
  uint32_t _has_storage_[1];
  Transition_SoundAction_StartSound *stSnd;
} Transition_SoundAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stSnd",
        .dataTypeSpecific.className = GPBStringifySymbol(Transition_SoundAction_StartSound),
        .number = Transition_SoundAction_FieldNumber_StSnd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transition_SoundAction__storage_, stSnd),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endSnd",
        .dataTypeSpecific.className = NULL,
        .number = Transition_SoundAction_FieldNumber_EndSnd,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transition_SoundAction class]
                                     rootClass:[TransitionRoot class]
                                          file:TransitionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transition_SoundAction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Transition)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Transition_SoundAction_StartSound

@implementation Transition_SoundAction_StartSound

@dynamic hasSnd, snd;
@dynamic hasLoop, loop;

typedef struct Transition_SoundAction_StartSound__storage_ {
  uint32_t _has_storage_[1];
  Transition_SoundAction_StartSound_Loop loop;
  Transition_SoundAction_StartSound_Sound *snd;
} Transition_SoundAction_StartSound__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "snd",
        .dataTypeSpecific.className = GPBStringifySymbol(Transition_SoundAction_StartSound_Sound),
        .number = Transition_SoundAction_StartSound_FieldNumber_Snd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transition_SoundAction_StartSound__storage_, snd),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "loop",
        .dataTypeSpecific.enumDescFunc = Transition_SoundAction_StartSound_Loop_EnumDescriptor,
        .number = Transition_SoundAction_StartSound_FieldNumber_Loop,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Transition_SoundAction_StartSound__storage_, loop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transition_SoundAction_StartSound class]
                                     rootClass:[TransitionRoot class]
                                          file:TransitionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transition_SoundAction_StartSound__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Transition_SoundAction)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Transition_SoundAction_StartSound_Loop

GPBEnumDescriptor *Transition_SoundAction_StartSound_Loop_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Forever\000TillChange\000";
    static const int32_t values[] = {
        Transition_SoundAction_StartSound_Loop_Forever,
        Transition_SoundAction_StartSound_Loop_TillChange,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Transition_SoundAction_StartSound_Loop)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Transition_SoundAction_StartSound_Loop_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Transition_SoundAction_StartSound_Loop_IsValidValue(int32_t value__) {
  switch (value__) {
    case Transition_SoundAction_StartSound_Loop_Forever:
    case Transition_SoundAction_StartSound_Loop_TillChange:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Transition_SoundAction_StartSound_Sound

@implementation Transition_SoundAction_StartSound_Sound

@dynamic hasType, type;
@dynamic hasId_p, id_p;
@dynamic hasURL, URL;

typedef struct Transition_SoundAction_StartSound_Sound__storage_ {
  uint32_t _has_storage_[1];
  Transition_SoundAction_StartSound_Sound_SoundType type;
  NSString *id_p;
  NSString *URL;
} Transition_SoundAction_StartSound_Sound__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Transition_SoundAction_StartSound_Sound_SoundType_EnumDescriptor,
        .number = Transition_SoundAction_StartSound_Sound_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transition_SoundAction_StartSound_Sound__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Transition_SoundAction_StartSound_Sound_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Transition_SoundAction_StartSound_Sound__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = Transition_SoundAction_StartSound_Sound_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Transition_SoundAction_StartSound_Sound__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transition_SoundAction_StartSound_Sound class]
                                     rootClass:[TransitionRoot class]
                                          file:TransitionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transition_SoundAction_StartSound_Sound__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Transition_SoundAction_StartSound)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Transition_SoundAction_StartSound_Sound_SoundType

GPBEnumDescriptor *Transition_SoundAction_StartSound_Sound_SoundType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Builtin\000External\000";
    static const int32_t values[] = {
        Transition_SoundAction_StartSound_Sound_SoundType_Builtin,
        Transition_SoundAction_StartSound_Sound_SoundType_External,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Transition_SoundAction_StartSound_Sound_SoundType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Transition_SoundAction_StartSound_Sound_SoundType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Transition_SoundAction_StartSound_Sound_SoundType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Transition_SoundAction_StartSound_Sound_SoundType_Builtin:
    case Transition_SoundAction_StartSound_Sound_SoundType_External:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
