// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: placeholder.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Placeholder.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PlaceholderRoot

@implementation PlaceholderRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PlaceholderRoot_FileDescriptor

static GPBFileDescriptor *PlaceholderRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PlaceHolder

@implementation PlaceHolder

@dynamic hasType, type;
@dynamic hasRelId, relId;

typedef struct PlaceHolder__storage_ {
  uint32_t _has_storage_[1];
  PlaceHolder_PlaceHolderType type;
  NSString *relId;
} PlaceHolder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PlaceHolder_PlaceHolderType_EnumDescriptor,
        .number = PlaceHolder_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlaceHolder__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PlaceHolder_FieldNumber_RelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlaceHolder__storage_, relId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlaceHolder class]
                                     rootClass:[PlaceholderRoot class]
                                          file:PlaceholderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlaceHolder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PlaceHolder_PlaceHolderType

GPBEnumDescriptor *PlaceHolder_PlaceHolderType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Title\000Txtbody\000Datetime\000Footer\000Slidenum\000C"
        "ontent\000Txt\000Subtitle\000Pict\000Clipart\000Chart\000T"
        "able\000Smartart\000Media\000";
    static const int32_t values[] = {
        PlaceHolder_PlaceHolderType_Title,
        PlaceHolder_PlaceHolderType_Txtbody,
        PlaceHolder_PlaceHolderType_Datetime,
        PlaceHolder_PlaceHolderType_Footer,
        PlaceHolder_PlaceHolderType_Slidenum,
        PlaceHolder_PlaceHolderType_Content,
        PlaceHolder_PlaceHolderType_Txt,
        PlaceHolder_PlaceHolderType_Subtitle,
        PlaceHolder_PlaceHolderType_Pict,
        PlaceHolder_PlaceHolderType_Clipart,
        PlaceHolder_PlaceHolderType_Chart,
        PlaceHolder_PlaceHolderType_Table,
        PlaceHolder_PlaceHolderType_Smartart,
        PlaceHolder_PlaceHolderType_Media,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlaceHolder_PlaceHolderType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlaceHolder_PlaceHolderType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlaceHolder_PlaceHolderType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlaceHolder_PlaceHolderType_Title:
    case PlaceHolder_PlaceHolderType_Txtbody:
    case PlaceHolder_PlaceHolderType_Datetime:
    case PlaceHolder_PlaceHolderType_Footer:
    case PlaceHolder_PlaceHolderType_Slidenum:
    case PlaceHolder_PlaceHolderType_Content:
    case PlaceHolder_PlaceHolderType_Txt:
    case PlaceHolder_PlaceHolderType_Subtitle:
    case PlaceHolder_PlaceHolderType_Pict:
    case PlaceHolder_PlaceHolderType_Clipart:
    case PlaceHolder_PlaceHolderType_Chart:
    case PlaceHolder_PlaceHolderType_Table:
    case PlaceHolder_PlaceHolderType_Smartart:
    case PlaceHolder_PlaceHolderType_Media:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
