// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bubblechart.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Bubblechart.pbobjc.h"
 #import "Seriesdetails.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BubblechartRoot

@implementation BubblechartRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BubblechartRoot_FileDescriptor

static GPBFileDescriptor *BubblechartRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - BubbleChart

@implementation BubbleChart

@dynamic hasDetails, details;

typedef struct BubbleChart__storage_ {
  uint32_t _has_storage_[1];
  BubbleChart_BubbleChartDetails *details;
} BubbleChart__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "details",
        .dataTypeSpecific.className = GPBStringifySymbol(BubbleChart_BubbleChartDetails),
        .number = BubbleChart_FieldNumber_Details,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BubbleChart__storage_, details),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BubbleChart class]
                                     rootClass:[BubblechartRoot class]
                                          file:BubblechartRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BubbleChart__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BubbleChart_BubbleChartDetails

@implementation BubbleChart_BubbleChartDetails

@dynamic seriesArray, seriesArray_Count;
@dynamic hasRepresentSize, representSize;
@dynamic hasScale, scale;
@dynamic hasShowNegative, showNegative;

typedef struct BubbleChart_BubbleChartDetails__storage_ {
  uint32_t _has_storage_[1];
  BubbleChart_BubbleChartDetails_RepresentBubbleSize representSize;
  float scale;
  NSMutableArray *seriesArray;
} BubbleChart_BubbleChartDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueMessage = nil,
        .core.name = "seriesArray",
        .core.dataTypeSpecific.className = GPBStringifySymbol(BubbleChart_BubbleChartDetails_BubbleChartSeries),
        .core.number = BubbleChart_BubbleChartDetails_FieldNumber_SeriesArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(BubbleChart_BubbleChartDetails__storage_, seriesArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = BubbleChart_BubbleChartDetails_RepresentBubbleSize_Area,
        .core.name = "representSize",
        .core.dataTypeSpecific.enumDescFunc = BubbleChart_BubbleChartDetails_RepresentBubbleSize_EnumDescriptor,
        .core.number = BubbleChart_BubbleChartDetails_FieldNumber_RepresentSize,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(BubbleChart_BubbleChartDetails__storage_, representSize),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueFloat = 0,
        .core.name = "scale",
        .core.dataTypeSpecific.className = NULL,
        .core.number = BubbleChart_BubbleChartDetails_FieldNumber_Scale,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(BubbleChart_BubbleChartDetails__storage_, scale),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeFloat,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "showNegative",
        .core.dataTypeSpecific.className = NULL,
        .core.number = BubbleChart_BubbleChartDetails_FieldNumber_ShowNegative,
        .core.hasIndex = 2,
        .core.offset = 3,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BubbleChart_BubbleChartDetails class]
                                     rootClass:[BubblechartRoot class]
                                          file:BubblechartRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(BubbleChart_BubbleChartDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\r\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(BubbleChart)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum BubbleChart_BubbleChartDetails_RepresentBubbleSize

GPBEnumDescriptor *BubbleChart_BubbleChartDetails_RepresentBubbleSize_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Width\000Area\000";
    static const int32_t values[] = {
        BubbleChart_BubbleChartDetails_RepresentBubbleSize_Width,
        BubbleChart_BubbleChartDetails_RepresentBubbleSize_Area,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BubbleChart_BubbleChartDetails_RepresentBubbleSize)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BubbleChart_BubbleChartDetails_RepresentBubbleSize_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BubbleChart_BubbleChartDetails_RepresentBubbleSize_IsValidValue(int32_t value__) {
  switch (value__) {
    case BubbleChart_BubbleChartDetails_RepresentBubbleSize_Width:
    case BubbleChart_BubbleChartDetails_RepresentBubbleSize_Area:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BubbleChart_BubbleChartDetails_BubbleChartSeries

@implementation BubbleChart_BubbleChartDetails_BubbleChartSeries

@dynamic hasDetails, details;

typedef struct BubbleChart_BubbleChartDetails_BubbleChartSeries__storage_ {
  uint32_t _has_storage_[1];
  SeriesDetails *details;
} BubbleChart_BubbleChartDetails_BubbleChartSeries__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "details",
        .dataTypeSpecific.className = GPBStringifySymbol(SeriesDetails),
        .number = BubbleChart_BubbleChartDetails_BubbleChartSeries_FieldNumber_Details,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BubbleChart_BubbleChartDetails_BubbleChartSeries__storage_, details),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BubbleChart_BubbleChartDetails_BubbleChartSeries class]
                                     rootClass:[BubblechartRoot class]
                                          file:BubblechartRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BubbleChart_BubbleChartDetails_BubbleChartSeries__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(BubbleChart_BubbleChartDetails)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
