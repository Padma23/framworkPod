// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/viewprops.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Viewprops.pbobjc.h"
 #import "Grids.pbobjc.h"
 #import "Guide.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ViewpropsRoot

@implementation ViewpropsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ViewpropsRoot_FileDescriptor

static GPBFileDescriptor *ViewpropsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ViewProps

@implementation ViewProps

@dynamic hasDisplay, display;
@dynamic hasSnapTo, snapTo;
@dynamic guidesArray, guidesArray_Count;
@dynamic hasGrids, grids;
@dynamic hasTransition, transition;
@dynamic hasAnimation, animation;

typedef struct ViewProps__storage_ {
  uint32_t _has_storage_[1];
  ViewProps_Preview transition;
  ViewProps_Preview animation;
  ViewProps_DisplaySettings *display;
  ViewProps_SnapTo *snapTo;
  NSMutableArray *guidesArray;
  Grids *grids;
} ViewProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "display",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProps_DisplaySettings),
        .number = ViewProps_FieldNumber_Display,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewProps__storage_, display),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snapTo",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProps_SnapTo),
        .number = ViewProps_FieldNumber_SnapTo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewProps__storage_, snapTo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "guidesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Guide),
        .number = ViewProps_FieldNumber_GuidesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewProps__storage_, guidesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "grids",
        .dataTypeSpecific.className = GPBStringifySymbol(Grids),
        .number = ViewProps_FieldNumber_Grids,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ViewProps__storage_, grids),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transition",
        .dataTypeSpecific.enumDescFunc = ViewProps_Preview_EnumDescriptor,
        .number = ViewProps_FieldNumber_Transition,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ViewProps__storage_, transition),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "animation",
        .dataTypeSpecific.enumDescFunc = ViewProps_Preview_EnumDescriptor,
        .number = ViewProps_FieldNumber_Animation,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ViewProps__storage_, animation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewProps class]
                                     rootClass:[ViewpropsRoot class]
                                          file:ViewpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\006\000\006I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ViewProps_Preview

GPBEnumDescriptor *ViewProps_Preview_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Play\000None\000";
    static const int32_t values[] = {
        ViewProps_Preview_Play,
        ViewProps_Preview_None,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ViewProps_Preview)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ViewProps_Preview_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ViewProps_Preview_IsValidValue(int32_t value__) {
  switch (value__) {
    case ViewProps_Preview_Play:
    case ViewProps_Preview_None:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ViewProps_DisplaySettings

@implementation ViewProps_DisplaySettings

@dynamic hasShowGrids, showGrids;
@dynamic hasShowGuides, showGuides;
@dynamic hasShowSmartGuides, showSmartGuides;

typedef struct ViewProps_DisplaySettings__storage_ {
  uint32_t _has_storage_[1];
} ViewProps_DisplaySettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueBool = NO,
        .core.name = "showGrids",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ViewProps_DisplaySettings_FieldNumber_ShowGrids,
        .core.hasIndex = 0,
        .core.offset = 1,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "showGuides",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ViewProps_DisplaySettings_FieldNumber_ShowGuides,
        .core.hasIndex = 2,
        .core.offset = 3,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "showSmartGuides",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ViewProps_DisplaySettings_FieldNumber_ShowSmartGuides,
        .core.hasIndex = 4,
        .core.offset = 5,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewProps_DisplaySettings class]
                                     rootClass:[ViewpropsRoot class]
                                          file:ViewpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ViewProps_DisplaySettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\n\000\003\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ViewProps)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewProps_SnapTo

@implementation ViewProps_SnapTo

@dynamic hasGuide, guide;
@dynamic hasObjects, objects;
@dynamic hasGrids, grids;

typedef struct ViewProps_SnapTo__storage_ {
  uint32_t _has_storage_[1];
} ViewProps_SnapTo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueBool = NO,
        .core.name = "guide",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ViewProps_SnapTo_FieldNumber_Guide,
        .core.hasIndex = 0,
        .core.offset = 1,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "objects",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ViewProps_SnapTo_FieldNumber_Objects,
        .core.hasIndex = 2,
        .core.offset = 3,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "grids",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ViewProps_SnapTo_FieldNumber_Grids,
        .core.hasIndex = 4,
        .core.offset = 5,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewProps_SnapTo class]
                                     rootClass:[ViewpropsRoot class]
                                          file:ViewpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ViewProps_SnapTo__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ViewProps)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
