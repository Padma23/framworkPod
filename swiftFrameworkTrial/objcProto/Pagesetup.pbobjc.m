// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pagesetup.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Pagesetup.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PagesetupRoot

@implementation PagesetupRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PagesetupRoot_FileDescriptor

static GPBFileDescriptor *PagesetupRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PageSetup

@implementation PageSetup

@dynamic hasScreenType, screenType;
@dynamic hasOrient, orient;
@dynamic hasSize, size;

typedef struct PageSetup__storage_ {
  uint32_t _has_storage_[1];
  PageSetup_ScreenType screenType;
  PageSetup_PageOrientation orient;
  PageSetup_PageSize *size;
} PageSetup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = PageSetup_ScreenType_FourByThree,
        .core.name = "screenType",
        .core.dataTypeSpecific.enumDescFunc = PageSetup_ScreenType_EnumDescriptor,
        .core.number = PageSetup_FieldNumber_ScreenType,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(PageSetup__storage_, screenType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = PageSetup_PageOrientation_Landscape,
        .core.name = "orient",
        .core.dataTypeSpecific.enumDescFunc = PageSetup_PageOrientation_EnumDescriptor,
        .core.number = PageSetup_FieldNumber_Orient,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(PageSetup__storage_, orient),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "size",
        .core.dataTypeSpecific.className = GPBStringifySymbol(PageSetup_PageSize),
        .core.number = PageSetup_FieldNumber_Size,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(PageSetup__storage_, size),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PageSetup class]
                                     rootClass:[PagesetupRoot class]
                                          file:PagesetupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(PageSetup__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PageSetup_ScreenType

GPBEnumDescriptor *PageSetup_ScreenType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "FourByThree\000SixteenByNine\000SixteenByTen\000C"
        "ustom\000";
    static const int32_t values[] = {
        PageSetup_ScreenType_FourByThree,
        PageSetup_ScreenType_SixteenByNine,
        PageSetup_ScreenType_SixteenByTen,
        PageSetup_ScreenType_Custom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PageSetup_ScreenType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PageSetup_ScreenType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PageSetup_ScreenType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PageSetup_ScreenType_FourByThree:
    case PageSetup_ScreenType_SixteenByNine:
    case PageSetup_ScreenType_SixteenByTen:
    case PageSetup_ScreenType_Custom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PageSetup_PageOrientation

GPBEnumDescriptor *PageSetup_PageOrientation_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Portrait\000Landscape\000";
    static const int32_t values[] = {
        PageSetup_PageOrientation_Portrait,
        PageSetup_PageOrientation_Landscape,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PageSetup_PageOrientation)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PageSetup_PageOrientation_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PageSetup_PageOrientation_IsValidValue(int32_t value__) {
  switch (value__) {
    case PageSetup_PageOrientation_Portrait:
    case PageSetup_PageOrientation_Landscape:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PageSetup_PageSize

@implementation PageSetup_PageSize

@dynamic hasWidth, width;
@dynamic hasHeight, height;

typedef struct PageSetup_PageSize__storage_ {
  uint32_t _has_storage_[1];
  float width;
  float height;
} PageSetup_PageSize__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = PageSetup_PageSize_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PageSetup_PageSize__storage_, width),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = PageSetup_PageSize_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PageSetup_PageSize__storage_, height),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PageSetup_PageSize class]
                                     rootClass:[PagesetupRoot class]
                                          file:PagesetupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PageSetup_PageSize__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PageSetup)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
