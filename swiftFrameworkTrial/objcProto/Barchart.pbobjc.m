// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: barchart.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Barchart.pbobjc.h"
 #import "Barchartdetails.pbobjc.h"
 #import "Chartline.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BarchartRoot

@implementation BarchartRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BarchartRoot_FileDescriptor

static GPBFileDescriptor *BarchartRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - BarChart

@implementation BarChart

@dynamic hasType, type;
@dynamic hasDetails, details;
@dynamic hasOverlap, overlap;
@dynamic seriesLinesArray, seriesLinesArray_Count;

typedef struct BarChart__storage_ {
  uint32_t _has_storage_[1];
  BarChart_BarType type;
  float overlap;
  BarChartDetails *details;
  NSMutableArray *seriesLinesArray;
} BarChart__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = BarChart_BarType_EnumDescriptor,
        .number = BarChart_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BarChart__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "details",
        .dataTypeSpecific.className = GPBStringifySymbol(BarChartDetails),
        .number = BarChart_FieldNumber_Details,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BarChart__storage_, details),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "overlap",
        .dataTypeSpecific.className = NULL,
        .number = BarChart_FieldNumber_Overlap,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BarChart__storage_, overlap),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "seriesLinesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartLine),
        .number = BarChart_FieldNumber_SeriesLinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BarChart__storage_, seriesLinesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BarChart class]
                                     rootClass:[BarchartRoot class]
                                          file:BarchartRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BarChart__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\000seriesLines\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum BarChart_BarType

GPBEnumDescriptor *BarChart_BarType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Bar\000Col\000";
    static const int32_t values[] = {
        BarChart_BarType_Bar,
        BarChart_BarType_Col,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BarChart_BarType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BarChart_BarType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BarChart_BarType_IsValidValue(int32_t value__) {
  switch (value__) {
    case BarChart_BarType_Bar:
    case BarChart_BarType_Col:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
