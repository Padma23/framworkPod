// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effects.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Effects.pbobjc.h"
 #import "Color.pbobjc.h"
 #import "Presetprops.pbobjc.h"
 #import "Scale.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EffectsRoot

@implementation EffectsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - EffectsRoot_FileDescriptor

static GPBFileDescriptor *EffectsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Effects

@implementation Effects

@dynamic hasReflection, reflection;
@dynamic hasShadow, shadow;

typedef struct Effects__storage_ {
  uint32_t _has_storage_[1];
  Effects_Reflection *reflection;
  Effects_Shadow *shadow;
} Effects__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reflection",
        .dataTypeSpecific.className = GPBStringifySymbol(Effects_Reflection),
        .number = Effects_FieldNumber_Reflection,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Effects__storage_, reflection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shadow",
        .dataTypeSpecific.className = GPBStringifySymbol(Effects_Shadow),
        .number = Effects_FieldNumber_Shadow,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Effects__storage_, shadow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Effects class]
                                     rootClass:[EffectsRoot class]
                                          file:EffectsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Effects__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Effects_Reflection

@implementation Effects_Reflection

@dynamic hasAlpha, alpha;
@dynamic hasPos, pos;
@dynamic hasDistance, distance;
@dynamic hasScale, scale;
@dynamic hasPreset, preset;

typedef struct Effects_Reflection__storage_ {
  uint32_t _has_storage_[1];
  PresetProps preset;
  Effects_Reflection_Range *alpha;
  Effects_Reflection_Range *pos;
  Effects_Distance *distance;
  Scale *scale;
} Effects_Reflection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueMessage = nil,
        .core.name = "alpha",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Effects_Reflection_Range),
        .core.number = Effects_Reflection_FieldNumber_Alpha,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(Effects_Reflection__storage_, alpha),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "pos",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Effects_Reflection_Range),
        .core.number = Effects_Reflection_FieldNumber_Pos,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(Effects_Reflection__storage_, pos),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "distance",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Effects_Distance),
        .core.number = Effects_Reflection_FieldNumber_Distance,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(Effects_Reflection__storage_, distance),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "scale",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Scale),
        .core.number = Effects_Reflection_FieldNumber_Scale,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(Effects_Reflection__storage_, scale),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = PresetProps_Preset1,
        .core.name = "preset",
        .core.dataTypeSpecific.enumDescFunc = PresetProps_EnumDescriptor,
        .core.number = Effects_Reflection_FieldNumber_Preset,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(Effects_Reflection__storage_, preset),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Effects_Reflection class]
                                     rootClass:[EffectsRoot class]
                                          file:EffectsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(Effects_Reflection__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Effects)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Effects_Reflection_Range

@implementation Effects_Reflection_Range

@dynamic hasSt, st;
@dynamic hasEnd, end;

typedef struct Effects_Reflection_Range__storage_ {
  uint32_t _has_storage_[1];
  float st;
  float end;
} Effects_Reflection_Range__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "st",
        .dataTypeSpecific.className = NULL,
        .number = Effects_Reflection_Range_FieldNumber_St,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Effects_Reflection_Range__storage_, st),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = NULL,
        .number = Effects_Reflection_Range_FieldNumber_End,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Effects_Reflection_Range__storage_, end),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Effects_Reflection_Range class]
                                     rootClass:[EffectsRoot class]
                                          file:EffectsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Effects_Reflection_Range__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Effects_Reflection)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Effects_Distance

@implementation Effects_Distance

@dynamic hasRadius, radius;
@dynamic hasAngle, angle;

typedef struct Effects_Distance__storage_ {
  uint32_t _has_storage_[1];
  float radius;
  float angle;
} Effects_Distance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "radius",
        .dataTypeSpecific.className = NULL,
        .number = Effects_Distance_FieldNumber_Radius,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Effects_Distance__storage_, radius),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "angle",
        .dataTypeSpecific.className = NULL,
        .number = Effects_Distance_FieldNumber_Angle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Effects_Distance__storage_, angle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Effects_Distance class]
                                     rootClass:[EffectsRoot class]
                                          file:EffectsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Effects_Distance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Effects)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Effects_Skew

@implementation Effects_Skew

@dynamic hasXAngle, xAngle;
@dynamic hasYAngle, yAngle;

typedef struct Effects_Skew__storage_ {
  uint32_t _has_storage_[1];
  float xAngle;
  float yAngle;
} Effects_Skew__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "xAngle",
        .dataTypeSpecific.className = NULL,
        .number = Effects_Skew_FieldNumber_XAngle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Effects_Skew__storage_, xAngle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "yAngle",
        .dataTypeSpecific.className = NULL,
        .number = Effects_Skew_FieldNumber_YAngle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Effects_Skew__storage_, yAngle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Effects_Skew class]
                                     rootClass:[EffectsRoot class]
                                          file:EffectsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Effects_Skew__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Effects)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Effects_Blur

@implementation Effects_Blur

@dynamic hasRadius, radius;

typedef struct Effects_Blur__storage_ {
  uint32_t _has_storage_[1];
  float radius;
} Effects_Blur__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "radius",
        .dataTypeSpecific.className = NULL,
        .number = Effects_Blur_FieldNumber_Radius,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Effects_Blur__storage_, radius),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Effects_Blur class]
                                     rootClass:[EffectsRoot class]
                                          file:EffectsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Effects_Blur__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Effects)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Effects_Shadow

@implementation Effects_Shadow

@dynamic hasType, type;
@dynamic hasColor, color;
@dynamic hasDistance, distance;
@dynamic hasScale, scale;
@dynamic hasPreset, preset;
@dynamic hasSkew, skew;
@dynamic hasBlur, blur;

typedef struct Effects_Shadow__storage_ {
  uint32_t _has_storage_[1];
  Effects_Shadow_ShadowType type;
  PresetProps preset;
  Color *color;
  Effects_Distance *distance;
  Scale *scale;
  Effects_Skew *skew;
  Effects_Blur *blur;
} Effects_Shadow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = Effects_Shadow_ShadowType_Inner,
        .core.name = "type",
        .core.dataTypeSpecific.enumDescFunc = Effects_Shadow_ShadowType_EnumDescriptor,
        .core.number = Effects_Shadow_FieldNumber_Type,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(Effects_Shadow__storage_, type),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "color",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Color),
        .core.number = Effects_Shadow_FieldNumber_Color,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(Effects_Shadow__storage_, color),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "distance",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Effects_Distance),
        .core.number = Effects_Shadow_FieldNumber_Distance,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(Effects_Shadow__storage_, distance),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "scale",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Scale),
        .core.number = Effects_Shadow_FieldNumber_Scale,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(Effects_Shadow__storage_, scale),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = PresetProps_Preset1,
        .core.name = "preset",
        .core.dataTypeSpecific.enumDescFunc = PresetProps_EnumDescriptor,
        .core.number = Effects_Shadow_FieldNumber_Preset,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(Effects_Shadow__storage_, preset),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "skew",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Effects_Skew),
        .core.number = Effects_Shadow_FieldNumber_Skew,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(Effects_Shadow__storage_, skew),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "blur",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Effects_Blur),
        .core.number = Effects_Shadow_FieldNumber_Blur,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(Effects_Shadow__storage_, blur),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Effects_Shadow class]
                                     rootClass:[EffectsRoot class]
                                          file:EffectsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(Effects_Shadow__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Effects)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Effects_Shadow_ShadowType

GPBEnumDescriptor *Effects_Shadow_ShadowType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Inner\000Outer\000";
    static const int32_t values[] = {
        Effects_Shadow_ShadowType_Inner,
        Effects_Shadow_ShadowType_Outer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Effects_Shadow_ShadowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Effects_Shadow_ShadowType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Effects_Shadow_ShadowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Effects_Shadow_ShadowType_Inner:
    case Effects_Shadow_ShadowType_Outer:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
