// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: portionprops.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Portionprops.pbobjc.h"
 #import "Fill.pbobjc.h"
 #import "Stroke.pbobjc.h"
 #import "Font.pbobjc.h"
 #import "Hyperlink.pbobjc.h"
 #import "Linetype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PortionpropsRoot

@implementation PortionpropsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PortionpropsRoot_FileDescriptor

static GPBFileDescriptor *PortionpropsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PortionProps

@implementation PortionProps

@dynamic hasFont, font;
@dynamic hasFill, fill;
@dynamic hasStroke, stroke;
@dynamic hasSize, size;
@dynamic hasBold, bold;
@dynamic hasItalic, italic;
@dynamic hasUnderline, underline;
@dynamic hasStrike, strike;
@dynamic hasBaseline, baseline;
@dynamic hasCap, cap;
@dynamic hasSpace, space;
@dynamic hasClick, click;
@dynamic hasHover, hover;
@dynamic hasFontweight, fontweight;
@dynamic hasChk, chk;

typedef struct PortionProps__storage_ {
  uint32_t _has_storage_[1];
  float size;
  LineType underline;
  LineType strike;
  float baseline;
  PortionProps_FontVariant cap;
  float space;
  PortionProps_FontWeight fontweight;
  Font *font;
  Fill *fill;
  Stroke *stroke;
  HyperLink *click;
  HyperLink *hover;
  PortionProps_ReviewCheck *chk;
} PortionProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "font",
        .dataTypeSpecific.className = GPBStringifySymbol(Font),
        .number = PortionProps_FieldNumber_Font,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PortionProps__storage_, font),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fill",
        .dataTypeSpecific.className = GPBStringifySymbol(Fill),
        .number = PortionProps_FieldNumber_Fill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PortionProps__storage_, fill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stroke",
        .dataTypeSpecific.className = GPBStringifySymbol(Stroke),
        .number = PortionProps_FieldNumber_Stroke,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PortionProps__storage_, stroke),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = PortionProps_FieldNumber_Size,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PortionProps__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "bold",
        .dataTypeSpecific.className = NULL,
        .number = PortionProps_FieldNumber_Bold,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "italic",
        .dataTypeSpecific.className = NULL,
        .number = PortionProps_FieldNumber_Italic,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "underline",
        .dataTypeSpecific.enumDescFunc = LineType_EnumDescriptor,
        .number = PortionProps_FieldNumber_Underline,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PortionProps__storage_, underline),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "strike",
        .dataTypeSpecific.enumDescFunc = LineType_EnumDescriptor,
        .number = PortionProps_FieldNumber_Strike,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PortionProps__storage_, strike),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "baseline",
        .dataTypeSpecific.className = NULL,
        .number = PortionProps_FieldNumber_Baseline,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PortionProps__storage_, baseline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "cap",
        .dataTypeSpecific.enumDescFunc = PortionProps_FontVariant_EnumDescriptor,
        .number = PortionProps_FieldNumber_Cap,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PortionProps__storage_, cap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "space",
        .dataTypeSpecific.className = NULL,
        .number = PortionProps_FieldNumber_Space,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PortionProps__storage_, space),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "click",
        .dataTypeSpecific.className = GPBStringifySymbol(HyperLink),
        .number = PortionProps_FieldNumber_Click,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PortionProps__storage_, click),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hover",
        .dataTypeSpecific.className = GPBStringifySymbol(HyperLink),
        .number = PortionProps_FieldNumber_Hover,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PortionProps__storage_, hover),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fontweight",
        .dataTypeSpecific.enumDescFunc = PortionProps_FontWeight_EnumDescriptor,
        .number = PortionProps_FieldNumber_Fontweight,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PortionProps__storage_, fontweight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chk",
        .dataTypeSpecific.className = GPBStringifySymbol(PortionProps_ReviewCheck),
        .number = PortionProps_FieldNumber_Chk,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PortionProps__storage_, chk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PortionProps class]
                                     rootClass:[PortionpropsRoot class]
                                          file:PortionpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PortionProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PortionProps_FontVariant

GPBEnumDescriptor *PortionProps_FontVariant_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Smallcaps\000Allcaps\000None\000Capitalize\000";
    static const int32_t values[] = {
        PortionProps_FontVariant_Smallcaps,
        PortionProps_FontVariant_Allcaps,
        PortionProps_FontVariant_None,
        PortionProps_FontVariant_Capitalize,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PortionProps_FontVariant)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PortionProps_FontVariant_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PortionProps_FontVariant_IsValidValue(int32_t value__) {
  switch (value__) {
    case PortionProps_FontVariant_Smallcaps:
    case PortionProps_FontVariant_Allcaps:
    case PortionProps_FontVariant_None:
    case PortionProps_FontVariant_Capitalize:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PortionProps_FontWeight

GPBEnumDescriptor *PortionProps_FontWeight_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Thin\000ExtraLight\000Light\000Normal\000Medium\000Demi"
        "Bold\000Bold\000Heavy\000Black\000";
    static const int32_t values[] = {
        PortionProps_FontWeight_Thin,
        PortionProps_FontWeight_ExtraLight,
        PortionProps_FontWeight_Light,
        PortionProps_FontWeight_Normal,
        PortionProps_FontWeight_Medium,
        PortionProps_FontWeight_DemiBold,
        PortionProps_FontWeight_Bold,
        PortionProps_FontWeight_Heavy,
        PortionProps_FontWeight_Black,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PortionProps_FontWeight)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PortionProps_FontWeight_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PortionProps_FontWeight_IsValidValue(int32_t value__) {
  switch (value__) {
    case PortionProps_FontWeight_Thin:
    case PortionProps_FontWeight_ExtraLight:
    case PortionProps_FontWeight_Light:
    case PortionProps_FontWeight_Normal:
    case PortionProps_FontWeight_Medium:
    case PortionProps_FontWeight_DemiBold:
    case PortionProps_FontWeight_Bold:
    case PortionProps_FontWeight_Heavy:
    case PortionProps_FontWeight_Black:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PortionProps_ReviewCheck

@implementation PortionProps_ReviewCheck

@dynamic hasState, state;
@dynamic hasLang, lang;

typedef struct PortionProps_ReviewCheck__storage_ {
  uint32_t _has_storage_[1];
  PortionProps_ReviewCheck_ReviewState state;
  NSString *lang;
} PortionProps_ReviewCheck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = PortionProps_ReviewCheck_ReviewState_EnumDescriptor,
        .number = PortionProps_ReviewCheck_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PortionProps_ReviewCheck__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "lang",
        .dataTypeSpecific.className = NULL,
        .number = PortionProps_ReviewCheck_FieldNumber_Lang,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PortionProps_ReviewCheck__storage_, lang),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PortionProps_ReviewCheck class]
                                     rootClass:[PortionpropsRoot class]
                                          file:PortionpropsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PortionProps_ReviewCheck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PortionProps)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PortionProps_ReviewCheck_ReviewState

GPBEnumDescriptor *PortionProps_ReviewCheck_ReviewState_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Error\000Processed\000Ignored\000";
    static const int32_t values[] = {
        PortionProps_ReviewCheck_ReviewState_Error,
        PortionProps_ReviewCheck_ReviewState_Processed,
        PortionProps_ReviewCheck_ReviewState_Ignored,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PortionProps_ReviewCheck_ReviewState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PortionProps_ReviewCheck_ReviewState_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PortionProps_ReviewCheck_ReviewState_IsValidValue(int32_t value__) {
  switch (value__) {
    case PortionProps_ReviewCheck_ReviewState_Error:
    case PortionProps_ReviewCheck_ReviewState_Processed:
    case PortionProps_ReviewCheck_ReviewState_Ignored:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
