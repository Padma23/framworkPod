// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: theme.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Theme.pbobjc.h"
 #import "Fontscheme.pbobjc.h"
 #import "Colorscheme.pbobjc.h"
 #import "Fillscheme.pbobjc.h"
 #import "Strokescheme.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ThemeRoot

@implementation ThemeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ThemeRoot_FileDescriptor

static GPBFileDescriptor *ThemeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Theme

@implementation Theme

@dynamic hasName, name;
@dynamic hasFontScheme, fontScheme;
@dynamic hasColorScheme, colorScheme;
@dynamic hasBgFillScheme, bgFillScheme;
@dynamic hasFillScheme, fillScheme;
@dynamic hasStrokeScheme, strokeScheme;
@dynamic hasThemeId, themeId;

typedef struct Theme__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  FontScheme *fontScheme;
  ColorScheme *colorScheme;
  FillScheme *bgFillScheme;
  FillScheme *fillScheme;
  StrokeScheme *strokeScheme;
  NSString *themeId;
} Theme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Theme_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Theme__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fontScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(FontScheme),
        .number = Theme_FieldNumber_FontScheme,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Theme__storage_, fontScheme),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "colorScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorScheme),
        .number = Theme_FieldNumber_ColorScheme,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Theme__storage_, colorScheme),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bgFillScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(FillScheme),
        .number = Theme_FieldNumber_BgFillScheme,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Theme__storage_, bgFillScheme),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fillScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(FillScheme),
        .number = Theme_FieldNumber_FillScheme,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Theme__storage_, fillScheme),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "strokeScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(StrokeScheme),
        .number = Theme_FieldNumber_StrokeScheme,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Theme__storage_, strokeScheme),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "themeId",
        .dataTypeSpecific.className = NULL,
        .number = Theme_FieldNumber_ThemeId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Theme__storage_, themeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Theme class]
                                     rootClass:[ThemeRoot class]
                                          file:ThemeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Theme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\n\000\003\013\000\004\014\000\005\n\000\006\014\000c\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
