// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/showcast.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Showcast.pbobjc.h"
 #import "Shape.pbobjc.h"
 #import "Shapeobject.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ShowcastRoot

@implementation ShowcastRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ShowcastRoot_FileDescriptor

static GPBFileDescriptor *ShowcastRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ShowCast

@implementation ShowCast

@dynamic hasResourceId, resourceId;
@dynamic handlesArray, handlesArray_Count;
@dynamic hasEndTime, endTime;

typedef struct ShowCast__storage_ {
  uint32_t _has_storage_[1];
  NSString *resourceId;
  NSMutableArray *handlesArray;
  int64_t endTime;
} ShowCast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resourceId",
        .dataTypeSpecific.className = NULL,
        .number = ShowCast_FieldNumber_ResourceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShowCast__storage_, resourceId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "handlesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShowCast_Handler),
        .number = ShowCast_FieldNumber_HandlesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ShowCast__storage_, handlesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = ShowCast_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShowCast__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowCast class]
                                     rootClass:[ShowcastRoot class]
                                          file:ShowcastRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShowCast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\tA\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShowCast_HandlerPoint

@implementation ShowCast_HandlerPoint

@dynamic hasSlideId, slideId;
@dynamic hasAnimId, animId;

typedef struct ShowCast_HandlerPoint__storage_ {
  uint32_t _has_storage_[1];
  NSString *slideId;
  NSString *animId;
} ShowCast_HandlerPoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "slideId",
        .dataTypeSpecific.className = NULL,
        .number = ShowCast_HandlerPoint_FieldNumber_SlideId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPoint__storage_, slideId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "animId",
        .dataTypeSpecific.className = NULL,
        .number = ShowCast_HandlerPoint_FieldNumber_AnimId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPoint__storage_, animId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowCast_HandlerPoint class]
                                     rootClass:[ShowcastRoot class]
                                          file:ShowcastRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShowCast_HandlerPoint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ShowCast)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShowCast_HandlerPointData

@implementation ShowCast_HandlerPointData

@dynamic hasType, type;
@dynamic hasMedia, media;
@dynamic hasText, text;

typedef struct ShowCast_HandlerPointData__storage_ {
  uint32_t _has_storage_[1];
  ShowCast_HandlerPointData_HandlerPointDataType type;
  ShowCast_HandlerPointData_MediaData *media;
  ShowCast_HandlerPointData_TextData *text;
} ShowCast_HandlerPointData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = ShowCast_HandlerPointData_HandlerPointDataType_Media,
        .core.name = "type",
        .core.dataTypeSpecific.enumDescFunc = ShowCast_HandlerPointData_HandlerPointDataType_EnumDescriptor,
        .core.number = ShowCast_HandlerPointData_FieldNumber_Type,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ShowCast_HandlerPointData__storage_, type),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "media",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ShowCast_HandlerPointData_MediaData),
        .core.number = ShowCast_HandlerPointData_FieldNumber_Media,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(ShowCast_HandlerPointData__storage_, media),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "text",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ShowCast_HandlerPointData_TextData),
        .core.number = ShowCast_HandlerPointData_FieldNumber_Text,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(ShowCast_HandlerPointData__storage_, text),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowCast_HandlerPointData class]
                                     rootClass:[ShowcastRoot class]
                                          file:ShowcastRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ShowCast_HandlerPointData__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ShowCast)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ShowCast_HandlerPointData_HandlerPointDataType

GPBEnumDescriptor *ShowCast_HandlerPointData_HandlerPointDataType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Media\000Text\000";
    static const int32_t values[] = {
        ShowCast_HandlerPointData_HandlerPointDataType_Media,
        ShowCast_HandlerPointData_HandlerPointDataType_Text,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ShowCast_HandlerPointData_HandlerPointDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ShowCast_HandlerPointData_HandlerPointDataType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ShowCast_HandlerPointData_HandlerPointDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ShowCast_HandlerPointData_HandlerPointDataType_Media:
    case ShowCast_HandlerPointData_HandlerPointDataType_Text:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ShowCast_HandlerPointData_MediaData

@implementation ShowCast_HandlerPointData_MediaData

@dynamic hasTime, time;
@dynamic scribbleArray, scribbleArray_Count;

typedef struct ShowCast_HandlerPointData_MediaData__storage_ {
  uint32_t _has_storage_[1];
  float time;
  NSMutableArray *scribbleArray;
} ShowCast_HandlerPointData_MediaData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = ShowCast_HandlerPointData_MediaData_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPointData_MediaData__storage_, time),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "scribbleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShowCast_HandlerPointData_ScribbleData),
        .number = ShowCast_HandlerPointData_MediaData_FieldNumber_ScribbleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPointData_MediaData__storage_, scribbleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowCast_HandlerPointData_MediaData class]
                                     rootClass:[ShowcastRoot class]
                                          file:ShowcastRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShowCast_HandlerPointData_MediaData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ShowCast_HandlerPointData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShowCast_HandlerPointData_ScribbleData

@implementation ShowCast_HandlerPointData_ScribbleData

@dynamic hasShape, shape;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;

typedef struct ShowCast_HandlerPointData_ScribbleData__storage_ {
  uint32_t _has_storage_[1];
  float startTime;
  float endTime;
  Shape *shape;
} ShowCast_HandlerPointData_ScribbleData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ShowCast_HandlerPointData_ScribbleData_FieldNumber_Shape,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPointData_ScribbleData__storage_, shape),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = ShowCast_HandlerPointData_ScribbleData_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPointData_ScribbleData__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = ShowCast_HandlerPointData_ScribbleData_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPointData_ScribbleData__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowCast_HandlerPointData_ScribbleData class]
                                     rootClass:[ShowcastRoot class]
                                          file:ShowcastRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShowCast_HandlerPointData_ScribbleData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\t\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ShowCast_HandlerPointData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShowCast_HandlerPointData_TextData

@implementation ShowCast_HandlerPointData_TextData

@dynamic objectsArray, objectsArray_Count;

typedef struct ShowCast_HandlerPointData_TextData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *objectsArray;
} ShowCast_HandlerPointData_TextData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "objectsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShapeObject),
        .number = ShowCast_HandlerPointData_TextData_FieldNumber_ObjectsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ShowCast_HandlerPointData_TextData__storage_, objectsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowCast_HandlerPointData_TextData class]
                                     rootClass:[ShowcastRoot class]
                                          file:ShowcastRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShowCast_HandlerPointData_TextData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ShowCast_HandlerPointData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShowCast_Handler

@implementation ShowCast_Handler

@dynamic hasHandle, handle;
@dynamic hasData_p, data_p;

typedef struct ShowCast_Handler__storage_ {
  uint32_t _has_storage_[1];
  ShowCast_HandlerPoint *handle;
  ShowCast_HandlerPointData *data_p;
} ShowCast_Handler__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .dataTypeSpecific.className = GPBStringifySymbol(ShowCast_HandlerPoint),
        .number = ShowCast_Handler_FieldNumber_Handle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShowCast_Handler__storage_, handle),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(ShowCast_HandlerPointData),
        .number = ShowCast_Handler_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShowCast_Handler__storage_, data_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowCast_Handler class]
                                     rootClass:[ShowcastRoot class]
                                          file:ShowcastRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShowCast_Handler__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ShowCast)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
