// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: color.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Color.pbobjc.h"
 #import "Colortweaks.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ColorRoot

@implementation ColorRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ColorRoot_FileDescriptor

static GPBFileDescriptor *ColorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Color

@implementation Color

@dynamic hasType, type;
@dynamic rgbArray, rgbArray_Count;
@dynamic hasTweaks, tweaks;

typedef struct Color__storage_ {
  uint32_t _has_storage_[1];
  Color_ColorReference type;
  GPBInt32Array *rgbArray;
  ColorTweaks *tweaks;
} Color__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = Color_ColorReference_Bg1,
        .core.name = "type",
        .core.dataTypeSpecific.enumDescFunc = Color_ColorReference_EnumDescriptor,
        .core.number = Color_FieldNumber_Type,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(Color__storage_, type),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "rgbArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Color_FieldNumber_RgbArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(Color__storage_, rgbArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "tweaks",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks),
        .core.number = Color_FieldNumber_Tweaks,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(Color__storage_, tweaks),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Color class]
                                     rootClass:[ColorRoot class]
                                          file:ColorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(Color__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Color_ColorReference

GPBEnumDescriptor *Color_ColorReference_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Holder\000Bg1\000Tx1\000Bg2\000Tx2\000A1\000A2\000A3\000A4\000A5\000A6"
        "\000Hlink\000Followhlink\000Custom\000Lt1\000Dk1\000";
    static const int32_t values[] = {
        Color_ColorReference_Holder,
        Color_ColorReference_Bg1,
        Color_ColorReference_Tx1,
        Color_ColorReference_Bg2,
        Color_ColorReference_Tx2,
        Color_ColorReference_A1,
        Color_ColorReference_A2,
        Color_ColorReference_A3,
        Color_ColorReference_A4,
        Color_ColorReference_A5,
        Color_ColorReference_A6,
        Color_ColorReference_Hlink,
        Color_ColorReference_Followhlink,
        Color_ColorReference_Custom,
        Color_ColorReference_Lt1,
        Color_ColorReference_Dk1,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Color_ColorReference)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Color_ColorReference_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Color_ColorReference_IsValidValue(int32_t value__) {
  switch (value__) {
    case Color_ColorReference_Holder:
    case Color_ColorReference_Bg1:
    case Color_ColorReference_Tx1:
    case Color_ColorReference_Bg2:
    case Color_ColorReference_Tx2:
    case Color_ColorReference_A1:
    case Color_ColorReference_A2:
    case Color_ColorReference_A3:
    case Color_ColorReference_A4:
    case Color_ColorReference_A5:
    case Color_ColorReference_A6:
    case Color_ColorReference_Hlink:
    case Color_ColorReference_Followhlink:
    case Color_ColorReference_Custom:
    case Color_ColorReference_Lt1:
    case Color_ColorReference_Dk1:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
