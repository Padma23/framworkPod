// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bar3dchart.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Bar3Dchart.pbobjc.h"
 #import "Barchartdetails.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - Bar3DchartRoot

@implementation Bar3DchartRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - Bar3DchartRoot_FileDescriptor

static GPBFileDescriptor *Bar3DchartRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Bar3DChart

@implementation Bar3DChart

@dynamic hasDetails, details;
@dynamic hasDepth, depth;
@dynamic hasShape, shape;

typedef struct Bar3DChart__storage_ {
  uint32_t _has_storage_[1];
  float depth;
  Bar3DChart_BarShapeType shape;
  BarChartDetails *details;
} Bar3DChart__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "details",
        .dataTypeSpecific.className = GPBStringifySymbol(BarChartDetails),
        .number = Bar3DChart_FieldNumber_Details,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Bar3DChart__storage_, details),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "depth",
        .dataTypeSpecific.className = NULL,
        .number = Bar3DChart_FieldNumber_Depth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Bar3DChart__storage_, depth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "shape",
        .dataTypeSpecific.enumDescFunc = Bar3DChart_BarShapeType_EnumDescriptor,
        .number = Bar3DChart_FieldNumber_Shape,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Bar3DChart__storage_, shape),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Bar3DChart class]
                                     rootClass:[Bar3DchartRoot class]
                                          file:Bar3DchartRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Bar3DChart__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Bar3DChart_BarShapeType

GPBEnumDescriptor *Bar3DChart_BarShapeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Box\000Cone\000Cylinder\000Pyramid\000";
    static const int32_t values[] = {
        Bar3DChart_BarShapeType_Box,
        Bar3DChart_BarShapeType_Cone,
        Bar3DChart_BarShapeType_Cylinder,
        Bar3DChart_BarShapeType_Pyramid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Bar3DChart_BarShapeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Bar3DChart_BarShapeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Bar3DChart_BarShapeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Bar3DChart_BarShapeType_Box:
    case Bar3DChart_BarShapeType_Cone:
    case Bar3DChart_BarShapeType_Cylinder:
    case Bar3DChart_BarShapeType_Pyramid:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
