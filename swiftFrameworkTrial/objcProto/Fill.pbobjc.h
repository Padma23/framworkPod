// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fill.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Color;
@class Fill_GradientFill;
@class Fill_GradientFill_GradientProperties;
@class Fill_GradientFill_Stop;
@class Fill_PictureFill;
@class Fill_PictureFill_PictureFillType;
@class Fill_PictureFill_PictureFillType_Tile;
@class Fill_SolidFill;
@class Offset;
@class PictureProperties;
@class PictureValue;
@class Scale;
GPB_ENUM_FWD_DECLARE(PresetProps);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Fill_FillType

typedef GPB_ENUM(Fill_FillType) {
  /** No fill */
  Fill_FillType_None = 1,

  /** Solid fill */
  Fill_FillType_Solid = 2,

  /** gradient fill */
  Fill_FillType_Gradient = 3,

  /** picture fill. */
  Fill_FillType_Pict = 4,

  /** Indicates Group Fill i.e. Fill is present in the parent group element. */
  Fill_FillType_Grp = 5,
};

GPBEnumDescriptor *Fill_FillType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Fill_FillType_IsValidValue(int32_t value);

#pragma mark - Enum Fill_GradientFill_GradientFillType

typedef GPB_ENUM(Fill_GradientFill_GradientFillType) {
  /** linear gradient fill */
  Fill_GradientFill_GradientFillType_Linear = 0,

  /** radial */
  Fill_GradientFill_GradientFillType_Radial = 1,

  /** rectangular */
  Fill_GradientFill_GradientFillType_Rectangular = 2,

  /** Path */
  Fill_GradientFill_GradientFillType_Path = 3,
};

GPBEnumDescriptor *Fill_GradientFill_GradientFillType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Fill_GradientFill_GradientFillType_IsValidValue(int32_t value);

#pragma mark - Enum Fill_PictureFill_PictureFillType_FillPictureAs

typedef GPB_ENUM(Fill_PictureFill_PictureFillType_FillPictureAs) {
  Fill_PictureFill_PictureFillType_FillPictureAs_Frame = 0,
  Fill_PictureFill_PictureFillType_FillPictureAs_Tile = 1,
};

GPBEnumDescriptor *Fill_PictureFill_PictureFillType_FillPictureAs_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Fill_PictureFill_PictureFillType_FillPictureAs_IsValidValue(int32_t value);

#pragma mark - FillRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface FillRoot : GPBRootObject
@end

#pragma mark - Fill

typedef GPB_ENUM(Fill_FieldNumber) {
  Fill_FieldNumber_Type = 1,
  Fill_FieldNumber_Solid = 2,
  Fill_FieldNumber_Gradient = 3,
  Fill_FieldNumber_Pict = 4,
  Fill_FieldNumber_Grp = 5,
  Fill_FieldNumber_Preset = 6,
};

@interface Fill : GPBMessage

/** type of fill */
@property(nonatomic, readwrite) Fill_FillType type;

@property(nonatomic, readwrite) BOOL hasType;
/** Solid fill */
@property(nonatomic, readwrite, strong, null_resettable) Fill_SolidFill *solid;
/** Test to see if @c solid has been set. */
@property(nonatomic, readwrite) BOOL hasSolid;

@property(nonatomic, readwrite, strong, null_resettable) Fill_GradientFill *gradient;
/** Test to see if @c gradient has been set. */
@property(nonatomic, readwrite) BOOL hasGradient;

/** Picture URL */
@property(nonatomic, readwrite, strong, null_resettable) Fill_PictureFill *pict;
/** Test to see if @c pict has been set. */
@property(nonatomic, readwrite) BOOL hasPict;

@property(nonatomic, readwrite) BOOL grp;

@property(nonatomic, readwrite) BOOL hasGrp;
/** Preset Fill ID */
@property(nonatomic, readwrite) enum PresetProps preset;

@property(nonatomic, readwrite) BOOL hasPreset;
@end

#pragma mark - Fill_SolidFill

typedef GPB_ENUM(Fill_SolidFill_FieldNumber) {
  Fill_SolidFill_FieldNumber_Color = 1,
};

@interface Fill_SolidFill : GPBMessage

/** color */
@property(nonatomic, readwrite, strong, null_resettable) Color *color;
/** Test to see if @c color has been set. */
@property(nonatomic, readwrite) BOOL hasColor;

@end

#pragma mark - Fill_GradientFill

typedef GPB_ENUM(Fill_GradientFill_FieldNumber) {
  Fill_GradientFill_FieldNumber_Type = 1,
  Fill_GradientFill_FieldNumber_Rotate = 2,
  Fill_GradientFill_FieldNumber_StopsArray = 3,
  Fill_GradientFill_FieldNumber_Radial = 4,
  Fill_GradientFill_FieldNumber_Rect = 5,
  Fill_GradientFill_FieldNumber_Linear = 6,
};

@interface Fill_GradientFill : GPBMessage

/** type of the gradient fill. */
@property(nonatomic, readwrite) Fill_GradientFill_GradientFillType type;

@property(nonatomic, readwrite) BOOL hasType;
/** Angle of the gradient fill , ranges from 0-360. */
@property(nonatomic, readwrite) int32_t rotate;

@property(nonatomic, readwrite) BOOL hasRotate;
/** Stops for the gradient. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Fill_GradientFill_Stop*> *stopsArray;
/** The number of items in @c stopsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stopsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) Fill_GradientFill_GradientProperties *radial;
/** Test to see if @c radial has been set. */
@property(nonatomic, readwrite) BOOL hasRadial;

@property(nonatomic, readwrite, strong, null_resettable) Fill_GradientFill_GradientProperties *rect;
/** Test to see if @c rect has been set. */
@property(nonatomic, readwrite) BOOL hasRect;

@property(nonatomic, readwrite, strong, null_resettable) Fill_GradientFill_GradientProperties *linear;
/** Test to see if @c linear has been set. */
@property(nonatomic, readwrite) BOOL hasLinear;

@end

#pragma mark - Fill_GradientFill_Stop

typedef GPB_ENUM(Fill_GradientFill_Stop_FieldNumber) {
  Fill_GradientFill_Stop_FieldNumber_Color = 1,
  Fill_GradientFill_Stop_FieldNumber_Position = 2,
};

@interface Fill_GradientFill_Stop : GPBMessage

/** color */
@property(nonatomic, readwrite, strong, null_resettable) Color *color;
/** Test to see if @c color has been set. */
@property(nonatomic, readwrite) BOOL hasColor;

/** stop offset, ranges from 0-1 */
@property(nonatomic, readwrite) float position;

@property(nonatomic, readwrite) BOOL hasPosition;
@end

#pragma mark - Fill_GradientFill_GradientProperties

typedef GPB_ENUM(Fill_GradientFill_GradientProperties_FieldNumber) {
  Fill_GradientFill_GradientProperties_FieldNumber_FillToRect = 1,
  Fill_GradientFill_GradientProperties_FieldNumber_TileRect = 2,
  Fill_GradientFill_GradientProperties_FieldNumber_Fliph = 3,
  Fill_GradientFill_GradientProperties_FieldNumber_Flipv = 4,
  Fill_GradientFill_GradientProperties_FieldNumber_CornerOffset = 5,
  Fill_GradientFill_GradientProperties_FieldNumber_Rotate = 6,
};

/**
 * These properties will be used by RADIAL and RECTANGULAR gradients.
 **/
@interface Fill_GradientFill_GradientProperties : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Offset *fillToRect;
/** Test to see if @c fillToRect has been set. */
@property(nonatomic, readwrite) BOOL hasFillToRect;

@property(nonatomic, readwrite, strong, null_resettable) Offset *tileRect;
/** Test to see if @c tileRect has been set. */
@property(nonatomic, readwrite) BOOL hasTileRect;

/** true , if flipped in horizontal axis. */
@property(nonatomic, readwrite) BOOL fliph;

@property(nonatomic, readwrite) BOOL hasFliph;
/** true , if flipped in vertical axis. */
@property(nonatomic, readwrite) BOOL flipv;

@property(nonatomic, readwrite) BOOL hasFlipv;
@property(nonatomic, readwrite, strong, null_resettable) Offset *cornerOffset;
/** Test to see if @c cornerOffset has been set. */
@property(nonatomic, readwrite) BOOL hasCornerOffset;

@property(nonatomic, readwrite) int32_t rotate;

@property(nonatomic, readwrite) BOOL hasRotate;
@end

#pragma mark - Fill_PictureFill

typedef GPB_ENUM(Fill_PictureFill_FieldNumber) {
  Fill_PictureFill_FieldNumber_Value = 1,
  Fill_PictureFill_FieldNumber_Props = 2,
  Fill_PictureFill_FieldNumber_Transparency = 3,
  Fill_PictureFill_FieldNumber_Type = 4,
};

@interface Fill_PictureFill : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PictureValue *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

/** Contains properties like Color-Correction , Transparency etc... */
@property(nonatomic, readwrite, strong, null_resettable) PictureProperties *props;
/** Test to see if @c props has been set. */
@property(nonatomic, readwrite) BOOL hasProps;

/**
 * This value has been moved to "pictureproperties.proto" as variable "alpha"
 * So that we shall use it both For Picture and PictureFill. We will not use this any further for rendering.
 **/
@property(nonatomic, readwrite) float transparency;

@property(nonatomic, readwrite) BOOL hasTransparency;
/** type of picture fill */
@property(nonatomic, readwrite, strong, null_resettable) Fill_PictureFill_PictureFillType *type;
/** Test to see if @c type has been set. */
@property(nonatomic, readwrite) BOOL hasType;

@end

#pragma mark - Fill_PictureFill_PictureFillType

typedef GPB_ENUM(Fill_PictureFill_PictureFillType_FieldNumber) {
  Fill_PictureFill_PictureFillType_FieldNumber_Type = 1,
  Fill_PictureFill_PictureFillType_FieldNumber_Frame = 2,
  Fill_PictureFill_PictureFillType_FieldNumber_Tile = 3,
};

@interface Fill_PictureFill_PictureFillType : GPBMessage

@property(nonatomic, readwrite) Fill_PictureFill_PictureFillType_FillPictureAs type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, strong, null_resettable) Offset *frame;
/** Test to see if @c frame has been set. */
@property(nonatomic, readwrite) BOOL hasFrame;

/** Tile properties. */
@property(nonatomic, readwrite, strong, null_resettable) Fill_PictureFill_PictureFillType_Tile *tile;
/** Test to see if @c tile has been set. */
@property(nonatomic, readwrite) BOOL hasTile;

@end

#pragma mark - Fill_PictureFill_PictureFillType_Tile

typedef GPB_ENUM(Fill_PictureFill_PictureFillType_Tile_FieldNumber) {
  Fill_PictureFill_PictureFillType_Tile_FieldNumber_OffsetX = 1,
  Fill_PictureFill_PictureFillType_Tile_FieldNumber_OffsetY = 2,
  Fill_PictureFill_PictureFillType_Tile_FieldNumber_Scale = 3,
};

@interface Fill_PictureFill_PictureFillType_Tile : GPBMessage

/** x offset in px. */
@property(nonatomic, readwrite) float offsetX;

@property(nonatomic, readwrite) BOOL hasOffsetX;
/** y offset in px. */
@property(nonatomic, readwrite) float offsetY;

@property(nonatomic, readwrite) BOOL hasOffsetY;
/** To scale the image. */
@property(nonatomic, readwrite, strong, null_resettable) Scale *scale;
/** Test to see if @c scale has been set. */
@property(nonatomic, readwrite) BOOL hasScale;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
