// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Animation.pbobjc.h"
 #import "Animationdata.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AnimationRoot

@implementation AnimationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AnimationRoot_FileDescriptor

static GPBFileDescriptor *AnimationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Animation

@implementation Animation

@dynamic hasObj, obj;
@dynamic hasData_p, data_p;
@dynamic hasShapeAnim, shapeAnim;

typedef struct Animation__storage_ {
  uint32_t _has_storage_[1];
  Animation_AnimationObject obj;
  AnimationData *data_p;
  Animation_ShapeAnimation *shapeAnim;
} Animation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "obj",
        .dataTypeSpecific.enumDescFunc = Animation_AnimationObject_EnumDescriptor,
        .number = Animation_FieldNumber_Obj,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Animation__storage_, obj),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationData),
        .number = Animation_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Animation__storage_, data_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shapeAnim",
        .dataTypeSpecific.className = GPBStringifySymbol(Animation_ShapeAnimation),
        .number = Animation_FieldNumber_ShapeAnim,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Animation__storage_, shapeAnim),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Animation class]
                                     rootClass:[AnimationRoot class]
                                          file:AnimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Animation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Animation_AnimationObject

GPBEnumDescriptor *Animation_AnimationObject_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Shape\000Chart\000";
    static const int32_t values[] = {
        Animation_AnimationObject_Shape,
        Animation_AnimationObject_Chart,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Animation_AnimationObject)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Animation_AnimationObject_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Animation_AnimationObject_IsValidValue(int32_t value__) {
  switch (value__) {
    case Animation_AnimationObject_Shape:
    case Animation_AnimationObject_Chart:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Animation_ShapeAnimation

@implementation Animation_ShapeAnimation

@dynamic hasText, text;
@dynamic hasAnimShape, animShape;

typedef struct Animation_ShapeAnimation__storage_ {
  uint32_t _has_storage_[1];
  Animation_ShapeAnimation_TextAnimation *text;
} Animation_ShapeAnimation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(Animation_ShapeAnimation_TextAnimation),
        .number = Animation_ShapeAnimation_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Animation_ShapeAnimation__storage_, text),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "animShape",
        .dataTypeSpecific.className = NULL,
        .number = Animation_ShapeAnimation_FieldNumber_AnimShape,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Animation_ShapeAnimation class]
                                     rootClass:[AnimationRoot class]
                                          file:AnimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Animation_ShapeAnimation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Animation)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Animation_ShapeAnimation_TextAnimation

@implementation Animation_ShapeAnimation_TextAnimation

@dynamic hasType, type;
@dynamic hasLevel, level;
@dynamic hasReverse, reverse;

typedef struct Animation_ShapeAnimation_TextAnimation__storage_ {
  uint32_t _has_storage_[1];
  Animation_ShapeAnimation_TextAnimation_TextAnimationType type;
  Animation_ShapeAnimation_TextAnimation_LevelAnimation *level;
} Animation_ShapeAnimation_TextAnimation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Animation_ShapeAnimation_TextAnimation_TextAnimationType_EnumDescriptor,
        .number = Animation_ShapeAnimation_TextAnimation_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Animation_ShapeAnimation_TextAnimation__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = GPBStringifySymbol(Animation_ShapeAnimation_TextAnimation_LevelAnimation),
        .number = Animation_ShapeAnimation_TextAnimation_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Animation_ShapeAnimation_TextAnimation__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reverse",
        .dataTypeSpecific.className = NULL,
        .number = Animation_ShapeAnimation_TextAnimation_FieldNumber_Reverse,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Animation_ShapeAnimation_TextAnimation class]
                                     rootClass:[AnimationRoot class]
                                          file:AnimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Animation_ShapeAnimation_TextAnimation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Animation_ShapeAnimation)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Animation_ShapeAnimation_TextAnimation_TextAnimationType

GPBEnumDescriptor *Animation_ShapeAnimation_TextAnimation_TextAnimationType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Box\000Para\000Level\000";
    static const int32_t values[] = {
        Animation_ShapeAnimation_TextAnimation_TextAnimationType_Box,
        Animation_ShapeAnimation_TextAnimation_TextAnimationType_Para,
        Animation_ShapeAnimation_TextAnimation_TextAnimationType_Level,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Animation_ShapeAnimation_TextAnimation_TextAnimationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Animation_ShapeAnimation_TextAnimation_TextAnimationType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Animation_ShapeAnimation_TextAnimation_TextAnimationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Animation_ShapeAnimation_TextAnimation_TextAnimationType_Box:
    case Animation_ShapeAnimation_TextAnimation_TextAnimationType_Para:
    case Animation_ShapeAnimation_TextAnimation_TextAnimationType_Level:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Animation_ShapeAnimation_TextAnimation_LevelAnimation

@implementation Animation_ShapeAnimation_TextAnimation_LevelAnimation

@dynamic hasNum, num;
@dynamic hasDelay, delay;

typedef struct Animation_ShapeAnimation_TextAnimation_LevelAnimation__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  float delay;
} Animation_ShapeAnimation_TextAnimation_LevelAnimation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = Animation_ShapeAnimation_TextAnimation_LevelAnimation_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Animation_ShapeAnimation_TextAnimation_LevelAnimation__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "delay",
        .dataTypeSpecific.className = NULL,
        .number = Animation_ShapeAnimation_TextAnimation_LevelAnimation_FieldNumber_Delay,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Animation_ShapeAnimation_TextAnimation_LevelAnimation__storage_, delay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Animation_ShapeAnimation_TextAnimation_LevelAnimation class]
                                     rootClass:[AnimationRoot class]
                                          file:AnimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Animation_ShapeAnimation_TextAnimation_LevelAnimation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Animation_ShapeAnimation_TextAnimation)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
