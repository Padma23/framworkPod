// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chartshape.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Chartshape.pbobjc.h"
 #import "Shape.pbobjc.h"
 #import "Manuallayout.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChartshapeRoot

@implementation ChartshapeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ChartshapeRoot_FileDescriptor

static GPBFileDescriptor *ChartshapeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ChartShape

@implementation ChartShape

@dynamic hasTitle, title;
@dynamic legendsArray, legendsArray_Count;
@dynamic hasPlotArea, plotArea;
@dynamic hasChartAreaBox, chartAreaBox;

typedef struct ChartShape__storage_ {
  uint32_t _has_storage_[1];
  Shape *title;
  NSMutableArray *legendsArray;
  ChartShape_PlotAreaShape *plotArea;
  ManualLayout *chartAreaBox;
} ChartShape__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChartShape__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "legendsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_FieldNumber_LegendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape__storage_, legendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plotArea",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartShape_PlotAreaShape),
        .number = ChartShape_FieldNumber_PlotArea,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChartShape__storage_, plotArea),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chartAreaBox",
        .dataTypeSpecific.className = GPBStringifySymbol(ManualLayout),
        .number = ChartShape_FieldNumber_ChartAreaBox,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChartShape__storage_, chartAreaBox),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartShape class]
                                     rootClass:[ChartshapeRoot class]
                                          file:ChartshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartShape__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\010\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChartShape_AxisShape

@implementation ChartShape_AxisShape

@dynamic hasAxis, axis;
@dynamic hasTitle, title;
@dynamic majorGridsArray, majorGridsArray_Count;
@dynamic minorGridsArray, minorGridsArray_Count;
@dynamic labelsArray, labelsArray_Count;

typedef struct ChartShape_AxisShape__storage_ {
  uint32_t _has_storage_[1];
  Shape *axis;
  Shape *title;
  NSMutableArray *majorGridsArray;
  NSMutableArray *minorGridsArray;
  NSMutableArray *labelsArray;
} ChartShape_AxisShape__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "axis",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_AxisShape_FieldNumber_Axis,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChartShape_AxisShape__storage_, axis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_AxisShape_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChartShape_AxisShape__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "majorGridsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_AxisShape_FieldNumber_MajorGridsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_AxisShape__storage_, majorGridsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "minorGridsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_AxisShape_FieldNumber_MinorGridsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_AxisShape__storage_, minorGridsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_AxisShape_FieldNumber_LabelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_AxisShape__storage_, labelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartShape_AxisShape class]
                                     rootClass:[ChartshapeRoot class]
                                          file:ChartshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartShape_AxisShape__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\000majorGrids\000\004\000minorGrids\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ChartShape)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChartShape_CategoryShape

@implementation ChartShape_CategoryShape

@dynamic seriesShapesArray, seriesShapesArray_Count;

typedef struct ChartShape_CategoryShape__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *seriesShapesArray;
} ChartShape_CategoryShape__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seriesShapesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartShape_CategoryShape_SeriesShape),
        .number = ChartShape_CategoryShape_FieldNumber_SeriesShapesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_CategoryShape__storage_, seriesShapesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartShape_CategoryShape class]
                                     rootClass:[ChartshapeRoot class]
                                          file:ChartshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartShape_CategoryShape__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000seriesShapes\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ChartShape)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChartShape_CategoryShape_SeriesShape

@implementation ChartShape_CategoryShape_SeriesShape

@dynamic hasShape, shape;
@dynamic hasLabel, label;

typedef struct ChartShape_CategoryShape_SeriesShape__storage_ {
  uint32_t _has_storage_[1];
  Shape *shape;
  Shape *label;
} ChartShape_CategoryShape_SeriesShape__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_CategoryShape_SeriesShape_FieldNumber_Shape,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChartShape_CategoryShape_SeriesShape__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_CategoryShape_SeriesShape_FieldNumber_Label,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChartShape_CategoryShape_SeriesShape__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartShape_CategoryShape_SeriesShape class]
                                     rootClass:[ChartshapeRoot class]
                                          file:ChartshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartShape_CategoryShape_SeriesShape__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ChartShape_CategoryShape)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChartShape_PlotAreaShape

@implementation ChartShape_PlotAreaShape

@dynamic hasHorizontal, horizontal;
@dynamic hasVertical, vertical;
@dynamic categoryShapesArray, categoryShapesArray_Count;
@dynamic seriesLinesArray, seriesLinesArray_Count;
@dynamic dropLinesArray, dropLinesArray_Count;
@dynamic upDownBarsArray, upDownBarsArray_Count;
@dynamic markersArray, markersArray_Count;

typedef struct ChartShape_PlotAreaShape__storage_ {
  uint32_t _has_storage_[1];
  ChartShape_AxisShape *horizontal;
  ChartShape_AxisShape *vertical;
  NSMutableArray *categoryShapesArray;
  NSMutableArray *seriesLinesArray;
  NSMutableArray *dropLinesArray;
  NSMutableArray *upDownBarsArray;
  NSMutableArray *markersArray;
} ChartShape_PlotAreaShape__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "horizontal",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartShape_AxisShape),
        .number = ChartShape_PlotAreaShape_FieldNumber_Horizontal,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChartShape_PlotAreaShape__storage_, horizontal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "vertical",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartShape_AxisShape),
        .number = ChartShape_PlotAreaShape_FieldNumber_Vertical,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChartShape_PlotAreaShape__storage_, vertical),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "categoryShapesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartShape_CategoryShape),
        .number = ChartShape_PlotAreaShape_FieldNumber_CategoryShapesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_PlotAreaShape__storage_, categoryShapesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seriesLinesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_PlotAreaShape_FieldNumber_SeriesLinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_PlotAreaShape__storage_, seriesLinesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dropLinesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_PlotAreaShape_FieldNumber_DropLinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_PlotAreaShape__storage_, dropLinesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "upDownBarsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_PlotAreaShape_FieldNumber_UpDownBarsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_PlotAreaShape__storage_, upDownBarsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "markersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Shape),
        .number = ChartShape_PlotAreaShape_FieldNumber_MarkersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartShape_PlotAreaShape__storage_, markersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartShape_PlotAreaShape class]
                                     rootClass:[ChartshapeRoot class]
                                          file:ChartshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartShape_PlotAreaShape__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\000categoryShapes\000\004\000seriesLines\000\005\000dropLi"
        "nes\000\006\000upDownBars\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ChartShape)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
