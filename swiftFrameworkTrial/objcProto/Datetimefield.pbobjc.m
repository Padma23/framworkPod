// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datetimefield.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Datetimefield.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DatetimefieldRoot

@implementation DatetimefieldRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum DateTimeField

GPBEnumDescriptor *DateTimeField_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Format1\000Format2\000Format3\000Format4\000Format5\000"
        "Format6\000Format7\000Format8\000Format9\000Format10"
        "\000Format11\000Format12\000Format13\000Format14\000For"
        "mat15\000";
    static const int32_t values[] = {
        DateTimeField_Format1,
        DateTimeField_Format2,
        DateTimeField_Format3,
        DateTimeField_Format4,
        DateTimeField_Format5,
        DateTimeField_Format6,
        DateTimeField_Format7,
        DateTimeField_Format8,
        DateTimeField_Format9,
        DateTimeField_Format10,
        DateTimeField_Format11,
        DateTimeField_Format12,
        DateTimeField_Format13,
        DateTimeField_Format14,
        DateTimeField_Format15,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DateTimeField)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DateTimeField_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DateTimeField_IsValidValue(int32_t value__) {
  switch (value__) {
    case DateTimeField_Format1:
    case DateTimeField_Format2:
    case DateTimeField_Format3:
    case DateTimeField_Format4:
    case DateTimeField_Format5:
    case DateTimeField_Format6:
    case DateTimeField_Format7:
    case DateTimeField_Format8:
    case DateTimeField_Format9:
    case DateTimeField_Format10:
    case DateTimeField_Format11:
    case DateTimeField_Format12:
    case DateTimeField_Format13:
    case DateTimeField_Format14:
    case DateTimeField_Format15:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
