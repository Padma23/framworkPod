// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphicframe.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Graphicframe.pbobjc.h"
 #import "Nonvisualdrawingprops.pbobjc.h"
 #import "Nonvisualprops.pbobjc.h"
 #import "Locks.pbobjc.h"
 #import "Transform.pbobjc.h"
 #import "Chart.pbobjc.h"
 #import "Table.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GraphicframeRoot

@implementation GraphicframeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GraphicframeRoot_FileDescriptor

static GPBFileDescriptor *GraphicframeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - GraphicFrame

@implementation GraphicFrame

@dynamic hasNvOprops, nvOprops;
@dynamic hasProps, props;
@dynamic hasObj, obj;

typedef struct GraphicFrame__storage_ {
  uint32_t _has_storage_[1];
  GraphicFrame_NonVisualGraphicFrameProps *nvOprops;
  GraphicFrame_GraphicFrameProps *props;
  GraphicFrame_GraphicObject *obj;
} GraphicFrame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nvOprops",
        .dataTypeSpecific.className = GPBStringifySymbol(GraphicFrame_NonVisualGraphicFrameProps),
        .number = GraphicFrame_FieldNumber_NvOprops,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GraphicFrame__storage_, nvOprops),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(GraphicFrame_GraphicFrameProps),
        .number = GraphicFrame_FieldNumber_Props,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GraphicFrame__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "obj",
        .dataTypeSpecific.className = GPBStringifySymbol(GraphicFrame_GraphicObject),
        .number = GraphicFrame_FieldNumber_Obj,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GraphicFrame__storage_, obj),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GraphicFrame class]
                                     rootClass:[GraphicframeRoot class]
                                          file:GraphicframeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GraphicFrame__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\003E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GraphicFrame_GraphicFrameProps

@implementation GraphicFrame_GraphicFrameProps

@dynamic hasTransform, transform;

typedef struct GraphicFrame_GraphicFrameProps__storage_ {
  uint32_t _has_storage_[1];
  Transform *transform;
} GraphicFrame_GraphicFrameProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transform",
        .dataTypeSpecific.className = GPBStringifySymbol(Transform),
        .number = GraphicFrame_GraphicFrameProps_FieldNumber_Transform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GraphicFrame_GraphicFrameProps__storage_, transform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GraphicFrame_GraphicFrameProps class]
                                     rootClass:[GraphicframeRoot class]
                                          file:GraphicframeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GraphicFrame_GraphicFrameProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GraphicFrame)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GraphicFrame_GraphicObject

@implementation GraphicFrame_GraphicObject

@dynamic hasType, type;
@dynamic hasTable, table;
@dynamic hasChart, chart;

typedef struct GraphicFrame_GraphicObject__storage_ {
  uint32_t _has_storage_[1];
  GraphicFrame_GraphicObject_GraphicObjectType type;
  Table *table;
  Chart *chart;
} GraphicFrame_GraphicObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GraphicFrame_GraphicObject_GraphicObjectType_EnumDescriptor,
        .number = GraphicFrame_GraphicObject_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GraphicFrame_GraphicObject__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "table",
        .dataTypeSpecific.className = GPBStringifySymbol(Table),
        .number = GraphicFrame_GraphicObject_FieldNumber_Table,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GraphicFrame_GraphicObject__storage_, table),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chart",
        .dataTypeSpecific.className = GPBStringifySymbol(Chart),
        .number = GraphicFrame_GraphicObject_FieldNumber_Chart,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GraphicFrame_GraphicObject__storage_, chart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GraphicFrame_GraphicObject class]
                                     rootClass:[GraphicframeRoot class]
                                          file:GraphicframeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GraphicFrame_GraphicObject__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GraphicFrame)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum GraphicFrame_GraphicObject_GraphicObjectType

GPBEnumDescriptor *GraphicFrame_GraphicObject_GraphicObjectType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Table\000Chart\000";
    static const int32_t values[] = {
        GraphicFrame_GraphicObject_GraphicObjectType_Table,
        GraphicFrame_GraphicObject_GraphicObjectType_Chart,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GraphicFrame_GraphicObject_GraphicObjectType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GraphicFrame_GraphicObject_GraphicObjectType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GraphicFrame_GraphicObject_GraphicObjectType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GraphicFrame_GraphicObject_GraphicObjectType_Table:
    case GraphicFrame_GraphicObject_GraphicObjectType_Chart:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GraphicFrame_NonVisualGraphicFrameProps

@implementation GraphicFrame_NonVisualGraphicFrameProps

@dynamic hasNvDprops, nvDprops;
@dynamic hasNvOdprops, nvOdprops;
@dynamic hasNvProps, nvProps;

typedef struct GraphicFrame_NonVisualGraphicFrameProps__storage_ {
  uint32_t _has_storage_[1];
  NonVisualDrawingProps *nvDprops;
  GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps *nvOdprops;
  NonVisualProps *nvProps;
} GraphicFrame_NonVisualGraphicFrameProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nvDprops",
        .dataTypeSpecific.className = GPBStringifySymbol(NonVisualDrawingProps),
        .number = GraphicFrame_NonVisualGraphicFrameProps_FieldNumber_NvDprops,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GraphicFrame_NonVisualGraphicFrameProps__storage_, nvDprops),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nvOdprops",
        .dataTypeSpecific.className = GPBStringifySymbol(GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps),
        .number = GraphicFrame_NonVisualGraphicFrameProps_FieldNumber_NvOdprops,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GraphicFrame_NonVisualGraphicFrameProps__storage_, nvOdprops),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nvProps",
        .dataTypeSpecific.className = GPBStringifySymbol(NonVisualProps),
        .number = GraphicFrame_NonVisualGraphicFrameProps_FieldNumber_NvProps,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GraphicFrame_NonVisualGraphicFrameProps__storage_, nvProps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GraphicFrame_NonVisualGraphicFrameProps class]
                                     rootClass:[GraphicframeRoot class]
                                          file:GraphicframeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GraphicFrame_NonVisualGraphicFrameProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\003E\000\002\003b\004\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GraphicFrame)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps

@implementation GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps

@dynamic hasLocks, locks;

typedef struct GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps__storage_ {
  uint32_t _has_storage_[1];
  Locks *locks;
} GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locks",
        .dataTypeSpecific.className = GPBStringifySymbol(Locks),
        .number = GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps_FieldNumber_Locks,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps__storage_, locks),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps class]
                                     rootClass:[GraphicframeRoot class]
                                          file:GraphicframeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GraphicFrame_NonVisualGraphicFrameProps_NonVisualGraphicFrameDrawingProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GraphicFrame_NonVisualGraphicFrameProps)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
