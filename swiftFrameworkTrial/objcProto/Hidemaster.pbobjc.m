// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hidemaster.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Hidemaster.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HidemasterRoot

@implementation HidemasterRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - HidemasterRoot_FileDescriptor

static GPBFileDescriptor *HidemasterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - HideMaster

@implementation HideMaster

@dynamic hasShapes, shapes;
@dynamic hasAnimation, animation;

typedef struct HideMaster__storage_ {
  uint32_t _has_storage_[1];
  HideMaster_HideElement animation;
} HideMaster__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueBool = NO,
        .core.name = "shapes",
        .core.dataTypeSpecific.className = NULL,
        .core.number = HideMaster_FieldNumber_Shapes,
        .core.hasIndex = 0,
        .core.offset = 1,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueEnum = HideMaster_HideElement_All,
        .core.name = "animation",
        .core.dataTypeSpecific.enumDescFunc = HideMaster_HideElement_EnumDescriptor,
        .core.number = HideMaster_FieldNumber_Animation,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(HideMaster__storage_, animation),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HideMaster class]
                                     rootClass:[HidemasterRoot class]
                                          file:HidemasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(HideMaster__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum HideMaster_HideElement

GPBEnumDescriptor *HideMaster_HideElement_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "All\000Placeholders\000Shapes\000";
    static const int32_t values[] = {
        HideMaster_HideElement_All,
        HideMaster_HideElement_Placeholders,
        HideMaster_HideElement_Shapes,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HideMaster_HideElement)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HideMaster_HideElement_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HideMaster_HideElement_IsValidValue(int32_t value__) {
  switch (value__) {
    case HideMaster_HideElement_All:
    case HideMaster_HideElement_Placeholders:
    case HideMaster_HideElement_Shapes:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
