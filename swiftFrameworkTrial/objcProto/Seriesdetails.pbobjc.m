// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seriesdetails.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Seriesdetails.pbobjc.h"
 #import "Category.pbobjc.h"
 #import "Seriestext.pbobjc.h"
 #import "Seriesvalue.pbobjc.h"
 #import "Properties.pbobjc.h"
 #import "Datalabels.pbobjc.h"
 #import "Datapoint.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SeriesdetailsRoot

@implementation SeriesdetailsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SeriesdetailsRoot_FileDescriptor

static GPBFileDescriptor *SeriesdetailsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - SeriesDetails

@implementation SeriesDetails

@dynamic hasTx, tx;
@dynamic hasCat, cat;
@dynamic hasVal, val;
@dynamic hasDataLabel, dataLabel;
@dynamic hasProps, props;
@dynamic dataPointArray, dataPointArray_Count;
@dynamic hasBubbleSize, bubbleSize;

typedef struct SeriesDetails__storage_ {
  uint32_t _has_storage_[1];
  SeriesText *tx;
  Category_Class *cat;
  SeriesValue *val;
  DataLabels *dataLabel;
  Properties *props;
  NSMutableArray *dataPointArray;
  SeriesValue *bubbleSize;
} SeriesDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tx",
        .dataTypeSpecific.className = GPBStringifySymbol(SeriesText),
        .number = SeriesDetails_FieldNumber_Tx,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SeriesDetails__storage_, tx),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cat",
        .dataTypeSpecific.className = GPBStringifySymbol(Category_Class),
        .number = SeriesDetails_FieldNumber_Cat,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SeriesDetails__storage_, cat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "val",
        .dataTypeSpecific.className = GPBStringifySymbol(SeriesValue),
        .number = SeriesDetails_FieldNumber_Val,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SeriesDetails__storage_, val),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataLabel",
        .dataTypeSpecific.className = GPBStringifySymbol(DataLabels),
        .number = SeriesDetails_FieldNumber_DataLabel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SeriesDetails__storage_, dataLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = SeriesDetails_FieldNumber_Props,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SeriesDetails__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataPointArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DataPoint),
        .number = SeriesDetails_FieldNumber_DataPointArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SeriesDetails__storage_, dataPointArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bubbleSize",
        .dataTypeSpecific.className = GPBStringifySymbol(SeriesValue),
        .number = SeriesDetails_FieldNumber_BubbleSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SeriesDetails__storage_, bubbleSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SeriesDetails class]
                                     rootClass:[SeriesdetailsRoot class]
                                          file:SeriesdetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SeriesDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\t\000\006\000dataPoint\000\007\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
