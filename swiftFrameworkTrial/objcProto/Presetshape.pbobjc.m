// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/presetshape.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Presetshape.pbobjc.h"
 #import "Colortweaks.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PresetshapeRoot

@implementation PresetshapeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PresetshapeRoot_FileDescriptor

static GPBFileDescriptor *PresetshapeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PresetShape

@implementation PresetShape

@dynamic hasName, name;
@dynamic modifiersArray, modifiersArray_Count;
@dynamic handlesArray, handlesArray_Count;
@dynamic pathListArray, pathListArray_Count;
@dynamic shadowArray, shadowArray_Count;

typedef struct PresetShape__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  GPBFloatArray *modifiersArray;
  NSMutableArray *handlesArray;
  NSMutableArray *pathListArray;
  GPBInt32Array *shadowArray;
} PresetShape__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresetShape__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifiersArray",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_FieldNumber_ModifiersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PresetShape__storage_, modifiersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "handlesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_HandleValue),
        .number = PresetShape_FieldNumber_HandlesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PresetShape__storage_, handlesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pathListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_PathList),
        .number = PresetShape_FieldNumber_PathListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PresetShape__storage_, pathListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shadowArray",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_FieldNumber_ShadowArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PresetShape__storage_, shadowArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresetShape class]
                                     rootClass:[PresetshapeRoot class]
                                          file:PresetshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresetShape__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\000pathList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PresetShape_HandleValue

@implementation PresetShape_HandleValue

@dynamic valuesArray, valuesArray_Count;

typedef struct PresetShape_HandleValue__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *valuesArray;
} PresetShape_HandleValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valuesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_HandleValue_Handle),
        .number = PresetShape_HandleValue_FieldNumber_ValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue__storage_, valuesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresetShape_HandleValue class]
                                     rootClass:[PresetshapeRoot class]
                                          file:PresetshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresetShape_HandleValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PresetShape)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PresetShape_HandleValue_Modifier

@implementation PresetShape_HandleValue_Modifier

@dynamic hasType, type;
@dynamic hasOrigin, origin;
@dynamic hasMultiplier, multiplier;

typedef struct PresetShape_HandleValue_Modifier__storage_ {
  uint32_t _has_storage_[1];
  PresetShape_HandleValue_Modifier_ModifierType type;
  PresetShape_HandleValue_Modifier_Origin origin;
  float multiplier;
} PresetShape_HandleValue_Modifier__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PresetShape_HandleValue_Modifier_ModifierType_EnumDescriptor,
        .number = PresetShape_HandleValue_Modifier_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Modifier__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "origin",
        .dataTypeSpecific.enumDescFunc = PresetShape_HandleValue_Modifier_Origin_EnumDescriptor,
        .number = PresetShape_HandleValue_Modifier_FieldNumber_Origin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Modifier__storage_, origin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "multiplier",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_HandleValue_Modifier_FieldNumber_Multiplier,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Modifier__storage_, multiplier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresetShape_HandleValue_Modifier class]
                                     rootClass:[PresetshapeRoot class]
                                          file:PresetshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresetShape_HandleValue_Modifier__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PresetShape_HandleValue)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PresetShape_HandleValue_Modifier_Origin

GPBEnumDescriptor *PresetShape_HandleValue_Modifier_Origin_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "End\000";
    static const int32_t values[] = {
        PresetShape_HandleValue_Modifier_Origin_End,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PresetShape_HandleValue_Modifier_Origin)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PresetShape_HandleValue_Modifier_Origin_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PresetShape_HandleValue_Modifier_Origin_IsValidValue(int32_t value__) {
  switch (value__) {
    case PresetShape_HandleValue_Modifier_Origin_End:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PresetShape_HandleValue_Modifier_ModifierType

GPBEnumDescriptor *PresetShape_HandleValue_Modifier_ModifierType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "X\000Y\000Angle\000Radius\000";
    static const int32_t values[] = {
        PresetShape_HandleValue_Modifier_ModifierType_X,
        PresetShape_HandleValue_Modifier_ModifierType_Y,
        PresetShape_HandleValue_Modifier_ModifierType_Angle,
        PresetShape_HandleValue_Modifier_ModifierType_Radius,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PresetShape_HandleValue_Modifier_ModifierType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PresetShape_HandleValue_Modifier_ModifierType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PresetShape_HandleValue_Modifier_ModifierType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PresetShape_HandleValue_Modifier_ModifierType_X:
    case PresetShape_HandleValue_Modifier_ModifierType_Y:
    case PresetShape_HandleValue_Modifier_ModifierType_Angle:
    case PresetShape_HandleValue_Modifier_ModifierType_Radius:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PresetShape_HandleValue_Handle

@implementation PresetShape_HandleValue_Handle

@dynamic hasNum, num;
@dynamic hasModifier, modifier;
@dynamic hasSsDependent, ssDependent;
@dynamic hasMax, max;
@dynamic hasMin, min;

typedef struct PresetShape_HandleValue_Handle__storage_ {
  uint32_t _has_storage_[1];
  int32_t num;
  PresetShape_HandleValue_Modifier *modifier;
  PresetShape_HandleValue_Handle_Limit *max;
  PresetShape_HandleValue_Handle_Limit *min;
} PresetShape_HandleValue_Handle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_HandleValue_Handle_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Handle__storage_, num),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "modifier",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_HandleValue_Modifier),
        .number = PresetShape_HandleValue_Handle_FieldNumber_Modifier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Handle__storage_, modifier),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ssDependent",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_HandleValue_Handle_FieldNumber_SsDependent,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_HandleValue_Handle_Limit),
        .number = PresetShape_HandleValue_Handle_FieldNumber_Max,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Handle__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "min",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_HandleValue_Handle_Limit),
        .number = PresetShape_HandleValue_Handle_FieldNumber_Min,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Handle__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresetShape_HandleValue_Handle class]
                                     rootClass:[PresetshapeRoot class]
                                          file:PresetshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresetShape_HandleValue_Handle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PresetShape_HandleValue)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PresetShape_HandleValue_Handle_Limit

@implementation PresetShape_HandleValue_Handle_Limit

@dynamic hasVal, val;
@dynamic hasCompute, compute;

typedef struct PresetShape_HandleValue_Handle_Limit__storage_ {
  uint32_t _has_storage_[1];
  float val;
} PresetShape_HandleValue_Handle_Limit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_HandleValue_Handle_Limit_FieldNumber_Val,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresetShape_HandleValue_Handle_Limit__storage_, val),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "compute",
        .dataTypeSpecific.className = NULL,
        .number = PresetShape_HandleValue_Handle_Limit_FieldNumber_Compute,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresetShape_HandleValue_Handle_Limit class]
                                     rootClass:[PresetshapeRoot class]
                                          file:PresetshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresetShape_HandleValue_Handle_Limit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PresetShape_HandleValue_Handle)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PresetShape_PathList

@implementation PresetShape_PathList

@dynamic hasFill, fill;
@dynamic hasStroke, stroke;

typedef struct PresetShape_PathList__storage_ {
  uint32_t _has_storage_[1];
  PresetShape_PathList_PathFill *fill;
  PresetShape_PathList_PathFill *stroke;
} PresetShape_PathList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fill",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_PathList_PathFill),
        .number = PresetShape_PathList_FieldNumber_Fill,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresetShape_PathList__storage_, fill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stroke",
        .dataTypeSpecific.className = GPBStringifySymbol(PresetShape_PathList_PathFill),
        .number = PresetShape_PathList_FieldNumber_Stroke,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PresetShape_PathList__storage_, stroke),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresetShape_PathList class]
                                     rootClass:[PresetshapeRoot class]
                                          file:PresetshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresetShape_PathList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PresetShape)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PresetShape_PathList_FillXMLType

GPBEnumDescriptor *PresetShape_PathList_FillXMLType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Normal\000";
    static const int32_t values[] = {
        PresetShape_PathList_FillXMLType_None,
        PresetShape_PathList_FillXMLType_Normal,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PresetShape_PathList_FillXMLType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PresetShape_PathList_FillXMLType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PresetShape_PathList_FillXMLType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PresetShape_PathList_FillXMLType_None:
    case PresetShape_PathList_FillXMLType_Normal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PresetShape_PathList_PathFill

@implementation PresetShape_PathList_PathFill

@dynamic hasFill, fill;
@dynamic hasTweaks, tweaks;

typedef struct PresetShape_PathList_PathFill__storage_ {
  uint32_t _has_storage_[1];
  PresetShape_PathList_FillXMLType fill;
  ColorTweaks *tweaks;
} PresetShape_PathList_PathFill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fill",
        .dataTypeSpecific.enumDescFunc = PresetShape_PathList_FillXMLType_EnumDescriptor,
        .number = PresetShape_PathList_PathFill_FieldNumber_Fill,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresetShape_PathList_PathFill__storage_, fill),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tweaks",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks),
        .number = PresetShape_PathList_PathFill_FieldNumber_Tweaks,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PresetShape_PathList_PathFill__storage_, tweaks),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresetShape_PathList_PathFill class]
                                     rootClass:[PresetshapeRoot class]
                                          file:PresetshapeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresetShape_PathList_PathFill__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PresetShape_PathList)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
