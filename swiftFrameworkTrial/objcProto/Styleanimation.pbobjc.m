// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: styleanimation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Styleanimation.pbobjc.h"
 #import "Fill.pbobjc.h"
 #import "Stroke.pbobjc.h"
 #import "Transform.pbobjc.h"
 #import "Effects.pbobjc.h"
 #import "Portionprops.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - StyleanimationRoot

@implementation StyleanimationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - StyleanimationRoot_FileDescriptor

static GPBFileDescriptor *StyleanimationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - StyleAnimation

@implementation StyleAnimation

@dynamic hasTransform, transform;
@dynamic hasFill, fill;
@dynamic hasStroke, stroke;
@dynamic hasEffects, effects;
@dynamic hasProps, props;
@dynamic hasType, type;
@dynamic valuesArray, valuesArray_Count;
@dynamic hasReturnToStart, returnToStart;
@dynamic orderArray, orderArray_Count;

typedef struct StyleAnimation__storage_ {
  uint32_t _has_storage_[1];
  StyleAnimation_StyleAnimationType type;
  Transform *transform;
  Fill *fill;
  Stroke *stroke;
  Effects *effects;
  PortionProps *props;
  NSMutableArray *valuesArray;
  GPBEnumArray *orderArray;
} StyleAnimation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transform",
        .dataTypeSpecific.className = GPBStringifySymbol(Transform),
        .number = StyleAnimation_FieldNumber_Transform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, transform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fill",
        .dataTypeSpecific.className = GPBStringifySymbol(Fill),
        .number = StyleAnimation_FieldNumber_Fill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, fill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stroke",
        .dataTypeSpecific.className = GPBStringifySymbol(Stroke),
        .number = StyleAnimation_FieldNumber_Stroke,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, stroke),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effects",
        .dataTypeSpecific.className = GPBStringifySymbol(Effects),
        .number = StyleAnimation_FieldNumber_Effects,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, effects),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(PortionProps),
        .number = StyleAnimation_FieldNumber_Props,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = StyleAnimation_StyleAnimationType_EnumDescriptor,
        .number = StyleAnimation_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "valuesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StyleAnimation_StyleAnimationValues),
        .number = StyleAnimation_FieldNumber_ValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, valuesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "returnToStart",
        .dataTypeSpecific.className = NULL,
        .number = StyleAnimation_FieldNumber_ReturnToStart,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "orderArray",
        .dataTypeSpecific.enumDescFunc = StyleAnimation_StyleAnimationProp_EnumDescriptor,
        .number = StyleAnimation_FieldNumber_OrderArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StyleAnimation__storage_, orderArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StyleAnimation class]
                                     rootClass:[StyleanimationRoot class]
                                          file:StyleanimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StyleAnimation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum StyleAnimation_StyleAnimationType

GPBEnumDescriptor *StyleAnimation_StyleAnimationType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Pulse\000Teeter\000Spin\000Grow\000Desaturate\000Lighte"
        "n\000Darken\000Transparency\000ObjectColor\000Comple"
        "mentaryColor\000ContrastColor\000FillColor\000Str"
        "okeColor\000Colorpulse\000Brush\000FontColor\000Unde"
        "rline\000BoldReveal\000BoldFlash\000GrowWithColor"
        "\000Flash\000Shake\000None\000";
    static const int32_t values[] = {
        StyleAnimation_StyleAnimationType_Pulse,
        StyleAnimation_StyleAnimationType_Teeter,
        StyleAnimation_StyleAnimationType_Spin,
        StyleAnimation_StyleAnimationType_Grow,
        StyleAnimation_StyleAnimationType_Desaturate,
        StyleAnimation_StyleAnimationType_Lighten,
        StyleAnimation_StyleAnimationType_Darken,
        StyleAnimation_StyleAnimationType_Transparency,
        StyleAnimation_StyleAnimationType_ObjectColor,
        StyleAnimation_StyleAnimationType_ComplementaryColor,
        StyleAnimation_StyleAnimationType_ContrastColor,
        StyleAnimation_StyleAnimationType_FillColor,
        StyleAnimation_StyleAnimationType_StrokeColor,
        StyleAnimation_StyleAnimationType_Colorpulse,
        StyleAnimation_StyleAnimationType_Brush,
        StyleAnimation_StyleAnimationType_FontColor,
        StyleAnimation_StyleAnimationType_Underline,
        StyleAnimation_StyleAnimationType_BoldReveal,
        StyleAnimation_StyleAnimationType_BoldFlash,
        StyleAnimation_StyleAnimationType_GrowWithColor,
        StyleAnimation_StyleAnimationType_Flash,
        StyleAnimation_StyleAnimationType_Shake,
        StyleAnimation_StyleAnimationType_None,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(StyleAnimation_StyleAnimationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:StyleAnimation_StyleAnimationType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL StyleAnimation_StyleAnimationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case StyleAnimation_StyleAnimationType_Pulse:
    case StyleAnimation_StyleAnimationType_Teeter:
    case StyleAnimation_StyleAnimationType_Spin:
    case StyleAnimation_StyleAnimationType_Grow:
    case StyleAnimation_StyleAnimationType_Desaturate:
    case StyleAnimation_StyleAnimationType_Lighten:
    case StyleAnimation_StyleAnimationType_Darken:
    case StyleAnimation_StyleAnimationType_Transparency:
    case StyleAnimation_StyleAnimationType_ObjectColor:
    case StyleAnimation_StyleAnimationType_ComplementaryColor:
    case StyleAnimation_StyleAnimationType_ContrastColor:
    case StyleAnimation_StyleAnimationType_FillColor:
    case StyleAnimation_StyleAnimationType_StrokeColor:
    case StyleAnimation_StyleAnimationType_Colorpulse:
    case StyleAnimation_StyleAnimationType_Brush:
    case StyleAnimation_StyleAnimationType_FontColor:
    case StyleAnimation_StyleAnimationType_Underline:
    case StyleAnimation_StyleAnimationType_BoldReveal:
    case StyleAnimation_StyleAnimationType_BoldFlash:
    case StyleAnimation_StyleAnimationType_GrowWithColor:
    case StyleAnimation_StyleAnimationType_Flash:
    case StyleAnimation_StyleAnimationType_Shake:
    case StyleAnimation_StyleAnimationType_None:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum StyleAnimation_StyleAnimationProp

GPBEnumDescriptor *StyleAnimation_StyleAnimationProp_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Transform\000Fill\000Stroke\000Effects\000Props\000";
    static const int32_t values[] = {
        StyleAnimation_StyleAnimationProp_Transform,
        StyleAnimation_StyleAnimationProp_Fill,
        StyleAnimation_StyleAnimationProp_Stroke,
        StyleAnimation_StyleAnimationProp_Effects,
        StyleAnimation_StyleAnimationProp_Props,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(StyleAnimation_StyleAnimationProp)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:StyleAnimation_StyleAnimationProp_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL StyleAnimation_StyleAnimationProp_IsValidValue(int32_t value__) {
  switch (value__) {
    case StyleAnimation_StyleAnimationProp_Transform:
    case StyleAnimation_StyleAnimationProp_Fill:
    case StyleAnimation_StyleAnimationProp_Stroke:
    case StyleAnimation_StyleAnimationProp_Effects:
    case StyleAnimation_StyleAnimationProp_Props:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StyleAnimation_StyleAnimationValues

@implementation StyleAnimation_StyleAnimationValues

@dynamic hasPropType, propType;
@dynamic hasConfig, config;

typedef struct StyleAnimation_StyleAnimationValues__storage_ {
  uint32_t _has_storage_[1];
  StyleAnimation_StyleAnimationProp propType;
  StyleAnimation_StyleAnimationValues_AnimationConfiguration *config;
} StyleAnimation_StyleAnimationValues__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "propType",
        .dataTypeSpecific.enumDescFunc = StyleAnimation_StyleAnimationProp_EnumDescriptor,
        .number = StyleAnimation_StyleAnimationValues_FieldNumber_PropType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues__storage_, propType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "config",
        .dataTypeSpecific.className = GPBStringifySymbol(StyleAnimation_StyleAnimationValues_AnimationConfiguration),
        .number = StyleAnimation_StyleAnimationValues_FieldNumber_Config,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StyleAnimation_StyleAnimationValues class]
                                     rootClass:[StyleanimationRoot class]
                                          file:StyleanimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StyleAnimation_StyleAnimationValues__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(StyleAnimation)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StyleAnimation_StyleAnimationValues_AnimationConfiguration

@implementation StyleAnimation_StyleAnimationValues_AnimationConfiguration

@dynamic hasCategory, category;
@dynamic hasCyclic, cyclic;
@dynamic hasGradual, gradual;

typedef struct StyleAnimation_StyleAnimationValues_AnimationConfiguration__storage_ {
  uint32_t _has_storage_[1];
  StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory category;
  StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual gradual;
  StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic *cyclic;
} StyleAnimation_StyleAnimationValues_AnimationConfiguration__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.enumDescFunc = StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_EnumDescriptor,
        .number = StyleAnimation_StyleAnimationValues_AnimationConfiguration_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues_AnimationConfiguration__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cyclic",
        .dataTypeSpecific.className = GPBStringifySymbol(StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic),
        .number = StyleAnimation_StyleAnimationValues_AnimationConfiguration_FieldNumber_Cyclic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues_AnimationConfiguration__storage_, cyclic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gradual",
        .dataTypeSpecific.enumDescFunc = StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_EnumDescriptor,
        .number = StyleAnimation_StyleAnimationValues_AnimationConfiguration_FieldNumber_Gradual,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues_AnimationConfiguration__storage_, gradual),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StyleAnimation_StyleAnimationValues_AnimationConfiguration class]
                                     rootClass:[StyleanimationRoot class]
                                          file:StyleanimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StyleAnimation_StyleAnimationValues_AnimationConfiguration__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(StyleAnimation_StyleAnimationValues)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory

GPBEnumDescriptor *StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Cyclic\000Gradual\000";
    static const int32_t values[] = {
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_Cyclic,
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_Gradual,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_IsValidValue(int32_t value__) {
  switch (value__) {
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_Cyclic:
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_StyleAnimationCategory_Gradual:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual

GPBEnumDescriptor *StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UntilProp\000UntilEnd\000PerLetter\000PerWord\000Per"
        "Line\000FullText\000";
    static const int32_t values[] = {
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_UntilProp,
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_UntilEnd,
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_PerLetter,
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_PerWord,
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_PerLine,
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_FullText,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_IsValidValue(int32_t value__) {
  switch (value__) {
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_UntilProp:
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_UntilEnd:
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_PerLetter:
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_PerWord:
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_PerLine:
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Gradual_FullText:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic

@implementation StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic

@dynamic hasCycle, cycle;
@dynamic hasDiff, diff;
@dynamic hasCategory, category;

typedef struct StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic__storage_ {
  uint32_t _has_storage_[1];
  int32_t cycle;
  float diff;
  StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory category;
} StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cycle",
        .dataTypeSpecific.className = NULL,
        .number = StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_FieldNumber_Cycle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic__storage_, cycle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "diff",
        .dataTypeSpecific.className = NULL,
        .number = StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_FieldNumber_Diff,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic__storage_, diff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "category",
        .dataTypeSpecific.enumDescFunc = StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_EnumDescriptor,
        .number = StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_FieldNumber_Category,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic class]
                                     rootClass:[StyleanimationRoot class]
                                          file:StyleanimationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(StyleAnimation_StyleAnimationValues_AnimationConfiguration)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory

GPBEnumDescriptor *StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Toggle\000PeakAndReturn\000";
    static const int32_t values[] = {
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_Toggle,
        StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_PeakAndReturn,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_IsValidValue(int32_t value__) {
  switch (value__) {
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_Toggle:
    case StyleAnimation_StyleAnimationValues_AnimationConfiguration_Cyclic_CyclicCategory_PeakAndReturn:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
