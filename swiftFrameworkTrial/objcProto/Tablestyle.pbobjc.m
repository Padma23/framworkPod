// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tablestyle.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Tablestyle.pbobjc.h"
 #import "Font.pbobjc.h"
 #import "Fontreference.pbobjc.h"
 #import "Tablecellstyle.pbobjc.h"
 #import "Fill.pbobjc.h"
 #import "Reference.pbobjc.h"
 #import "Effects.pbobjc.h"
 #import "Color.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TablestyleRoot

@implementation TablestyleRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TablestyleRoot_FileDescriptor

static GPBFileDescriptor *TablestyleRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - TableStyle

@implementation TableStyle

@dynamic hasId_p, id_p;
@dynamic hasName, name;
@dynamic hasTable, table;
@dynamic hasBand1H, band1H;
@dynamic hasBand1V, band1V;
@dynamic hasBand2H, band2H;
@dynamic hasBand2V, band2V;
@dynamic hasLastCol, lastCol;
@dynamic hasFirstCol, firstCol;
@dynamic hasLastRow, lastRow;
@dynamic hasFirstRow, firstRow;
@dynamic hasSeCell, seCell;
@dynamic hasSwCell, swCell;
@dynamic hasNeCell, neCell;
@dynamic hasNwCell, nwCell;
@dynamic hasBg, bg;

typedef struct TableStyle__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  TableStyle_TablePartStyle *table;
  TableStyle_TablePartStyle *band1H;
  TableStyle_TablePartStyle *band1V;
  TableStyle_TablePartStyle *band2H;
  TableStyle_TablePartStyle *band2V;
  TableStyle_TablePartStyle *lastCol;
  TableStyle_TablePartStyle *firstCol;
  TableStyle_TablePartStyle *lastRow;
  TableStyle_TablePartStyle *firstRow;
  TableStyle_TablePartStyle *seCell;
  TableStyle_TablePartStyle *swCell;
  TableStyle_TablePartStyle *neCell;
  TableStyle_TablePartStyle *nwCell;
  TableStyle_TableBackground *bg;
} TableStyle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TableStyle_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TableStyle__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = TableStyle_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TableStyle__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "table",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_Table,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TableStyle__storage_, table),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "band1H",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_Band1H,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TableStyle__storage_, band1H),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "band1V",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_Band1V,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TableStyle__storage_, band1V),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "band2H",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_Band2H,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TableStyle__storage_, band2H),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "band2V",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_Band2V,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TableStyle__storage_, band2V),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastCol",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_LastCol,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TableStyle__storage_, lastCol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstCol",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_FirstCol,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TableStyle__storage_, firstCol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastRow",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_LastRow,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TableStyle__storage_, lastRow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstRow",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_FirstRow,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TableStyle__storage_, firstRow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seCell",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_SeCell,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TableStyle__storage_, seCell),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "swCell",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_SwCell,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(TableStyle__storage_, swCell),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "neCell",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_NeCell,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(TableStyle__storage_, neCell),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nwCell",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TablePartStyle),
        .number = TableStyle_FieldNumber_NwCell,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(TableStyle__storage_, nwCell),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bg",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TableBackground),
        .number = TableStyle_FieldNumber_Bg,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(TableStyle__storage_, bg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TableStyle class]
                                     rootClass:[TablestyleRoot class]
                                          file:TablestyleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TableStyle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\004\006\000\005\006\000\006\006\000\007\006\000\010\007\000\t\010\000\n\007\000\013\010\000\014\006\000\r\006\000\016\006\000\017\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TableStyle_TableCellTextStyle

@implementation TableStyle_TableCellTextStyle

@dynamic hasFontRef, fontRef;
@dynamic hasFont, font;
@dynamic hasColor, color;
@dynamic hasBold, bold;
@dynamic hasItalic, italic;

typedef struct TableStyle_TableCellTextStyle__storage_ {
  uint32_t _has_storage_[1];
  FontReference *fontRef;
  Font *font;
  Color *color;
} TableStyle_TableCellTextStyle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fontRef",
        .dataTypeSpecific.className = GPBStringifySymbol(FontReference),
        .number = TableStyle_TableCellTextStyle_FieldNumber_FontRef,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TableStyle_TableCellTextStyle__storage_, fontRef),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "font",
        .dataTypeSpecific.className = GPBStringifySymbol(Font),
        .number = TableStyle_TableCellTextStyle_FieldNumber_Font,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TableStyle_TableCellTextStyle__storage_, font),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "color",
        .dataTypeSpecific.className = GPBStringifySymbol(Color),
        .number = TableStyle_TableCellTextStyle_FieldNumber_Color,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TableStyle_TableCellTextStyle__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bold",
        .dataTypeSpecific.className = NULL,
        .number = TableStyle_TableCellTextStyle_FieldNumber_Bold,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "italic",
        .dataTypeSpecific.className = NULL,
        .number = TableStyle_TableCellTextStyle_FieldNumber_Italic,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TableStyle_TableCellTextStyle class]
                                     rootClass:[TablestyleRoot class]
                                          file:TablestyleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TableStyle_TableCellTextStyle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TableStyle)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TableStyle_TablePartStyle

@implementation TableStyle_TablePartStyle

@dynamic hasCellStyle, cellStyle;
@dynamic hasCellTextStyle, cellTextStyle;

typedef struct TableStyle_TablePartStyle__storage_ {
  uint32_t _has_storage_[1];
  TableCellStyle *cellStyle;
  TableStyle_TableCellTextStyle *cellTextStyle;
} TableStyle_TablePartStyle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cellStyle",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellStyle),
        .number = TableStyle_TablePartStyle_FieldNumber_CellStyle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TableStyle_TablePartStyle__storage_, cellStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cellTextStyle",
        .dataTypeSpecific.className = GPBStringifySymbol(TableStyle_TableCellTextStyle),
        .number = TableStyle_TablePartStyle_FieldNumber_CellTextStyle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TableStyle_TablePartStyle__storage_, cellTextStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TableStyle_TablePartStyle class]
                                     rootClass:[TablestyleRoot class]
                                          file:TablestyleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TableStyle_TablePartStyle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TableStyle)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TableStyle_TableBackground

@implementation TableStyle_TableBackground

@dynamic hasFill, fill;
@dynamic hasFillRef, fillRef;
@dynamic hasEffects, effects;

typedef struct TableStyle_TableBackground__storage_ {
  uint32_t _has_storage_[1];
  Fill *fill;
  Reference *fillRef;
  Effects *effects;
} TableStyle_TableBackground__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fill",
        .dataTypeSpecific.className = GPBStringifySymbol(Fill),
        .number = TableStyle_TableBackground_FieldNumber_Fill,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TableStyle_TableBackground__storage_, fill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fillRef",
        .dataTypeSpecific.className = GPBStringifySymbol(Reference),
        .number = TableStyle_TableBackground_FieldNumber_FillRef,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TableStyle_TableBackground__storage_, fillRef),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effects",
        .dataTypeSpecific.className = GPBStringifySymbol(Effects),
        .number = TableStyle_TableBackground_FieldNumber_Effects,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TableStyle_TableBackground__storage_, effects),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TableStyle_TableBackground class]
                                     rootClass:[TablestyleRoot class]
                                          file:TablestyleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TableStyle_TableBackground__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TableStyle)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
