// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chartstyle.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Chartstyle.pbobjc.h"
 #import "Fill.pbobjc.h"
 #import "Stroke.pbobjc.h"
 #import "Font.pbobjc.h"
 #import "Themereference.pbobjc.h"
 #import "Portionprops.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChartstyleRoot

@implementation ChartstyleRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ChartstyleRoot_FileDescriptor

static GPBFileDescriptor *ChartstyleRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ChartStyle

@implementation ChartStyle

@dynamic hasAxis, axis;
@dynamic hasAxisTitle, axisTitle;
@dynamic hasChartArea, chartArea;
@dynamic hasChartTitle, chartTitle;
@dynamic hasDataLabels, dataLabels;
@dynamic hasDataTable, dataTable;
@dynamic hasDownBars, downBars;
@dynamic hasFloor, floor;
@dynamic hasLegend, legend;
@dynamic hasMajorGridlines, majorGridlines;
@dynamic hasMinorGridlines, minorGridlines;
@dynamic hasOtherLines, otherLines;
@dynamic hasPlotArea, plotArea;
@dynamic hasUpBars, upBars;
@dynamic hasWalls, walls;
@dynamic dataPointArray, dataPointArray_Count;
@dynamic dataPointLineArray, dataPointLineArray_Count;
@dynamic dataPointMarkerArray, dataPointMarkerArray_Count;
@dynamic categoryAxisArray, categoryAxisArray_Count;
@dynamic valueAxisArray, valueAxisArray_Count;
@dynamic seriesAxisArray, seriesAxisArray_Count;
@dynamic dateAxisArray, dateAxisArray_Count;
@dynamic dropLinesArray, dropLinesArray_Count;
@dynamic hiLowLineArray, hiLowLineArray_Count;
@dynamic leaderLineArray, leaderLineArray_Count;

typedef struct ChartStyle__storage_ {
  uint32_t _has_storage_[1];
  ChartStyle_StyleData *axis;
  ChartStyle_StyleData *axisTitle;
  ChartStyle_StyleData *chartArea;
  ChartStyle_StyleData *chartTitle;
  ChartStyle_StyleData *dataLabels;
  ChartStyle_StyleData *dataTable;
  ChartStyle_StyleData *downBars;
  ChartStyle_StyleData *floor;
  ChartStyle_StyleData *legend;
  ChartStyle_StyleData *majorGridlines;
  ChartStyle_StyleData *minorGridlines;
  ChartStyle_StyleData *otherLines;
  ChartStyle_StyleData *plotArea;
  ChartStyle_StyleData *upBars;
  ChartStyle_StyleData *walls;
  NSMutableArray *dataPointArray;
  NSMutableArray *dataPointLineArray;
  NSMutableArray *dataPointMarkerArray;
  NSMutableArray *categoryAxisArray;
  NSMutableArray *valueAxisArray;
  NSMutableArray *seriesAxisArray;
  NSMutableArray *dateAxisArray;
  NSMutableArray *dropLinesArray;
  NSMutableArray *hiLowLineArray;
  NSMutableArray *leaderLineArray;
} ChartStyle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "axis",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_Axis,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, axis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "axisTitle",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_AxisTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, axisTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chartArea",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_ChartArea,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, chartArea),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chartTitle",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_ChartTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, chartTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataLabels",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DataLabels,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, dataLabels),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataTable",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DataTable,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, dataTable),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "downBars",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DownBars,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, downBars),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "floor",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_Floor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, floor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "legend",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_Legend,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, legend),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "majorGridlines",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_MajorGridlines,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, majorGridlines),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "minorGridlines",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_MinorGridlines,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, minorGridlines),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "otherLines",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_OtherLines,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, otherLines),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plotArea",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_PlotArea,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, plotArea),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "upBars",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_UpBars,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, upBars),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "walls",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_Walls,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, walls),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataPointArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DataPointArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, dataPointArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataPointLineArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DataPointLineArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, dataPointLineArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataPointMarkerArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DataPointMarkerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, dataPointMarkerArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "categoryAxisArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_CategoryAxisArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, categoryAxisArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "valueAxisArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_ValueAxisArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, valueAxisArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seriesAxisArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_SeriesAxisArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, seriesAxisArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dateAxisArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DateAxisArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, dateAxisArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dropLinesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_DropLinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, dropLinesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hiLowLineArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_HiLowLineArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, hiLowLineArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "leaderLineArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartStyle_StyleData),
        .number = ChartStyle_FieldNumber_LeaderLineArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChartStyle__storage_, leaderLineArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartStyle class]
                                     rootClass:[ChartstyleRoot class]
                                          file:ChartstyleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartStyle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\025\002\t\000\003\t\000\004\n\000\005\n\000\006\t\000\007\010\000\n\016\000\013\016\000\014\n\000\r\010\000\016\006\000\020\000data"
        "Point\000\021\000dataPointLine\000\022\000dataPointMarker\000"
        "\023\000categoryAxis\000\024\000valueAxis\000\025\000seriesAxis\000"
        "\026\000dateAxis\000\027\000dropLines\000\030\000hiLowLine\000\031\000lea"
        "derLine\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChartStyle_StyleData

@implementation ChartStyle_StyleData

@dynamic hasThemeRef, themeRef;
@dynamic hasFill, fill;
@dynamic hasStroke, stroke;
@dynamic hasFillPattern, fillPattern;
@dynamic hasStrokePatern, strokePatern;
@dynamic hasDefPrProps, defPrProps;

typedef struct ChartStyle_StyleData__storage_ {
  uint32_t _has_storage_[1];
  ChartStyle_StyleData_PatternType fillPattern;
  ChartStyle_StyleData_PatternType strokePatern;
  ThemeReference *themeRef;
  Fill *fill;
  Stroke *stroke;
  PortionProps *defPrProps;
} ChartStyle_StyleData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "themeRef",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeReference),
        .number = ChartStyle_StyleData_FieldNumber_ThemeRef,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChartStyle_StyleData__storage_, themeRef),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fill",
        .dataTypeSpecific.className = GPBStringifySymbol(Fill),
        .number = ChartStyle_StyleData_FieldNumber_Fill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChartStyle_StyleData__storage_, fill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stroke",
        .dataTypeSpecific.className = GPBStringifySymbol(Stroke),
        .number = ChartStyle_StyleData_FieldNumber_Stroke,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChartStyle_StyleData__storage_, stroke),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fillPattern",
        .dataTypeSpecific.enumDescFunc = ChartStyle_StyleData_PatternType_EnumDescriptor,
        .number = ChartStyle_StyleData_FieldNumber_FillPattern,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChartStyle_StyleData__storage_, fillPattern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "strokePatern",
        .dataTypeSpecific.enumDescFunc = ChartStyle_StyleData_PatternType_EnumDescriptor,
        .number = ChartStyle_StyleData_FieldNumber_StrokePatern,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChartStyle_StyleData__storage_, strokePatern),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "defPrProps",
        .dataTypeSpecific.className = GPBStringifySymbol(PortionProps),
        .number = ChartStyle_StyleData_FieldNumber_DefPrProps,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChartStyle_StyleData__storage_, defPrProps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartStyle_StyleData class]
                                     rootClass:[ChartstyleRoot class]
                                          file:ChartstyleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartStyle_StyleData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\010\000\004\013\000\005\014\000\006\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ChartStyle)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ChartStyle_StyleData_PatternType

GPBEnumDescriptor *ChartStyle_StyleData_PatternType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Fade\000";
    static const int32_t values[] = {
        ChartStyle_StyleData_PatternType_None,
        ChartStyle_StyleData_PatternType_Fade,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChartStyle_StyleData_PatternType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChartStyle_StyleData_PatternType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChartStyle_StyleData_PatternType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChartStyle_StyleData_PatternType_None:
    case ChartStyle_StyleData_PatternType_Fade:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
