// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tablecellborders.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Tablecellborders.pbobjc.h"
 #import "Stroke.pbobjc.h"
 #import "Reference.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TablecellbordersRoot

@implementation TablecellbordersRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TablecellbordersRoot_FileDescriptor

static GPBFileDescriptor *TablecellbordersRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - TableCellBorders

@implementation TableCellBorders

@dynamic hasLeft, left;
@dynamic hasTop, top;
@dynamic hasRight, right;
@dynamic hasBottom, bottom;
@dynamic hasBlToTr, blToTr;
@dynamic hasTlToBr, tlToBr;
@dynamic hasInHor, inHor;
@dynamic hasInVer, inVer;

typedef struct TableCellBorders__storage_ {
  uint32_t _has_storage_[1];
  TableCellBorders_CellBorder *left;
  TableCellBorders_CellBorder *top;
  TableCellBorders_CellBorder *right;
  TableCellBorders_CellBorder *bottom;
  TableCellBorders_CellBorder *blToTr;
  TableCellBorders_CellBorder *tlToBr;
  TableCellBorders_CellBorder *inHor;
  TableCellBorders_CellBorder *inVer;
} TableCellBorders__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "left",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_Left,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, left),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "top",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_Top,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, top),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "right",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_Right,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, right),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bottom",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_Bottom,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, bottom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blToTr",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_BlToTr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, blToTr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tlToBr",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_TlToBr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, tlToBr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inHor",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_InHor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, inHor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inVer",
        .dataTypeSpecific.className = GPBStringifySymbol(TableCellBorders_CellBorder),
        .number = TableCellBorders_FieldNumber_InVer,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TableCellBorders__storage_, inVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TableCellBorders class]
                                     rootClass:[TablecellbordersRoot class]
                                          file:TablecellbordersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TableCellBorders__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\005\006\000\006\006\000\007\005\000\010\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TableCellBorders_CellBorder

@implementation TableCellBorders_CellBorder

@dynamic hasBorder, border;
@dynamic hasRef, ref;

typedef struct TableCellBorders_CellBorder__storage_ {
  uint32_t _has_storage_[1];
  Stroke *border;
  Reference *ref;
} TableCellBorders_CellBorder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "border",
        .dataTypeSpecific.className = GPBStringifySymbol(Stroke),
        .number = TableCellBorders_CellBorder_FieldNumber_Border,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TableCellBorders_CellBorder__storage_, border),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ref",
        .dataTypeSpecific.className = GPBStringifySymbol(Reference),
        .number = TableCellBorders_CellBorder_FieldNumber_Ref,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TableCellBorders_CellBorder__storage_, ref),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TableCellBorders_CellBorder class]
                                     rootClass:[TablecellbordersRoot class]
                                          file:TablecellbordersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TableCellBorders_CellBorder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TableCellBorders)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
