// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plotarea.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Plotarea.pbobjc.h"
 #import "Properties.pbobjc.h"
 #import "Textbody.pbobjc.h"
 #import "Manuallayout.pbobjc.h"
 #import "Chartaxis.pbobjc.h"
 #import "Datalabels.pbobjc.h"
 #import "Barchart.pbobjc.h"
 #import "Bar3Dchart.pbobjc.h"
 #import "Linechart.pbobjc.h"
 #import "Line3Dchart.pbobjc.h"
 #import "Areachart.pbobjc.h"
 #import "Piechart.pbobjc.h"
 #import "Pie3Dchart.pbobjc.h"
 #import "Representivepiechart.pbobjc.h"
 #import "Doughnutchart.pbobjc.h"
 #import "Scatterchart.pbobjc.h"
 #import "Bubblechart.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PlotareaRoot

@implementation PlotareaRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PlotareaRoot_FileDescriptor

static GPBFileDescriptor *PlotareaRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PlotArea

@implementation PlotArea

@dynamic chartArray, chartArray_Count;
@dynamic axisArray, axisArray_Count;
@dynamic hasLayout, layout;
@dynamic hasDataTable, dataTable;
@dynamic hasProps, props;

typedef struct PlotArea__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chartArray;
  NSMutableArray *axisArray;
  ManualLayout *layout;
  PlotArea_DataTable *dataTable;
  Properties *props;
} PlotArea__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chartArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PlotArea_ChartDetails),
        .number = PlotArea_FieldNumber_ChartArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlotArea__storage_, chartArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "axisArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartAxis),
        .number = PlotArea_FieldNumber_AxisArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlotArea__storage_, axisArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "layout",
        .dataTypeSpecific.className = GPBStringifySymbol(ManualLayout),
        .number = PlotArea_FieldNumber_Layout,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlotArea__storage_, layout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataTable",
        .dataTypeSpecific.className = GPBStringifySymbol(PlotArea_DataTable),
        .number = PlotArea_FieldNumber_DataTable,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlotArea__storage_, dataTable),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = PlotArea_FieldNumber_Props,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PlotArea__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlotArea class]
                                     rootClass:[PlotareaRoot class]
                                          file:PlotareaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlotArea__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlotArea_ChartDetails

@implementation PlotArea_ChartDetails

@dynamic hasType, type;
@dynamic axisIdArray, axisIdArray_Count;
@dynamic hasVaryColors, varyColors;
@dynamic hasDataLabel, dataLabel;
@dynamic hasGrouping, grouping;
@dynamic hasBar, bar;
@dynamic hasBar3D, bar3D;
@dynamic hasLine, line;
@dynamic hasLine3D, line3D;
@dynamic hasArea, area;
@dynamic hasPie, pie;
@dynamic hasPie3D, pie3D;
@dynamic hasReppie, reppie;
@dynamic hasDoughnut, doughnut;
@dynamic hasScatter, scatter;
@dynamic hasBubble, bubble;

typedef struct PlotArea_ChartDetails__storage_ {
  uint32_t _has_storage_[1];
  PlotArea_ChartDetails_ChartType type;
  PlotArea_ChartDetails_Grouping grouping;
  NSMutableArray *axisIdArray;
  DataLabels *dataLabel;
  BarChart *bar;
  Bar3DChart *bar3D;
  LineChart *line;
  Line3DChart *line3D;
  AreaChart *area;
  PieChart *pie;
  Pie3DChart *pie3D;
  RepresentivePieChart *reppie;
  DoughnutChart *doughnut;
  ScatterChart *scatter;
  BubbleChart *bubble;
} PlotArea_ChartDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PlotArea_ChartDetails_ChartType_EnumDescriptor,
        .number = PlotArea_ChartDetails_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "axisIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PlotArea_ChartDetails_FieldNumber_AxisIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, axisIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "varyColors",
        .dataTypeSpecific.className = NULL,
        .number = PlotArea_ChartDetails_FieldNumber_VaryColors,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dataLabel",
        .dataTypeSpecific.className = GPBStringifySymbol(DataLabels),
        .number = PlotArea_ChartDetails_FieldNumber_DataLabel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, dataLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "grouping",
        .dataTypeSpecific.enumDescFunc = PlotArea_ChartDetails_Grouping_EnumDescriptor,
        .number = PlotArea_ChartDetails_FieldNumber_Grouping,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, grouping),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bar",
        .dataTypeSpecific.className = GPBStringifySymbol(BarChart),
        .number = PlotArea_ChartDetails_FieldNumber_Bar,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, bar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bar3D",
        .dataTypeSpecific.className = GPBStringifySymbol(Bar3DChart),
        .number = PlotArea_ChartDetails_FieldNumber_Bar3D,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, bar3D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "line",
        .dataTypeSpecific.className = GPBStringifySymbol(LineChart),
        .number = PlotArea_ChartDetails_FieldNumber_Line,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, line),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "line3D",
        .dataTypeSpecific.className = GPBStringifySymbol(Line3DChart),
        .number = PlotArea_ChartDetails_FieldNumber_Line3D,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, line3D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "area",
        .dataTypeSpecific.className = GPBStringifySymbol(AreaChart),
        .number = PlotArea_ChartDetails_FieldNumber_Area,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, area),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pie",
        .dataTypeSpecific.className = GPBStringifySymbol(PieChart),
        .number = PlotArea_ChartDetails_FieldNumber_Pie,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, pie),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pie3D",
        .dataTypeSpecific.className = GPBStringifySymbol(Pie3DChart),
        .number = PlotArea_ChartDetails_FieldNumber_Pie3D,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, pie3D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reppie",
        .dataTypeSpecific.className = GPBStringifySymbol(RepresentivePieChart),
        .number = PlotArea_ChartDetails_FieldNumber_Reppie,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, reppie),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "doughnut",
        .dataTypeSpecific.className = GPBStringifySymbol(DoughnutChart),
        .number = PlotArea_ChartDetails_FieldNumber_Doughnut,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, doughnut),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scatter",
        .dataTypeSpecific.className = GPBStringifySymbol(ScatterChart),
        .number = PlotArea_ChartDetails_FieldNumber_Scatter,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, scatter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bubble",
        .dataTypeSpecific.className = GPBStringifySymbol(BubbleChart),
        .number = PlotArea_ChartDetails_FieldNumber_Bubble,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PlotArea_ChartDetails__storage_, bubble),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlotArea_ChartDetails class]
                                     rootClass:[PlotareaRoot class]
                                          file:PlotareaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlotArea_ChartDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\000axisId\000\003\n\000\004\t\000\007\004!\000\t\005!\000\014\004!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PlotArea)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PlotArea_ChartDetails_ChartType

GPBEnumDescriptor *PlotArea_ChartDetails_ChartType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Bar\000Bar3D\000Line\000Line3D\000Area\000Area3D\000Pie\000Pi"
        "e3D\000Reppie\000Doughnut\000Scatter\000Bubble\000";
    static const int32_t values[] = {
        PlotArea_ChartDetails_ChartType_Bar,
        PlotArea_ChartDetails_ChartType_Bar3D,
        PlotArea_ChartDetails_ChartType_Line,
        PlotArea_ChartDetails_ChartType_Line3D,
        PlotArea_ChartDetails_ChartType_Area,
        PlotArea_ChartDetails_ChartType_Area3D,
        PlotArea_ChartDetails_ChartType_Pie,
        PlotArea_ChartDetails_ChartType_Pie3D,
        PlotArea_ChartDetails_ChartType_Reppie,
        PlotArea_ChartDetails_ChartType_Doughnut,
        PlotArea_ChartDetails_ChartType_Scatter,
        PlotArea_ChartDetails_ChartType_Bubble,
    };
    static const char *extraTextFormatInfo = "\004\001c\002\000\003d\002\000\005d\002\000\007c\002\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlotArea_ChartDetails_ChartType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlotArea_ChartDetails_ChartType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlotArea_ChartDetails_ChartType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlotArea_ChartDetails_ChartType_Bar:
    case PlotArea_ChartDetails_ChartType_Bar3D:
    case PlotArea_ChartDetails_ChartType_Line:
    case PlotArea_ChartDetails_ChartType_Line3D:
    case PlotArea_ChartDetails_ChartType_Area:
    case PlotArea_ChartDetails_ChartType_Area3D:
    case PlotArea_ChartDetails_ChartType_Pie:
    case PlotArea_ChartDetails_ChartType_Pie3D:
    case PlotArea_ChartDetails_ChartType_Reppie:
    case PlotArea_ChartDetails_ChartType_Doughnut:
    case PlotArea_ChartDetails_ChartType_Scatter:
    case PlotArea_ChartDetails_ChartType_Bubble:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PlotArea_ChartDetails_Grouping

GPBEnumDescriptor *PlotArea_ChartDetails_Grouping_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Standard\000Clustered\000Stacked\000Percentstacke"
        "d\000";
    static const int32_t values[] = {
        PlotArea_ChartDetails_Grouping_Standard,
        PlotArea_ChartDetails_Grouping_Clustered,
        PlotArea_ChartDetails_Grouping_Stacked,
        PlotArea_ChartDetails_Grouping_Percentstacked,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlotArea_ChartDetails_Grouping)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlotArea_ChartDetails_Grouping_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlotArea_ChartDetails_Grouping_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlotArea_ChartDetails_Grouping_Standard:
    case PlotArea_ChartDetails_Grouping_Clustered:
    case PlotArea_ChartDetails_Grouping_Stacked:
    case PlotArea_ChartDetails_Grouping_Percentstacked:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PlotArea_DataTable

@implementation PlotArea_DataTable

@dynamic hasHorizontalBorder, horizontalBorder;
@dynamic hasVerticalBorder, verticalBorder;
@dynamic hasOutline, outline;
@dynamic hasLegendKeys, legendKeys;
@dynamic hasProps, props;
@dynamic hasTextBody, textBody;

typedef struct PlotArea_DataTable__storage_ {
  uint32_t _has_storage_[1];
  Properties *props;
  TextBody *textBody;
} PlotArea_DataTable__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "horizontalBorder",
        .dataTypeSpecific.className = NULL,
        .number = PlotArea_DataTable_FieldNumber_HorizontalBorder,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "verticalBorder",
        .dataTypeSpecific.className = NULL,
        .number = PlotArea_DataTable_FieldNumber_VerticalBorder,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "outline",
        .dataTypeSpecific.className = NULL,
        .number = PlotArea_DataTable_FieldNumber_Outline,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "legendKeys",
        .dataTypeSpecific.className = NULL,
        .number = PlotArea_DataTable_FieldNumber_LegendKeys,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = PlotArea_DataTable_FieldNumber_Props,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PlotArea_DataTable__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "textBody",
        .dataTypeSpecific.className = GPBStringifySymbol(TextBody),
        .number = PlotArea_DataTable_FieldNumber_TextBody,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PlotArea_DataTable__storage_, textBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlotArea_DataTable class]
                                     rootClass:[PlotareaRoot class]
                                          file:PlotareaRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlotArea_DataTable__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\020\000\002\016\000\004\n\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PlotArea)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
