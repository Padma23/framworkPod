// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colortweaks.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Colortweaks.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ColortweaksRoot

@implementation ColortweaksRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ColortweaksRoot_FileDescriptor

static GPBFileDescriptor *ColortweaksRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ColorTweaks

@implementation ColorTweaks

@dynamic hasShade, shade;
@dynamic hasTint, tint;
@dynamic hasAlpha, alpha;
@dynamic hasHsl, hsl;
@dynamic hasRgb, rgb;

typedef struct ColorTweaks__storage_ {
  uint32_t _has_storage_[1];
  float shade;
  float tint;
  float alpha;
  ColorTweaks_HSLTweak *hsl;
  ColorTweaks_RGBTweak *rgb;
} ColorTweaks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shade",
        .dataTypeSpecific.className = NULL,
        .number = ColorTweaks_FieldNumber_Shade,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ColorTweaks__storage_, shade),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "tint",
        .dataTypeSpecific.className = NULL,
        .number = ColorTweaks_FieldNumber_Tint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ColorTweaks__storage_, tint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "alpha",
        .dataTypeSpecific.className = NULL,
        .number = ColorTweaks_FieldNumber_Alpha,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ColorTweaks__storage_, alpha),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "hsl",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_HSLTweak),
        .number = ColorTweaks_FieldNumber_Hsl,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ColorTweaks__storage_, hsl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rgb",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_RGBTweak),
        .number = ColorTweaks_FieldNumber_Rgb,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ColorTweaks__storage_, rgb),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ColorTweaks class]
                                     rootClass:[ColortweaksRoot class]
                                          file:ColortweaksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ColorTweaks__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ColorTweaks_HSLTweak

@implementation ColorTweaks_HSLTweak

@dynamic luminanceArray, luminanceArray_Count;
@dynamic hueArray, hueArray_Count;
@dynamic saturationArray, saturationArray_Count;

typedef struct ColorTweaks_HSLTweak__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *luminanceArray;
  NSMutableArray *hueArray;
  NSMutableArray *saturationArray;
} ColorTweaks_HSLTweak__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "luminanceArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_Tweak),
        .number = ColorTweaks_HSLTweak_FieldNumber_LuminanceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorTweaks_HSLTweak__storage_, luminanceArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_Tweak),
        .number = ColorTweaks_HSLTweak_FieldNumber_HueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorTweaks_HSLTweak__storage_, hueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "saturationArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_Tweak),
        .number = ColorTweaks_HSLTweak_FieldNumber_SaturationArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorTweaks_HSLTweak__storage_, saturationArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ColorTweaks_HSLTweak class]
                                     rootClass:[ColortweaksRoot class]
                                          file:ColortweaksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ColorTweaks_HSLTweak__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ColorTweaks)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ColorTweaks_RGBTweak

@implementation ColorTweaks_RGBTweak

@dynamic redArray, redArray_Count;
@dynamic greenArray, greenArray_Count;
@dynamic blueArray, blueArray_Count;

typedef struct ColorTweaks_RGBTweak__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *redArray;
  NSMutableArray *greenArray;
  NSMutableArray *blueArray;
} ColorTweaks_RGBTweak__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_Tweak),
        .number = ColorTweaks_RGBTweak_FieldNumber_RedArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorTweaks_RGBTweak__storage_, redArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "greenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_Tweak),
        .number = ColorTweaks_RGBTweak_FieldNumber_GreenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorTweaks_RGBTweak__storage_, greenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorTweaks_Tweak),
        .number = ColorTweaks_RGBTweak_FieldNumber_BlueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorTweaks_RGBTweak__storage_, blueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ColorTweaks_RGBTweak class]
                                     rootClass:[ColortweaksRoot class]
                                          file:ColortweaksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ColorTweaks_RGBTweak__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ColorTweaks)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ColorTweaks_Tweak

@implementation ColorTweaks_Tweak

@dynamic hasMode, mode;
@dynamic hasValue, value;

typedef struct ColorTweaks_Tweak__storage_ {
  uint32_t _has_storage_[1];
  ColorTweaks_Tweak_TweakMode mode;
  float value;
} ColorTweaks_Tweak__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = ColorTweaks_Tweak_TweakMode_EnumDescriptor,
        .number = ColorTweaks_Tweak_FieldNumber_Mode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ColorTweaks_Tweak__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ColorTweaks_Tweak_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ColorTweaks_Tweak__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ColorTweaks_Tweak class]
                                     rootClass:[ColortweaksRoot class]
                                          file:ColortweaksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ColorTweaks_Tweak__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ColorTweaks)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ColorTweaks_Tweak_TweakMode

GPBEnumDescriptor *ColorTweaks_Tweak_TweakMode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Modify\000Offset\000Absolute\000";
    static const int32_t values[] = {
        ColorTweaks_Tweak_TweakMode_Modify,
        ColorTweaks_Tweak_TweakMode_Offset,
        ColorTweaks_Tweak_TweakMode_Absolute,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ColorTweaks_Tweak_TweakMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ColorTweaks_Tweak_TweakMode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ColorTweaks_Tweak_TweakMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case ColorTweaks_Tweak_TweakMode_Modify:
    case ColorTweaks_Tweak_TweakMode_Offset:
    case ColorTweaks_Tweak_TweakMode_Absolute:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
