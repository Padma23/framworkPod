// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pathobject.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Pathobject.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PathobjectRoot

@implementation PathobjectRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PathobjectRoot_FileDescriptor

static GPBFileDescriptor *PathobjectRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PathObject

@implementation PathObject

@dynamic hasType, type;
@dynamic hasM, m;
@dynamic hasL, l;
@dynamic ccArray, ccArray_Count;
@dynamic qcArray, qcArray_Count;
@dynamic hasC, c;
@dynamic hasEa, ea;

typedef struct PathObject__storage_ {
  uint32_t _has_storage_[1];
  PathObject_PathType type;
  PathObject_Point *m;
  PathObject_Point *l;
  NSMutableArray *ccArray;
  NSMutableArray *qcArray;
  PathObject_EllipticalArc *ea;
} PathObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PathObject_PathType_EnumDescriptor,
        .number = PathObject_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PathObject__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "m",
        .dataTypeSpecific.className = GPBStringifySymbol(PathObject_Point),
        .number = PathObject_FieldNumber_M,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PathObject__storage_, m),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "l",
        .dataTypeSpecific.className = GPBStringifySymbol(PathObject_Point),
        .number = PathObject_FieldNumber_L,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PathObject__storage_, l),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ccArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PathObject_Point),
        .number = PathObject_FieldNumber_CcArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PathObject__storage_, ccArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qcArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PathObject_Point),
        .number = PathObject_FieldNumber_QcArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PathObject__storage_, qcArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "c",
        .dataTypeSpecific.className = NULL,
        .number = PathObject_FieldNumber_C,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ea",
        .dataTypeSpecific.className = GPBStringifySymbol(PathObject_EllipticalArc),
        .number = PathObject_FieldNumber_Ea,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PathObject__storage_, ea),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PathObject class]
                                     rootClass:[PathobjectRoot class]
                                          file:PathobjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PathObject__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PathObject_PathType

GPBEnumDescriptor *PathObject_PathType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "M\000L\000Cc\000Qc\000C\000Ea\000";
    static const int32_t values[] = {
        PathObject_PathType_M,
        PathObject_PathType_L,
        PathObject_PathType_Cc,
        PathObject_PathType_Qc,
        PathObject_PathType_C,
        PathObject_PathType_Ea,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PathObject_PathType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PathObject_PathType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PathObject_PathType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PathObject_PathType_M:
    case PathObject_PathType_L:
    case PathObject_PathType_Cc:
    case PathObject_PathType_Qc:
    case PathObject_PathType_C:
    case PathObject_PathType_Ea:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PathObject_Point

@implementation PathObject_Point

@dynamic hasX, x;
@dynamic hasY, y;

typedef struct PathObject_Point__storage_ {
  uint32_t _has_storage_[1];
  float x;
  float y;
} PathObject_Point__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = PathObject_Point_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PathObject_Point__storage_, x),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = PathObject_Point_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PathObject_Point__storage_, y),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PathObject_Point class]
                                     rootClass:[PathobjectRoot class]
                                          file:PathobjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PathObject_Point__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PathObject)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PathObject_EllipticalArc

@implementation PathObject_EllipticalArc

@dynamic hasXRadius, xRadius;
@dynamic hasYRadius, yRadius;
@dynamic hasStAngle, stAngle;
@dynamic hasSwAngle, swAngle;
@dynamic hasEnd, end;

typedef struct PathObject_EllipticalArc__storage_ {
  uint32_t _has_storage_[1];
  float xRadius;
  float yRadius;
  float stAngle;
  float swAngle;
  PathObject_Point *end;
} PathObject_EllipticalArc__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "xRadius",
        .dataTypeSpecific.className = NULL,
        .number = PathObject_EllipticalArc_FieldNumber_XRadius,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PathObject_EllipticalArc__storage_, xRadius),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "yRadius",
        .dataTypeSpecific.className = NULL,
        .number = PathObject_EllipticalArc_FieldNumber_YRadius,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PathObject_EllipticalArc__storage_, yRadius),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "stAngle",
        .dataTypeSpecific.className = NULL,
        .number = PathObject_EllipticalArc_FieldNumber_StAngle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PathObject_EllipticalArc__storage_, stAngle),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "swAngle",
        .dataTypeSpecific.className = NULL,
        .number = PathObject_EllipticalArc_FieldNumber_SwAngle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PathObject_EllipticalArc__storage_, swAngle),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = GPBStringifySymbol(PathObject_Point),
        .number = PathObject_EllipticalArc_FieldNumber_End,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PathObject_EllipticalArc__storage_, end),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PathObject_EllipticalArc class]
                                     rootClass:[PathobjectRoot class]
                                          file:PathobjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PathObject_EllipticalArc__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\007\000\003\007\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PathObject)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
