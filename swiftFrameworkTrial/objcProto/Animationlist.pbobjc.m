// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animationlist.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Animationlist.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AnimationlistRoot

@implementation AnimationlistRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AnimationlistRoot_FileDescriptor

static GPBFileDescriptor *AnimationlistRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - AnimationList

@implementation AnimationList

@dynamic hasShapeId, shapeId;
@dynamic hasAnimId, animId;
@dynamic hasTarget, target;
@dynamic hasParentId, parentId;

typedef struct AnimationList__storage_ {
  uint32_t _has_storage_[1];
  NSString *shapeId;
  NSString *animId;
  AnimationList_AnimationTarget *target;
  NSString *parentId;
} AnimationList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shapeId",
        .dataTypeSpecific.className = NULL,
        .number = AnimationList_FieldNumber_ShapeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnimationList__storage_, shapeId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "animId",
        .dataTypeSpecific.className = NULL,
        .number = AnimationList_FieldNumber_AnimId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnimationList__storage_, animId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationList_AnimationTarget),
        .number = AnimationList_FieldNumber_Target,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AnimationList__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = AnimationList_FieldNumber_ParentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AnimationList__storage_, parentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnimationList class]
                                     rootClass:[AnimationlistRoot class]
                                          file:AnimationlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnimationList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\006\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnimationList_AnimationTarget

@implementation AnimationList_AnimationTarget

@dynamic hasNode, node;
@dynamic hasPara, para;

typedef struct AnimationList_AnimationTarget__storage_ {
  uint32_t _has_storage_[1];
  AnimationList_AnimationTarget_AnimationNode node;
  int32_t para;
} AnimationList_AnimationTarget__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "node",
        .dataTypeSpecific.enumDescFunc = AnimationList_AnimationTarget_AnimationNode_EnumDescriptor,
        .number = AnimationList_AnimationTarget_FieldNumber_Node,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnimationList_AnimationTarget__storage_, node),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "para",
        .dataTypeSpecific.className = NULL,
        .number = AnimationList_AnimationTarget_FieldNumber_Para,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnimationList_AnimationTarget__storage_, para),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnimationList_AnimationTarget class]
                                     rootClass:[AnimationlistRoot class]
                                          file:AnimationlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnimationList_AnimationTarget__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AnimationList)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum AnimationList_AnimationTarget_AnimationNode

GPBEnumDescriptor *AnimationList_AnimationTarget_AnimationNode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Bg\000Para\000";
    static const int32_t values[] = {
        AnimationList_AnimationTarget_AnimationNode_Bg,
        AnimationList_AnimationTarget_AnimationNode_Para,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AnimationList_AnimationTarget_AnimationNode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AnimationList_AnimationTarget_AnimationNode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AnimationList_AnimationTarget_AnimationNode_IsValidValue(int32_t value__) {
  switch (value__) {
    case AnimationList_AnimationTarget_AnimationNode_Bg:
    case AnimationList_AnimationTarget_AnimationNode_Para:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
