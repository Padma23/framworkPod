// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slide.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Slide.pbobjc.h"
 #import "Transition.pbobjc.h"
 #import "Shapeobject.pbobjc.h"
 #import "Pagesetup.pbobjc.h"
 #import "Background.pbobjc.h"
 #import "Slidedata.pbobjc.h"
 #import "Colormap.pbobjc.h"
 #import "Animationlist.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SlideRoot

@implementation SlideRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SlideRoot_FileDescriptor

static GPBFileDescriptor *SlideRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Slide

@implementation Slide

@dynamic hasData_p, data_p;
@dynamic hasSlideSetup, slideSetup;
@dynamic shapesArray, shapesArray_Count;
@dynamic hasTransition, transition;
@dynamic hasBg, bg;
@dynamic hasColorMap, colorMap;
@dynamic animListArray, animListArray_Count;
@dynamic hasHf, hf;
@dynamic hasNotes, notes;

typedef struct Slide__storage_ {
  uint32_t _has_storage_[1];
  SlideData *data_p;
  PageSetup *slideSetup;
  NSMutableArray *shapesArray;
  Transition *transition;
  Background *bg;
  ColorMap *colorMap;
  NSMutableArray *animListArray;
  Slide_HeaderFooterDisplay *hf;
  NSString *notes;
} Slide__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SlideData),
        .number = Slide_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Slide__storage_, data_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "slideSetup",
        .dataTypeSpecific.className = GPBStringifySymbol(PageSetup),
        .number = Slide_FieldNumber_SlideSetup,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Slide__storage_, slideSetup),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shapesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShapeObject),
        .number = Slide_FieldNumber_ShapesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Slide__storage_, shapesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transition",
        .dataTypeSpecific.className = GPBStringifySymbol(Transition),
        .number = Slide_FieldNumber_Transition,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Slide__storage_, transition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bg",
        .dataTypeSpecific.className = GPBStringifySymbol(Background),
        .number = Slide_FieldNumber_Bg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Slide__storage_, bg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "colorMap",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorMap),
        .number = Slide_FieldNumber_ColorMap,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Slide__storage_, colorMap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "animListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationList),
        .number = Slide_FieldNumber_AnimListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Slide__storage_, animListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hf",
        .dataTypeSpecific.className = GPBStringifySymbol(Slide_HeaderFooterDisplay),
        .number = Slide_FieldNumber_Hf,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Slide__storage_, hf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notes",
        .dataTypeSpecific.className = NULL,
        .number = Slide_FieldNumber_Notes,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Slide__storage_, notes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Slide class]
                                     rootClass:[SlideRoot class]
                                          file:SlideRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Slide__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\n\000\006\010\000\007\000animList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Slide_HeaderFooterDisplay

@implementation Slide_HeaderFooterDisplay

@dynamic hasFooter, footer;
@dynamic hasHeader, header;
@dynamic hasSlidenum, slidenum;
@dynamic hasDatetime, datetime;

typedef struct Slide_HeaderFooterDisplay__storage_ {
  uint32_t _has_storage_[1];
} Slide_HeaderFooterDisplay__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "footer",
        .dataTypeSpecific.className = NULL,
        .number = Slide_HeaderFooterDisplay_FieldNumber_Footer,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "header",
        .dataTypeSpecific.className = NULL,
        .number = Slide_HeaderFooterDisplay_FieldNumber_Header,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "slidenum",
        .dataTypeSpecific.className = NULL,
        .number = Slide_HeaderFooterDisplay_FieldNumber_Slidenum,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "datetime",
        .dataTypeSpecific.className = NULL,
        .number = Slide_HeaderFooterDisplay_FieldNumber_Datetime,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Slide_HeaderFooterDisplay class]
                                     rootClass:[SlideRoot class]
                                          file:SlideRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Slide_HeaderFooterDisplay__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Slide)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
