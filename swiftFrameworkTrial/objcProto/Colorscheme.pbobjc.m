// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colorscheme.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Colorscheme.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ColorschemeRoot

@implementation ColorschemeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ColorschemeRoot_FileDescriptor

static GPBFileDescriptor *ColorschemeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ColorScheme

@implementation ColorScheme

@dynamic hasId_p, id_p;
@dynamic hasName, name;
@dynamic hasColorStyle, colorStyle;
@dynamic hasModified, modified;
@dynamic hasThemeId, themeId;

typedef struct ColorScheme__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  ColorScheme_ColorStyle *colorStyle;
  NSString *themeId;
} ColorScheme__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ColorScheme__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ColorScheme__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "colorStyle",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorScheme_ColorStyle),
        .number = ColorScheme_FieldNumber_ColorStyle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ColorScheme__storage_, colorStyle),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modified",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_FieldNumber_Modified,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "themeId",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_FieldNumber_ThemeId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ColorScheme__storage_, themeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ColorScheme class]
                                     rootClass:[ColorschemeRoot class]
                                          file:ColorschemeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ColorScheme__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\n\000c\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ColorScheme_ColorStyle

@implementation ColorScheme_ColorStyle

@dynamic dark1Array, dark1Array_Count;
@dynamic light1Array, light1Array_Count;
@dynamic dark2Array, dark2Array_Count;
@dynamic light2Array, light2Array_Count;
@dynamic accent1Array, accent1Array_Count;
@dynamic accent2Array, accent2Array_Count;
@dynamic accent3Array, accent3Array_Count;
@dynamic accent4Array, accent4Array_Count;
@dynamic accent5Array, accent5Array_Count;
@dynamic accent6Array, accent6Array_Count;
@dynamic hlinkArray, hlinkArray_Count;
@dynamic followhlinkArray, followhlinkArray_Count;

typedef struct ColorScheme_ColorStyle__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *dark1Array;
  GPBInt32Array *light1Array;
  GPBInt32Array *dark2Array;
  GPBInt32Array *light2Array;
  GPBInt32Array *accent1Array;
  GPBInt32Array *accent2Array;
  GPBInt32Array *accent3Array;
  GPBInt32Array *accent4Array;
  GPBInt32Array *accent5Array;
  GPBInt32Array *accent6Array;
  GPBInt32Array *hlinkArray;
  GPBInt32Array *followhlinkArray;
} ColorScheme_ColorStyle__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dark1Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Dark1Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, dark1Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "light1Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Light1Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, light1Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dark2Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Dark2Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, dark2Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "light2Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Light2Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, light2Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accent1Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Accent1Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, accent1Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accent2Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Accent2Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, accent2Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accent3Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Accent3Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, accent3Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accent4Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Accent4Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, accent4Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accent5Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Accent5Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, accent5Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "accent6Array",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_Accent6Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, accent6Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hlinkArray",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_HlinkArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, hlinkArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followhlinkArray",
        .dataTypeSpecific.className = NULL,
        .number = ColorScheme_ColorStyle_FieldNumber_FollowhlinkArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ColorScheme_ColorStyle__storage_, followhlinkArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ColorScheme_ColorStyle class]
                                     rootClass:[ColorschemeRoot class]
                                          file:ColorschemeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ColorScheme_ColorStyle__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ColorScheme)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
