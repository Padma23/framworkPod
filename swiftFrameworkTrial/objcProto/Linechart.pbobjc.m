// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linechart.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Linechart.pbobjc.h"
 #import "Properties.pbobjc.h"
 #import "Linechartdetails.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LinechartRoot

@implementation LinechartRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LinechartRoot_FileDescriptor

static GPBFileDescriptor *LinechartRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - LineChart

@implementation LineChart

@dynamic hasDetails, details;
@dynamic hasShowUpDownBars, showUpDownBars;
@dynamic hasShowHighLowLines, showHighLowLines;
@dynamic hasShowMarker, showMarker;
@dynamic hasSmooth, smooth;
@dynamic hasUpDownBars, upDownBars;
@dynamic hasHighLowLines, highLowLines;

typedef struct LineChart__storage_ {
  uint32_t _has_storage_[1];
  LineChartDetails *details;
  LineChart_UpDownBars *upDownBars;
  Properties *highLowLines;
} LineChart__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "details",
        .dataTypeSpecific.className = GPBStringifySymbol(LineChartDetails),
        .number = LineChart_FieldNumber_Details,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LineChart__storage_, details),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "showUpDownBars",
        .dataTypeSpecific.className = NULL,
        .number = LineChart_FieldNumber_ShowUpDownBars,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showHighLowLines",
        .dataTypeSpecific.className = NULL,
        .number = LineChart_FieldNumber_ShowHighLowLines,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "showMarker",
        .dataTypeSpecific.className = NULL,
        .number = LineChart_FieldNumber_ShowMarker,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "smooth",
        .dataTypeSpecific.className = NULL,
        .number = LineChart_FieldNumber_Smooth,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "upDownBars",
        .dataTypeSpecific.className = GPBStringifySymbol(LineChart_UpDownBars),
        .number = LineChart_FieldNumber_UpDownBars,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(LineChart__storage_, upDownBars),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "highLowLines",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = LineChart_FieldNumber_HighLowLines,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(LineChart__storage_, highLowLines),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LineChart class]
                                     rootClass:[LinechartRoot class]
                                          file:LinechartRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LineChart__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\016\000\003\020\000\004\n\000\006\n\000\007\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LineChart_UpDownBars

@implementation LineChart_UpDownBars

@dynamic hasUpBar, upBar;
@dynamic hasDownBar, downBar;
@dynamic hasGap, gap;

typedef struct LineChart_UpDownBars__storage_ {
  uint32_t _has_storage_[1];
  float gap;
  Properties *upBar;
  Properties *downBar;
} LineChart_UpDownBars__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "upBar",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = LineChart_UpDownBars_FieldNumber_UpBar,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LineChart_UpDownBars__storage_, upBar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "downBar",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = LineChart_UpDownBars_FieldNumber_DownBar,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LineChart_UpDownBars__storage_, downBar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gap",
        .dataTypeSpecific.className = NULL,
        .number = LineChart_UpDownBars_FieldNumber_Gap,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LineChart_UpDownBars__storage_, gap),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LineChart_UpDownBars class]
                                     rootClass:[LinechartRoot class]
                                          file:LinechartRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LineChart_UpDownBars__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(LineChart)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
