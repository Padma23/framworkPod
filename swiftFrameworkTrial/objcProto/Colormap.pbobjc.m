// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colormap.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Colormap.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ColormapRoot

@implementation ColormapRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ColormapRoot_FileDescriptor

static GPBFileDescriptor *ColormapRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ColorMap

@implementation ColorMap

@dynamic hasBg1, bg1;
@dynamic hasTx1, tx1;
@dynamic hasBg2, bg2;
@dynamic hasTx2, tx2;
@dynamic hasA1, a1;
@dynamic hasA2, a2;
@dynamic hasA3, a3;
@dynamic hasA4, a4;
@dynamic hasA5, a5;
@dynamic hasA6, a6;
@dynamic hasHlink, hlink;
@dynamic hasFollowhlink, followhlink;

typedef struct ColorMap__storage_ {
  uint32_t _has_storage_[1];
  ColorMap_ColorSchemeIndex bg1;
  ColorMap_ColorSchemeIndex tx1;
  ColorMap_ColorSchemeIndex bg2;
  ColorMap_ColorSchemeIndex tx2;
  ColorMap_ColorSchemeIndex a1;
  ColorMap_ColorSchemeIndex a2;
  ColorMap_ColorSchemeIndex a3;
  ColorMap_ColorSchemeIndex a4;
  ColorMap_ColorSchemeIndex a5;
  ColorMap_ColorSchemeIndex a6;
  ColorMap_ColorSchemeIndex hlink;
  ColorMap_ColorSchemeIndex followhlink;
} ColorMap__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Dark2,
        .core.name = "bg1",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_Bg1,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, bg1),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Light2,
        .core.name = "tx1",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_Tx1,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, tx1),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Dark1,
        .core.name = "bg2",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_Bg2,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, bg2),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Light1,
        .core.name = "tx2",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_Tx2,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, tx2),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Accent1,
        .core.name = "a1",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_A1,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, a1),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Accent2,
        .core.name = "a2",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_A2,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, a2),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Accent3,
        .core.name = "a3",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_A3,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, a3),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Accent4,
        .core.name = "a4",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_A4,
        .core.hasIndex = 7,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, a4),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Accent5,
        .core.name = "a5",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_A5,
        .core.hasIndex = 8,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, a5),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Accent6,
        .core.name = "a6",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_A6,
        .core.hasIndex = 9,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, a6),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Hlink,
        .core.name = "hlink",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_Hlink,
        .core.hasIndex = 10,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, hlink),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ColorMap_ColorSchemeIndex_Followhlink,
        .core.name = "followhlink",
        .core.dataTypeSpecific.enumDescFunc = ColorMap_ColorSchemeIndex_EnumDescriptor,
        .core.number = ColorMap_FieldNumber_Followhlink,
        .core.hasIndex = 11,
        .core.offset = (uint32_t)offsetof(ColorMap__storage_, followhlink),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ColorMap class]
                                     rootClass:[ColormapRoot class]
                                          file:ColormapRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ColorMap__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ColorMap_ColorSchemeIndex

GPBEnumDescriptor *ColorMap_ColorSchemeIndex_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Dark1\000Light1\000Dark2\000Light2\000Accent1\000Accent"
        "2\000Accent3\000Accent4\000Accent5\000Accent6\000Hlink\000"
        "Followhlink\000";
    static const int32_t values[] = {
        ColorMap_ColorSchemeIndex_Dark1,
        ColorMap_ColorSchemeIndex_Light1,
        ColorMap_ColorSchemeIndex_Dark2,
        ColorMap_ColorSchemeIndex_Light2,
        ColorMap_ColorSchemeIndex_Accent1,
        ColorMap_ColorSchemeIndex_Accent2,
        ColorMap_ColorSchemeIndex_Accent3,
        ColorMap_ColorSchemeIndex_Accent4,
        ColorMap_ColorSchemeIndex_Accent5,
        ColorMap_ColorSchemeIndex_Accent6,
        ColorMap_ColorSchemeIndex_Hlink,
        ColorMap_ColorSchemeIndex_Followhlink,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ColorMap_ColorSchemeIndex)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ColorMap_ColorSchemeIndex_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ColorMap_ColorSchemeIndex_IsValidValue(int32_t value__) {
  switch (value__) {
    case ColorMap_ColorSchemeIndex_Dark1:
    case ColorMap_ColorSchemeIndex_Light1:
    case ColorMap_ColorSchemeIndex_Dark2:
    case ColorMap_ColorSchemeIndex_Light2:
    case ColorMap_ColorSchemeIndex_Accent1:
    case ColorMap_ColorSchemeIndex_Accent2:
    case ColorMap_ColorSchemeIndex_Accent3:
    case ColorMap_ColorSchemeIndex_Accent4:
    case ColorMap_ColorSchemeIndex_Accent5:
    case ColorMap_ColorSchemeIndex_Accent6:
    case ColorMap_ColorSchemeIndex_Hlink:
    case ColorMap_ColorSchemeIndex_Followhlink:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
