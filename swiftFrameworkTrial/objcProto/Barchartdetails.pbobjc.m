// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: barchartdetails.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Barchartdetails.pbobjc.h"
 #import "Seriesdetails.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BarchartdetailsRoot

@implementation BarchartdetailsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BarchartdetailsRoot_FileDescriptor

static GPBFileDescriptor *BarchartdetailsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - BarChartDetails

@implementation BarChartDetails

@dynamic hasGap, gap;
@dynamic seriesArray, seriesArray_Count;

typedef struct BarChartDetails__storage_ {
  uint32_t _has_storage_[1];
  float gap;
  NSMutableArray *seriesArray;
} BarChartDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gap",
        .dataTypeSpecific.className = NULL,
        .number = BarChartDetails_FieldNumber_Gap,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BarChartDetails__storage_, gap),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "seriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BarChartDetails_BarChartSeries),
        .number = BarChartDetails_FieldNumber_SeriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BarChartDetails__storage_, seriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BarChartDetails class]
                                     rootClass:[BarchartdetailsRoot class]
                                          file:BarchartdetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BarChartDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BarChartDetails_BarChartSeries

@implementation BarChartDetails_BarChartSeries

@dynamic hasDetails, details;
@dynamic hasInvertColorIfNegative, invertColorIfNegative;

typedef struct BarChartDetails_BarChartSeries__storage_ {
  uint32_t _has_storage_[1];
  SeriesDetails *details;
} BarChartDetails_BarChartSeries__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "details",
        .dataTypeSpecific.className = GPBStringifySymbol(SeriesDetails),
        .number = BarChartDetails_BarChartSeries_FieldNumber_Details,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BarChartDetails_BarChartSeries__storage_, details),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "invertColorIfNegative",
        .dataTypeSpecific.className = NULL,
        .number = BarChartDetails_BarChartSeries_FieldNumber_InvertColorIfNegative,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BarChartDetails_BarChartSeries class]
                                     rootClass:[BarchartdetailsRoot class]
                                          file:BarchartdetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BarChartDetails_BarChartSeries__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(BarChartDetails)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
