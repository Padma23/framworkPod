// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: representivepiechart.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ChartLine;
@class PieChartDetails;
@class RepresentivePieChart_SecondPlot;
@class RepresentivePieChart_SecondPlot_SplitData;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum RepresentivePieChart_SecondPlot_RepresentiveType

typedef GPB_ENUM(RepresentivePieChart_SecondPlot_RepresentiveType) {
  /** Pie of pie */
  RepresentivePieChart_SecondPlot_RepresentiveType_Pie = 0,

  /** Bar of pie */
  RepresentivePieChart_SecondPlot_RepresentiveType_Bar = 1,
};

GPBEnumDescriptor *RepresentivePieChart_SecondPlot_RepresentiveType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RepresentivePieChart_SecondPlot_RepresentiveType_IsValidValue(int32_t value);

#pragma mark - Enum RepresentivePieChart_SecondPlot_SplitData_SplitType

/** Second representaion is split on the basis of the specified type. */
typedef GPB_ENUM(RepresentivePieChart_SecondPlot_SplitData_SplitType) {
  /** Contins the last 'n' values. */
  RepresentivePieChart_SecondPlot_SplitData_SplitType_Pos = 1,

  /** Values lesser than the speciend percentage. */
  RepresentivePieChart_SecondPlot_SplitData_SplitType_Percent = 2,

  /** Values lesser than the specified value. */
  RepresentivePieChart_SecondPlot_SplitData_SplitType_Value = 3,
  RepresentivePieChart_SecondPlot_SplitData_SplitType_Custom = 4,
};

GPBEnumDescriptor *RepresentivePieChart_SecondPlot_SplitData_SplitType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RepresentivePieChart_SecondPlot_SplitData_SplitType_IsValidValue(int32_t value);

#pragma mark - RepresentivepiechartRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface RepresentivepiechartRoot : GPBRootObject
@end

#pragma mark - RepresentivePieChart

typedef GPB_ENUM(RepresentivePieChart_FieldNumber) {
  RepresentivePieChart_FieldNumber_Details = 1,
  RepresentivePieChart_FieldNumber_Gap = 2,
  RepresentivePieChart_FieldNumber_SeriesLinesArray = 3,
  RepresentivePieChart_FieldNumber_Second = 4,
};

@interface RepresentivePieChart : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PieChartDetails *details;
/** Test to see if @c details has been set. */
@property(nonatomic, readwrite) BOOL hasDetails;

/** Gap size. */
@property(nonatomic, readwrite) float gap;

@property(nonatomic, readwrite) BOOL hasGap;
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ChartLine*> *seriesLinesArray;
/** The number of items in @c seriesLinesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger seriesLinesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) RepresentivePieChart_SecondPlot *second;
/** Test to see if @c second has been set. */
@property(nonatomic, readwrite) BOOL hasSecond;

@end

#pragma mark - RepresentivePieChart_SecondPlot

typedef GPB_ENUM(RepresentivePieChart_SecondPlot_FieldNumber) {
  RepresentivePieChart_SecondPlot_FieldNumber_Type = 1,
  RepresentivePieChart_SecondPlot_FieldNumber_Size = 2,
  RepresentivePieChart_SecondPlot_FieldNumber_Data_p = 3,
};

@interface RepresentivePieChart_SecondPlot : GPBMessage

@property(nonatomic, readwrite) RepresentivePieChart_SecondPlot_RepresentiveType type;

@property(nonatomic, readwrite) BOOL hasType;
/** Size of the representive pie in Percentage. */
@property(nonatomic, readwrite) int32_t size;

@property(nonatomic, readwrite) BOOL hasSize;
@property(nonatomic, readwrite, strong, null_resettable) RepresentivePieChart_SecondPlot_SplitData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - RepresentivePieChart_SecondPlot_SplitData

typedef GPB_ENUM(RepresentivePieChart_SecondPlot_SplitData_FieldNumber) {
  RepresentivePieChart_SecondPlot_SplitData_FieldNumber_Type = 1,
  RepresentivePieChart_SecondPlot_SplitData_FieldNumber_Pos = 2,
  RepresentivePieChart_SecondPlot_SplitData_FieldNumber_Percent = 3,
  RepresentivePieChart_SecondPlot_SplitData_FieldNumber_Value = 4,
  RepresentivePieChart_SecondPlot_SplitData_FieldNumber_CustomArray = 5,
};

@interface RepresentivePieChart_SecondPlot_SplitData : GPBMessage

@property(nonatomic, readwrite) RepresentivePieChart_SecondPlot_SplitData_SplitType type;

@property(nonatomic, readwrite) BOOL hasType;
/** Position. */
@property(nonatomic, readwrite) int32_t pos;

@property(nonatomic, readwrite) BOOL hasPos;
/** Percent Value. */
@property(nonatomic, readwrite) float percent;

@property(nonatomic, readwrite) BOOL hasPercent;
/** Value. */
@property(nonatomic, readwrite) float value;

@property(nonatomic, readwrite) BOOL hasValue;
/** Customised array position. */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *customArray;
/** The number of items in @c customArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger customArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
