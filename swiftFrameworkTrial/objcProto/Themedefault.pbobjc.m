// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: themedefault.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Themedefault.pbobjc.h"
 #import "Properties.pbobjc.h"
 #import "Themereference.pbobjc.h"
 #import "Parastyle.pbobjc.h"
 #import "Colormap.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ThemedefaultRoot

@implementation ThemedefaultRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ThemedefaultRoot_FileDescriptor

static GPBFileDescriptor *ThemedefaultRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ThemeDefault

@implementation ThemeDefault

@dynamic hasBg, bg;
@dynamic hasFill, fill;
@dynamic hasStroke, stroke;
@dynamic hasColorMap, colorMap;
@dynamic hasShape, shape;
@dynamic hasLine, line;

typedef struct ThemeDefault__storage_ {
  uint32_t _has_storage_[1];
  int32_t bg;
  int32_t fill;
  int32_t stroke;
  ColorMap *colorMap;
  ThemeDefault_ObjectDefaults *shape;
  ThemeDefault_ObjectDefaults *line;
} ThemeDefault__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bg",
        .dataTypeSpecific.className = NULL,
        .number = ThemeDefault_FieldNumber_Bg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThemeDefault__storage_, bg),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fill",
        .dataTypeSpecific.className = NULL,
        .number = ThemeDefault_FieldNumber_Fill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ThemeDefault__storage_, fill),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stroke",
        .dataTypeSpecific.className = NULL,
        .number = ThemeDefault_FieldNumber_Stroke,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ThemeDefault__storage_, stroke),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "colorMap",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorMap),
        .number = ThemeDefault_FieldNumber_ColorMap,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ThemeDefault__storage_, colorMap),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeDefault_ObjectDefaults),
        .number = ThemeDefault_FieldNumber_Shape,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ThemeDefault__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "line",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeDefault_ObjectDefaults),
        .number = ThemeDefault_FieldNumber_Line,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ThemeDefault__storage_, line),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThemeDefault class]
                                     rootClass:[ThemedefaultRoot class]
                                          file:ThemedefaultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThemeDefault__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ThemeDefault_ObjectDefaults

@implementation ThemeDefault_ObjectDefaults

@dynamic hasProps, props;
@dynamic hasThemeRef, themeRef;

typedef struct ThemeDefault_ObjectDefaults__storage_ {
  uint32_t _has_storage_[1];
  Properties *props;
  ThemeReference *themeRef;
} ThemeDefault_ObjectDefaults__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "props",
        .dataTypeSpecific.className = GPBStringifySymbol(Properties),
        .number = ThemeDefault_ObjectDefaults_FieldNumber_Props,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThemeDefault_ObjectDefaults__storage_, props),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "themeRef",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeReference),
        .number = ThemeDefault_ObjectDefaults_FieldNumber_ThemeRef,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ThemeDefault_ObjectDefaults__storage_, themeRef),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThemeDefault_ObjectDefaults class]
                                     rootClass:[ThemedefaultRoot class]
                                          file:ThemedefaultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThemeDefault_ObjectDefaults__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ThemeDefault)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
