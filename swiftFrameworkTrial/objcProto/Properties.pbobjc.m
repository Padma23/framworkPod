// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: properties.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Properties.pbobjc.h"
 #import "Transform.pbobjc.h"
 #import "Fill.pbobjc.h"
 #import "Stroke.pbobjc.h"
 #import "Shapegeometry.pbobjc.h"
 #import "Effects.pbobjc.h"
 #import "Animation.pbobjc.h"
 #import "Animationdata.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PropertiesRoot

@implementation PropertiesRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PropertiesRoot_FileDescriptor

static GPBFileDescriptor *PropertiesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Properties

@implementation Properties

@dynamic hasTransform, transform;
@dynamic hasFill, fill;
@dynamic hasStroke, stroke;
@dynamic hasGeom, geom;
@dynamic hasEffects, effects;
@dynamic animArray, animArray_Count;
@dynamic animDataArray, animDataArray_Count;

typedef struct Properties__storage_ {
  uint32_t _has_storage_[1];
  Transform *transform;
  Fill *fill;
  Stroke *stroke;
  ShapeGeometry *geom;
  Effects *effects;
  NSMutableArray *animArray;
  NSMutableArray *animDataArray;
} Properties__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transform",
        .dataTypeSpecific.className = GPBStringifySymbol(Transform),
        .number = Properties_FieldNumber_Transform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Properties__storage_, transform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fill",
        .dataTypeSpecific.className = GPBStringifySymbol(Fill),
        .number = Properties_FieldNumber_Fill,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Properties__storage_, fill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stroke",
        .dataTypeSpecific.className = GPBStringifySymbol(Stroke),
        .number = Properties_FieldNumber_Stroke,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Properties__storage_, stroke),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "geom",
        .dataTypeSpecific.className = GPBStringifySymbol(ShapeGeometry),
        .number = Properties_FieldNumber_Geom,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Properties__storage_, geom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effects",
        .dataTypeSpecific.className = GPBStringifySymbol(Effects),
        .number = Properties_FieldNumber_Effects,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Properties__storage_, effects),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "animArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Animation),
        .number = Properties_FieldNumber_AnimArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Properties__storage_, animArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "animDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationData),
        .number = Properties_FieldNumber_AnimDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Properties__storage_, animDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Properties class]
                                     rootClass:[PropertiesRoot class]
                                          file:PropertiesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Properties__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\007\000animData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
