// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animationdata.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Animationdata.pbobjc.h"
 #import "Displayanimation.pbobjc.h"
 #import "Styleanimation.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AnimationdataRoot

@implementation AnimationdataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AnimationdataRoot_FileDescriptor

static GPBFileDescriptor *AnimationdataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - AnimationData

@implementation AnimationData

@dynamic hasId_p, id_p;
@dynamic hasVariant, variant;
@dynamic hasEntry, entry;
@dynamic hasExit, exit;
@dynamic hasEmphasis, emphasis;
@dynamic hasTrigger, trigger;
@dynamic hasDetail, detail;
@dynamic hasParentId, parentId;

typedef struct AnimationData__storage_ {
  uint32_t _has_storage_[1];
  AnimationData_AnimationVariant variant;
  NSString *id_p;
  DisplayAnimation *entry;
  DisplayAnimation *exit;
  StyleAnimation *emphasis;
  AnimationData_AnimationTrigger *trigger;
  AnimationData_AnimationDetail *detail;
  NSString *parentId;
} AnimationData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = AnimationData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnimationData__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "variant",
        .dataTypeSpecific.enumDescFunc = AnimationData_AnimationVariant_EnumDescriptor,
        .number = AnimationData_FieldNumber_Variant,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnimationData__storage_, variant),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "entry",
        .dataTypeSpecific.className = GPBStringifySymbol(DisplayAnimation),
        .number = AnimationData_FieldNumber_Entry,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AnimationData__storage_, entry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exit",
        .dataTypeSpecific.className = GPBStringifySymbol(DisplayAnimation),
        .number = AnimationData_FieldNumber_Exit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AnimationData__storage_, exit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "emphasis",
        .dataTypeSpecific.className = GPBStringifySymbol(StyleAnimation),
        .number = AnimationData_FieldNumber_Emphasis,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AnimationData__storage_, emphasis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trigger",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationData_AnimationTrigger),
        .number = AnimationData_FieldNumber_Trigger,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AnimationData__storage_, trigger),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detail",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationData_AnimationDetail),
        .number = AnimationData_FieldNumber_Detail,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AnimationData__storage_, detail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = AnimationData_FieldNumber_ParentId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AnimationData__storage_, parentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnimationData class]
                                     rootClass:[AnimationdataRoot class]
                                          file:AnimationdataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnimationData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum AnimationData_AnimationVariant

GPBEnumDescriptor *AnimationData_AnimationVariant_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Entry\000Exit\000Emphasis\000Path\000";
    static const int32_t values[] = {
        AnimationData_AnimationVariant_Entry,
        AnimationData_AnimationVariant_Exit,
        AnimationData_AnimationVariant_Emphasis,
        AnimationData_AnimationVariant_Path,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AnimationData_AnimationVariant)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AnimationData_AnimationVariant_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AnimationData_AnimationVariant_IsValidValue(int32_t value__) {
  switch (value__) {
    case AnimationData_AnimationVariant_Entry:
    case AnimationData_AnimationVariant_Exit:
    case AnimationData_AnimationVariant_Emphasis:
    case AnimationData_AnimationVariant_Path:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AnimationData_AnimationTrigger

@implementation AnimationData_AnimationTrigger

@dynamic hasStart, start;
@dynamic hasClick, click;

typedef struct AnimationData_AnimationTrigger__storage_ {
  uint32_t _has_storage_[1];
  AnimationData_AnimationTrigger_AnimationStart start;
  AnimationData_AnimationTrigger_AnimationClick *click;
} AnimationData_AnimationTrigger__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.enumDescFunc = AnimationData_AnimationTrigger_AnimationStart_EnumDescriptor,
        .number = AnimationData_AnimationTrigger_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnimationData_AnimationTrigger__storage_, start),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "click",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationData_AnimationTrigger_AnimationClick),
        .number = AnimationData_AnimationTrigger_FieldNumber_Click,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnimationData_AnimationTrigger__storage_, click),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnimationData_AnimationTrigger class]
                                     rootClass:[AnimationdataRoot class]
                                          file:AnimationdataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnimationData_AnimationTrigger__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AnimationData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum AnimationData_AnimationTrigger_AnimationStart

GPBEnumDescriptor *AnimationData_AnimationTrigger_AnimationStart_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Click\000Witheffect\000Aftereffect\000";
    static const int32_t values[] = {
        AnimationData_AnimationTrigger_AnimationStart_Click,
        AnimationData_AnimationTrigger_AnimationStart_Witheffect,
        AnimationData_AnimationTrigger_AnimationStart_Aftereffect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AnimationData_AnimationTrigger_AnimationStart)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AnimationData_AnimationTrigger_AnimationStart_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AnimationData_AnimationTrigger_AnimationStart_IsValidValue(int32_t value__) {
  switch (value__) {
    case AnimationData_AnimationTrigger_AnimationStart_Click:
    case AnimationData_AnimationTrigger_AnimationStart_Witheffect:
    case AnimationData_AnimationTrigger_AnimationStart_Aftereffect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AnimationData_AnimationTrigger_AnimationClick

@implementation AnimationData_AnimationTrigger_AnimationClick

@dynamic hasId_p, id_p;

typedef struct AnimationData_AnimationTrigger_AnimationClick__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} AnimationData_AnimationTrigger_AnimationClick__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = AnimationData_AnimationTrigger_AnimationClick_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnimationData_AnimationTrigger_AnimationClick__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnimationData_AnimationTrigger_AnimationClick class]
                                     rootClass:[AnimationdataRoot class]
                                          file:AnimationdataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnimationData_AnimationTrigger_AnimationClick__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AnimationData_AnimationTrigger)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnimationData_AnimationDetail

@implementation AnimationData_AnimationDetail

@dynamic hasDelay, delay;
@dynamic hasDuration, duration;
@dynamic hasRepeat, repeat;

typedef struct AnimationData_AnimationDetail__storage_ {
  uint32_t _has_storage_[1];
  float delay;
  float duration;
  AnimationData_AnimationDetail_AnimationRepeat *repeat;
} AnimationData_AnimationDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delay",
        .dataTypeSpecific.className = NULL,
        .number = AnimationData_AnimationDetail_FieldNumber_Delay,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnimationData_AnimationDetail__storage_, delay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = AnimationData_AnimationDetail_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnimationData_AnimationDetail__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "repeat",
        .dataTypeSpecific.className = GPBStringifySymbol(AnimationData_AnimationDetail_AnimationRepeat),
        .number = AnimationData_AnimationDetail_FieldNumber_Repeat,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AnimationData_AnimationDetail__storage_, repeat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnimationData_AnimationDetail class]
                                     rootClass:[AnimationdataRoot class]
                                          file:AnimationdataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnimationData_AnimationDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AnimationData)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnimationData_AnimationDetail_AnimationRepeat

@implementation AnimationData_AnimationDetail_AnimationRepeat

@dynamic hasType, type;
@dynamic hasRepeatCount, repeatCount;

typedef struct AnimationData_AnimationDetail_AnimationRepeat__storage_ {
  uint32_t _has_storage_[1];
  AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType type;
  int32_t repeatCount;
} AnimationData_AnimationDetail_AnimationRepeat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_EnumDescriptor,
        .number = AnimationData_AnimationDetail_AnimationRepeat_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnimationData_AnimationDetail_AnimationRepeat__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "repeatCount",
        .dataTypeSpecific.className = NULL,
        .number = AnimationData_AnimationDetail_AnimationRepeat_FieldNumber_RepeatCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnimationData_AnimationDetail_AnimationRepeat__storage_, repeatCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnimationData_AnimationDetail_AnimationRepeat class]
                                     rootClass:[AnimationdataRoot class]
                                          file:AnimationdataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnimationData_AnimationDetail_AnimationRepeat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AnimationData_AnimationDetail)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType

GPBEnumDescriptor *AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Nextclick\000Nextslide\000Repeatcount\000";
    static const int32_t values[] = {
        AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Nextclick,
        AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Nextslide,
        AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Repeatcount,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Nextclick:
    case AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Nextslide:
    case AnimationData_AnimationDetail_AnimationRepeat_AnimationRepeatType_Repeatcount:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
