// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pictureproperties.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Pictureproperties.pbobjc.h"
 #import "Color.pbobjc.h"
 #import "Presetprops.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PicturepropertiesRoot

@implementation PicturepropertiesRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PicturepropertiesRoot_FileDescriptor

static GPBFileDescriptor *PicturepropertiesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PictureProperties

@implementation PictureProperties

@dynamic hasLuminance, luminance;
@dynamic hasColorMode, colorMode;
@dynamic hasColorChange, colorChange;
@dynamic hasPreset, preset;
@dynamic hasAlpha, alpha;
@dynamic hasRotate, rotate;
@dynamic hasFliph, fliph;
@dynamic hasFlipv, flipv;

typedef struct PictureProperties__storage_ {
  uint32_t _has_storage_[1];
  PresetProps preset;
  float alpha;
  int32_t rotate;
  PictureProperties_Luminance *luminance;
  PictureProperties_ColorMode *colorMode;
  PictureProperties_ColorChange *colorChange;
} PictureProperties__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueMessage = nil,
        .core.name = "luminance",
        .core.dataTypeSpecific.className = GPBStringifySymbol(PictureProperties_Luminance),
        .core.number = PictureProperties_FieldNumber_Luminance,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(PictureProperties__storage_, luminance),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "colorMode",
        .core.dataTypeSpecific.className = GPBStringifySymbol(PictureProperties_ColorMode),
        .core.number = PictureProperties_FieldNumber_ColorMode,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(PictureProperties__storage_, colorMode),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "colorChange",
        .core.dataTypeSpecific.className = GPBStringifySymbol(PictureProperties_ColorChange),
        .core.number = PictureProperties_FieldNumber_ColorChange,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(PictureProperties__storage_, colorChange),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = PresetProps_Preset1,
        .core.name = "preset",
        .core.dataTypeSpecific.enumDescFunc = PresetProps_EnumDescriptor,
        .core.number = PictureProperties_FieldNumber_Preset,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(PictureProperties__storage_, preset),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueFloat = 0,
        .core.name = "alpha",
        .core.dataTypeSpecific.className = NULL,
        .core.number = PictureProperties_FieldNumber_Alpha,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(PictureProperties__storage_, alpha),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeFloat,
      },
      {
        .defaultValue.valueInt32 = 0,
        .core.name = "rotate",
        .core.dataTypeSpecific.className = NULL,
        .core.number = PictureProperties_FieldNumber_Rotate,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(PictureProperties__storage_, rotate),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "fliph",
        .core.dataTypeSpecific.className = NULL,
        .core.number = PictureProperties_FieldNumber_Fliph,
        .core.hasIndex = 6,
        .core.offset = 7,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "flipv",
        .core.dataTypeSpecific.className = NULL,
        .core.number = PictureProperties_FieldNumber_Flipv,
        .core.hasIndex = 8,
        .core.offset = 9,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PictureProperties class]
                                     rootClass:[PicturepropertiesRoot class]
                                          file:PicturepropertiesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(PictureProperties__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\t\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PictureProperties_Luminance

@implementation PictureProperties_Luminance

@dynamic hasBrightness, brightness;
@dynamic hasContrast, contrast;

typedef struct PictureProperties_Luminance__storage_ {
  uint32_t _has_storage_[1];
  float brightness;
  float contrast;
} PictureProperties_Luminance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "brightness",
        .dataTypeSpecific.className = NULL,
        .number = PictureProperties_Luminance_FieldNumber_Brightness,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PictureProperties_Luminance__storage_, brightness),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "contrast",
        .dataTypeSpecific.className = NULL,
        .number = PictureProperties_Luminance_FieldNumber_Contrast,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PictureProperties_Luminance__storage_, contrast),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PictureProperties_Luminance class]
                                     rootClass:[PicturepropertiesRoot class]
                                          file:PicturepropertiesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PictureProperties_Luminance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PictureProperties)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PictureProperties_ColorMode

@implementation PictureProperties_ColorMode

@dynamic hasMode, mode;
@dynamic duotoneArray, duotoneArray_Count;
@dynamic hasBilevel, bilevel;

typedef struct PictureProperties_ColorMode__storage_ {
  uint32_t _has_storage_[1];
  PictureProperties_ColorMode_Mode mode;
  float bilevel;
  NSMutableArray *duotoneArray;
} PictureProperties_ColorMode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = PictureProperties_ColorMode_Mode_EnumDescriptor,
        .number = PictureProperties_ColorMode_FieldNumber_Mode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PictureProperties_ColorMode__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "duotoneArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Color),
        .number = PictureProperties_ColorMode_FieldNumber_DuotoneArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PictureProperties_ColorMode__storage_, duotoneArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bilevel",
        .dataTypeSpecific.className = NULL,
        .number = PictureProperties_ColorMode_FieldNumber_Bilevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PictureProperties_ColorMode__storage_, bilevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PictureProperties_ColorMode class]
                                     rootClass:[PicturepropertiesRoot class]
                                          file:PicturepropertiesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PictureProperties_ColorMode__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PictureProperties)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PictureProperties_ColorMode_Mode

GPBEnumDescriptor *PictureProperties_ColorMode_Mode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Grayscale\000Bilevel\000Sepia\000Duotone\000";
    static const int32_t values[] = {
        PictureProperties_ColorMode_Mode_None,
        PictureProperties_ColorMode_Mode_Grayscale,
        PictureProperties_ColorMode_Mode_Bilevel,
        PictureProperties_ColorMode_Mode_Sepia,
        PictureProperties_ColorMode_Mode_Duotone,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PictureProperties_ColorMode_Mode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PictureProperties_ColorMode_Mode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PictureProperties_ColorMode_Mode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PictureProperties_ColorMode_Mode_None:
    case PictureProperties_ColorMode_Mode_Grayscale:
    case PictureProperties_ColorMode_Mode_Bilevel:
    case PictureProperties_ColorMode_Mode_Sepia:
    case PictureProperties_ColorMode_Mode_Duotone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PictureProperties_ColorChange

@implementation PictureProperties_ColorChange

@dynamic hasFrom, from;
@dynamic hasTo, to;

typedef struct PictureProperties_ColorChange__storage_ {
  uint32_t _has_storage_[1];
  Color *from;
  Color *to;
} PictureProperties_ColorChange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(Color),
        .number = PictureProperties_ColorChange_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PictureProperties_ColorChange__storage_, from),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(Color),
        .number = PictureProperties_ColorChange_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PictureProperties_ColorChange__storage_, to),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PictureProperties_ColorChange class]
                                     rootClass:[PicturepropertiesRoot class]
                                          file:PicturepropertiesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PictureProperties_ColorChange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(PictureProperties)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
