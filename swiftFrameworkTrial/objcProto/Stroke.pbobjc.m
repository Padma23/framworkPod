// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stroke.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Stroke.pbobjc.h"
 #import "Fill.pbobjc.h"
 #import "Marker.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - StrokeRoot

@implementation StrokeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - StrokeRoot_FileDescriptor

static GPBFileDescriptor *StrokeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Stroke

@implementation Stroke

@dynamic hasType, type;
@dynamic hasWidth, width;
@dynamic hasJointype, jointype;
@dynamic hasFill, fill;
@dynamic hasCaptype, captype;
@dynamic hasHeadend, headend;
@dynamic hasTailend, tailend;

typedef struct Stroke__storage_ {
  uint32_t _has_storage_[1];
  Stroke_StrokeType type;
  float width;
  Stroke_JoinType jointype;
  Stroke_CapType captype;
  Fill *fill;
  Marker *headend;
  Marker *tailend;
} Stroke__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = Stroke_StrokeType_Solid,
        .core.name = "type",
        .core.dataTypeSpecific.enumDescFunc = Stroke_StrokeType_EnumDescriptor,
        .core.number = Stroke_FieldNumber_Type,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(Stroke__storage_, type),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueFloat = 0,
        .core.name = "width",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Stroke_FieldNumber_Width,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(Stroke__storage_, width),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeFloat,
      },
      {
        .defaultValue.valueEnum = Stroke_JoinType_Miter,
        .core.name = "jointype",
        .core.dataTypeSpecific.enumDescFunc = Stroke_JoinType_EnumDescriptor,
        .core.number = Stroke_FieldNumber_Jointype,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(Stroke__storage_, jointype),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "fill",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Fill),
        .core.number = Stroke_FieldNumber_Fill,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(Stroke__storage_, fill),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = Stroke_CapType_Flat,
        .core.name = "captype",
        .core.dataTypeSpecific.enumDescFunc = Stroke_CapType_EnumDescriptor,
        .core.number = Stroke_FieldNumber_Captype,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(Stroke__storage_, captype),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "headend",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Marker),
        .core.number = Stroke_FieldNumber_Headend,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(Stroke__storage_, headend),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "tailend",
        .core.dataTypeSpecific.className = GPBStringifySymbol(Marker),
        .core.number = Stroke_FieldNumber_Tailend,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(Stroke__storage_, tailend),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Stroke class]
                                     rootClass:[StrokeRoot class]
                                          file:StrokeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(Stroke__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Stroke_StrokeType

GPBEnumDescriptor *Stroke_StrokeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Solid\000Dash\000RoundDot\000SquareDot\000LongDash\000D"
        "ashdot\000LongDashDot\000LongDashDotDot\000";
    static const int32_t values[] = {
        Stroke_StrokeType_Solid,
        Stroke_StrokeType_Dash,
        Stroke_StrokeType_RoundDot,
        Stroke_StrokeType_SquareDot,
        Stroke_StrokeType_LongDash,
        Stroke_StrokeType_Dashdot,
        Stroke_StrokeType_LongDashDot,
        Stroke_StrokeType_LongDashDotDot,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Stroke_StrokeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Stroke_StrokeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Stroke_StrokeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Stroke_StrokeType_Solid:
    case Stroke_StrokeType_Dash:
    case Stroke_StrokeType_RoundDot:
    case Stroke_StrokeType_SquareDot:
    case Stroke_StrokeType_LongDash:
    case Stroke_StrokeType_Dashdot:
    case Stroke_StrokeType_LongDashDot:
    case Stroke_StrokeType_LongDashDotDot:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Stroke_JoinType

GPBEnumDescriptor *Stroke_JoinType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Round\000Bevel\000Miter\000";
    static const int32_t values[] = {
        Stroke_JoinType_Round,
        Stroke_JoinType_Bevel,
        Stroke_JoinType_Miter,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Stroke_JoinType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Stroke_JoinType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Stroke_JoinType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Stroke_JoinType_Round:
    case Stroke_JoinType_Bevel:
    case Stroke_JoinType_Miter:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Stroke_CapType

GPBEnumDescriptor *Stroke_CapType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Flat\000Cround\000Square\000";
    static const int32_t values[] = {
        Stroke_CapType_Flat,
        Stroke_CapType_Cround,
        Stroke_CapType_Square,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Stroke_CapType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Stroke_CapType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Stroke_CapType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Stroke_CapType_Flat:
    case Stroke_CapType_Cround:
    case Stroke_CapType_Square:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
