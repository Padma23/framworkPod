// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marker.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Marker.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MarkerRoot

@implementation MarkerRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MarkerRoot_FileDescriptor

static GPBFileDescriptor *MarkerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Marker

@implementation Marker

@dynamic hasType, type;
@dynamic hasWidth, width;
@dynamic hasHeight, height;

typedef struct Marker__storage_ {
  uint32_t _has_storage_[1];
  Marker_MarkerType type;
  Marker_Size width;
  Marker_Size height;
} Marker__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = Marker_MarkerType_None,
        .core.name = "type",
        .core.dataTypeSpecific.enumDescFunc = Marker_MarkerType_EnumDescriptor,
        .core.number = Marker_FieldNumber_Type,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(Marker__storage_, type),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = Marker_Size_Medium,
        .core.name = "width",
        .core.dataTypeSpecific.enumDescFunc = Marker_Size_EnumDescriptor,
        .core.number = Marker_FieldNumber_Width,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(Marker__storage_, width),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = Marker_Size_Medium,
        .core.name = "height",
        .core.dataTypeSpecific.enumDescFunc = Marker_Size_EnumDescriptor,
        .core.number = Marker_FieldNumber_Height,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(Marker__storage_, height),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Marker class]
                                     rootClass:[MarkerRoot class]
                                          file:MarkerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(Marker__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Marker_MarkerType

GPBEnumDescriptor *Marker_MarkerType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Open\000Block\000Classic\000Diamond\000Oval\000";
    static const int32_t values[] = {
        Marker_MarkerType_None,
        Marker_MarkerType_Open,
        Marker_MarkerType_Block,
        Marker_MarkerType_Classic,
        Marker_MarkerType_Diamond,
        Marker_MarkerType_Oval,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Marker_MarkerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Marker_MarkerType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Marker_MarkerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Marker_MarkerType_None:
    case Marker_MarkerType_Open:
    case Marker_MarkerType_Block:
    case Marker_MarkerType_Classic:
    case Marker_MarkerType_Diamond:
    case Marker_MarkerType_Oval:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Marker_Size

GPBEnumDescriptor *Marker_Size_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Narrow\000Medium\000Wide\000";
    static const int32_t values[] = {
        Marker_Size_Narrow,
        Marker_Size_Medium,
        Marker_Size_Wide,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Marker_Size)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Marker_Size_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Marker_Size_IsValidValue(int32_t value__) {
  switch (value__) {
    case Marker_Size_Narrow:
    case Marker_Size_Medium:
    case Marker_Size_Wide:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
