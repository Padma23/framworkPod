// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: themedifferences.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Themedifferences.pbobjc.h"
 #import "Shapeobject.pbobjc.h"
 #import "Slidetype.pbobjc.h"
 #import "Fontscheme.pbobjc.h"
 #import "Colorscheme.pbobjc.h"
 #import "Fillscheme.pbobjc.h"
 #import "Strokescheme.pbobjc.h"
 #import "Relationship.pbobjc.h"
 #import "Background.pbobjc.h"
 #import "Colormap.pbobjc.h"
 #import "Themesupercede.pbobjc.h"
 #import "Hidemaster.pbobjc.h"
 #import "Textstyle.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ThemedifferencesRoot

@implementation ThemedifferencesRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ThemedifferencesRoot_FileDescriptor

static GPBFileDescriptor *ThemedifferencesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ThemeDifferences

@implementation ThemeDifferences

@dynamic hasSchemeDifferences, schemeDifferences;
@dynamic masterDifferencesArray, masterDifferencesArray_Count;
@dynamic hasTextStyle, textStyle;

typedef struct ThemeDifferences__storage_ {
  uint32_t _has_storage_[1];
  ThemeDifferences_SchemeDifferences *schemeDifferences;
  NSMutableArray *masterDifferencesArray;
  TextStyle *textStyle;
} ThemeDifferences__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "schemeDifferences",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeDifferences_SchemeDifferences),
        .number = ThemeDifferences_FieldNumber_SchemeDifferences,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThemeDifferences__storage_, schemeDifferences),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "masterDifferencesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeDifferences_MasterDifferences),
        .number = ThemeDifferences_FieldNumber_MasterDifferencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ThemeDifferences__storage_, masterDifferencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "textStyle",
        .dataTypeSpecific.className = GPBStringifySymbol(TextStyle),
        .number = ThemeDifferences_FieldNumber_TextStyle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ThemeDifferences__storage_, textStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThemeDifferences class]
                                     rootClass:[ThemedifferencesRoot class]
                                          file:ThemedifferencesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThemeDifferences__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\021\000\002\000masterDifferences\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ThemeDifferences_SchemeDifferences

@implementation ThemeDifferences_SchemeDifferences

@dynamic hasFontScheme, fontScheme;
@dynamic hasColorScheme, colorScheme;
@dynamic hasBgFillScheme, bgFillScheme;
@dynamic hasFillScheme, fillScheme;
@dynamic hasStrokeScheme, strokeScheme;

typedef struct ThemeDifferences_SchemeDifferences__storage_ {
  uint32_t _has_storage_[1];
  FontScheme *fontScheme;
  ColorScheme *colorScheme;
  FillScheme *bgFillScheme;
  FillScheme *fillScheme;
  StrokeScheme *strokeScheme;
} ThemeDifferences_SchemeDifferences__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fontScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(FontScheme),
        .number = ThemeDifferences_SchemeDifferences_FieldNumber_FontScheme,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThemeDifferences_SchemeDifferences__storage_, fontScheme),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "colorScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorScheme),
        .number = ThemeDifferences_SchemeDifferences_FieldNumber_ColorScheme,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ThemeDifferences_SchemeDifferences__storage_, colorScheme),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bgFillScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(FillScheme),
        .number = ThemeDifferences_SchemeDifferences_FieldNumber_BgFillScheme,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ThemeDifferences_SchemeDifferences__storage_, bgFillScheme),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fillScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(FillScheme),
        .number = ThemeDifferences_SchemeDifferences_FieldNumber_FillScheme,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ThemeDifferences_SchemeDifferences__storage_, fillScheme),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "strokeScheme",
        .dataTypeSpecific.className = GPBStringifySymbol(StrokeScheme),
        .number = ThemeDifferences_SchemeDifferences_FieldNumber_StrokeScheme,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ThemeDifferences_SchemeDifferences__storage_, strokeScheme),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThemeDifferences_SchemeDifferences class]
                                     rootClass:[ThemedifferencesRoot class]
                                          file:ThemedifferencesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThemeDifferences_SchemeDifferences__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\n\000\003\013\000\004\014\000\005\n\000\006\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ThemeDifferences)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ThemeDifferences_MasterDifferences

@implementation ThemeDifferences_MasterDifferences

@dynamic hasId_p, id_p;
@dynamic hasType, type;
@dynamic shapeDifferencesArray, shapeDifferencesArray_Count;
@dynamic hasTheme, theme;
@dynamic hasBg, bg;
@dynamic hasColorMap, colorMap;
@dynamic hasHideMaster, hideMaster;

typedef struct ThemeDifferences_MasterDifferences__storage_ {
  uint32_t _has_storage_[1];
  SlideType type;
  NSString *id_p;
  NSMutableArray *shapeDifferencesArray;
  ThemeSupercede *theme;
  Background *bg;
  ColorMap *colorMap;
  HideMaster *hideMaster;
} ThemeDifferences_MasterDifferences__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ThemeDifferences_MasterDifferences_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = SlideType_EnumDescriptor,
        .number = ThemeDifferences_MasterDifferences_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shapeDifferencesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeDifferences_MasterDifferences_ShapeDifferences),
        .number = ThemeDifferences_MasterDifferences_FieldNumber_ShapeDifferencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences__storage_, shapeDifferencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "theme",
        .dataTypeSpecific.className = GPBStringifySymbol(ThemeSupercede),
        .number = ThemeDifferences_MasterDifferences_FieldNumber_Theme,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences__storage_, theme),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bg",
        .dataTypeSpecific.className = GPBStringifySymbol(Background),
        .number = ThemeDifferences_MasterDifferences_FieldNumber_Bg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences__storage_, bg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "colorMap",
        .dataTypeSpecific.className = GPBStringifySymbol(ColorMap),
        .number = ThemeDifferences_MasterDifferences_FieldNumber_ColorMap,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences__storage_, colorMap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hideMaster",
        .dataTypeSpecific.className = GPBStringifySymbol(HideMaster),
        .number = ThemeDifferences_MasterDifferences_FieldNumber_HideMaster,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences__storage_, hideMaster),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThemeDifferences_MasterDifferences class]
                                     rootClass:[ThemedifferencesRoot class]
                                          file:ThemedifferencesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThemeDifferences_MasterDifferences__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\000shapeDifferences\000\006\010\000\007\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ThemeDifferences)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ThemeDifferences_MasterDifferences_ShapeDifferences

@implementation ThemeDifferences_MasterDifferences_ShapeDifferences

@dynamic hasShapeId, shapeId;
@dynamic hasShapeObject, shapeObject;
@dynamic hasRemoved, removed;

typedef struct ThemeDifferences_MasterDifferences_ShapeDifferences__storage_ {
  uint32_t _has_storage_[1];
  NSString *shapeId;
  ShapeObject *shapeObject;
} ThemeDifferences_MasterDifferences_ShapeDifferences__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shapeId",
        .dataTypeSpecific.className = NULL,
        .number = ThemeDifferences_MasterDifferences_ShapeDifferences_FieldNumber_ShapeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences_ShapeDifferences__storage_, shapeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shapeObject",
        .dataTypeSpecific.className = GPBStringifySymbol(ShapeObject),
        .number = ThemeDifferences_MasterDifferences_ShapeDifferences_FieldNumber_ShapeObject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ThemeDifferences_MasterDifferences_ShapeDifferences__storage_, shapeObject),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "removed",
        .dataTypeSpecific.className = NULL,
        .number = ThemeDifferences_MasterDifferences_ShapeDifferences_FieldNumber_Removed,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThemeDifferences_MasterDifferences_ShapeDifferences class]
                                     rootClass:[ThemedifferencesRoot class]
                                          file:ThemedifferencesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThemeDifferences_MasterDifferences_ShapeDifferences__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ThemeDifferences_MasterDifferences)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
