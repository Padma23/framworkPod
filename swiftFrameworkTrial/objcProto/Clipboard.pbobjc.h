// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/clipboard.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ClipBoard_Clip;
@class ClipBoard_ClipData;
@class ClipBoard_ClipData_Dependence;
@class ClipBoard_ClipData_MasterNode;
@class ClipBoard_ClipData_NodeValue;
@class ClipBoard_ClipData_RelatedData;
@class ClipBoard_ClipData_SlideNode;
@class ClipBoard_ClipDetail;
@class PicProperties;
@class TableStyle;
GPB_ENUM_FWD_DECLARE(ShapeNodeType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ClipBoard_ClipData_ClipType

typedef GPB_ENUM(ClipBoard_ClipData_ClipType) {
  ClipBoard_ClipData_ClipType_Shape = 0,
  ClipBoard_ClipData_ClipType_Slide = 1,
  ClipBoard_ClipData_ClipType_Master = 2,
  ClipBoard_ClipData_ClipType_Text = 3,
};

GPBEnumDescriptor *ClipBoard_ClipData_ClipType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ClipBoard_ClipData_ClipType_IsValidValue(int32_t value);

#pragma mark - ClipboardRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ClipboardRoot : GPBRootObject
@end

#pragma mark - ClipBoard

typedef GPB_ENUM(ClipBoard_FieldNumber) {
  ClipBoard_FieldNumber_ClipsArray = 1,
};

@interface ClipBoard : GPBMessage

/** Not more than n numbers , n = value for key cb_max in AccountSettings Table. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ClipBoard_Clip*> *clipsArray;
/** The number of items in @c clipsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger clipsArray_Count;

@end

#pragma mark - ClipBoard_Clip

typedef GPB_ENUM(ClipBoard_Clip_FieldNumber) {
  ClipBoard_Clip_FieldNumber_Data_p = 1,
  ClipBoard_Clip_FieldNumber_Detail = 2,
};

@interface ClipBoard_Clip : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipDetail *detail;
/** Test to see if @c detail has been set. */
@property(nonatomic, readwrite) BOOL hasDetail;

@end

#pragma mark - ClipBoard_ClipDetail

typedef GPB_ENUM(ClipBoard_ClipDetail_FieldNumber) {
  ClipBoard_ClipDetail_FieldNumber_DocId = 1,
  ClipBoard_ClipDetail_FieldNumber_Owner = 2,
  ClipBoard_ClipDetail_FieldNumber_SlideId = 3,
};

/**
 * Details about clip
 **/
@interface ClipBoard_ClipDetail : GPBMessage

/** Document ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *docId;
/** Test to see if @c docId has been set. */
@property(nonatomic, readwrite) BOOL hasDocId;

/** Owner of the document */
@property(nonatomic, readwrite, copy, null_resettable) NSString *owner;
/** Test to see if @c owner has been set. */
@property(nonatomic, readwrite) BOOL hasOwner;

/** Slide ID. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *slideId;
/** Test to see if @c slideId has been set. */
@property(nonatomic, readwrite) BOOL hasSlideId;

@end

#pragma mark - ClipBoard_ClipData

typedef GPB_ENUM(ClipBoard_ClipData_FieldNumber) {
  ClipBoard_ClipData_FieldNumber_Type = 1,
  ClipBoard_ClipData_FieldNumber_Shape = 2,
  ClipBoard_ClipData_FieldNumber_SlidesArray = 3,
  ClipBoard_ClipData_FieldNumber_MastersArray = 4,
  ClipBoard_ClipData_FieldNumber_Text = 5,
};

@interface ClipBoard_ClipData : GPBMessage

@property(nonatomic, readwrite) ClipBoard_ClipData_ClipType type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipData_NodeValue *shape;
/** Test to see if @c shape has been set. */
@property(nonatomic, readwrite) BOOL hasShape;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ClipBoard_ClipData_SlideNode*> *slidesArray;
/** The number of items in @c slidesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger slidesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ClipBoard_ClipData_MasterNode*> *mastersArray;
/** The number of items in @c mastersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger mastersArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipData_NodeValue *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@end

#pragma mark - ClipBoard_ClipData_NodeValue

typedef GPB_ENUM(ClipBoard_ClipData_NodeValue_FieldNumber) {
  ClipBoard_ClipData_NodeValue_FieldNumber_Id_p = 1,
  ClipBoard_ClipData_NodeValue_FieldNumber_DependsArray = 2,
  ClipBoard_ClipData_NodeValue_FieldNumber_Related = 3,
};

@interface ClipBoard_ClipData_NodeValue : GPBMessage

/** Clipboard File ID , can contain ShapeClips / Slide / TextClips , refer shapeclips.proto , textclips.proto */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** Dependent Files , ex : pictures , spreadsheet */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ClipBoard_ClipData_Dependence*> *dependsArray;
/** The number of items in @c dependsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dependsArray_Count;

/** Any Related data. */
@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipData_RelatedData *related;
/** Test to see if @c related has been set. */
@property(nonatomic, readwrite) BOOL hasRelated;

@end

#pragma mark - ClipBoard_ClipData_RelatedData

typedef GPB_ENUM(ClipBoard_ClipData_RelatedData_FieldNumber) {
  ClipBoard_ClipData_RelatedData_FieldNumber_TableStylesArray = 1,
};

@interface ClipBoard_ClipData_RelatedData : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TableStyle*> *tableStylesArray;
/** The number of items in @c tableStylesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tableStylesArray_Count;

@end

#pragma mark - ClipBoard_ClipData_Dependence

typedef GPB_ENUM(ClipBoard_ClipData_Dependence_FieldNumber) {
  ClipBoard_ClipData_Dependence_FieldNumber_Type = 1,
  ClipBoard_ClipData_Dependence_FieldNumber_Id_p = 2,
  ClipBoard_ClipData_Dependence_FieldNumber_DependentId = 3,
  ClipBoard_ClipData_Dependence_FieldNumber_PicProps = 4,
  ClipBoard_ClipData_Dependence_FieldNumber_IsSpreadsheet = 5,
};

/**
 * Used for Picture and spreadsheet files.
 **/
@interface ClipBoard_ClipData_Dependence : GPBMessage

@property(nonatomic, readwrite) enum ShapeNodeType type;

@property(nonatomic, readwrite) BOOL hasType;
/** Clipboard File ID. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** The Unique ID of the Shape , not the Primary Key in DB. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dependentId;
/** Test to see if @c dependentId has been set. */
@property(nonatomic, readwrite) BOOL hasDependentId;

/** Used to maintain the original properties of image. */
@property(nonatomic, readwrite, strong, null_resettable) PicProperties *picProps;
/** Test to see if @c picProps has been set. */
@property(nonatomic, readwrite) BOOL hasPicProps;

@property(nonatomic, readwrite) BOOL isSpreadsheet;

@property(nonatomic, readwrite) BOOL hasIsSpreadsheet;
@end

#pragma mark - ClipBoard_ClipData_SlideNode

typedef GPB_ENUM(ClipBoard_ClipData_SlideNode_FieldNumber) {
  ClipBoard_ClipData_SlideNode_FieldNumber_Slide = 1,
  ClipBoard_ClipData_SlideNode_FieldNumber_Layout = 2,
};

@interface ClipBoard_ClipData_SlideNode : GPBMessage

/** Contains Slide IDs */
@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipData_NodeValue *slide;
/** Test to see if @c slide has been set. */
@property(nonatomic, readwrite) BOOL hasSlide;

/** If the slide follows Custom Layout , the layout will be copied , LayoutID. */
@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipData_NodeValue *layout;
/** Test to see if @c layout has been set. */
@property(nonatomic, readwrite) BOOL hasLayout;

@end

#pragma mark - ClipBoard_ClipData_MasterNode

typedef GPB_ENUM(ClipBoard_ClipData_MasterNode_FieldNumber) {
  ClipBoard_ClipData_MasterNode_FieldNumber_Master = 1,
  ClipBoard_ClipData_MasterNode_FieldNumber_LayoutsArray = 2,
};

@interface ClipBoard_ClipData_MasterNode : GPBMessage

/** Contains Master ID */
@property(nonatomic, readwrite, strong, null_resettable) ClipBoard_ClipData_NodeValue *master;
/** Test to see if @c master has been set. */
@property(nonatomic, readwrite) BOOL hasMaster;

/** Container Layout IDs */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ClipBoard_ClipData_NodeValue*> *layoutsArray;
/** The number of items in @c layoutsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger layoutsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
