// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/slideplaceholders.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Slideplaceholders.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SlideplaceholdersRoot

@implementation SlideplaceholdersRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SlideplaceholdersRoot_FileDescriptor

static GPBFileDescriptor *SlideplaceholdersRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - SlidePlaceHolders

@implementation SlidePlaceHolders

@dynamic phIdArray, phIdArray_Count;

typedef struct SlidePlaceHolders__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *phIdArray;
} SlidePlaceHolders__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phIdArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SlidePlaceHolders_LayoutPlaceHolderId),
        .number = SlidePlaceHolders_FieldNumber_PhIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SlidePlaceHolders__storage_, phIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SlidePlaceHolders class]
                                     rootClass:[SlideplaceholdersRoot class]
                                          file:SlideplaceholdersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SlidePlaceHolders__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000phId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SlidePlaceHolders_LayoutPlaceHolderId

@implementation SlidePlaceHolders_LayoutPlaceHolderId

@dynamic hasLayout, layout;
@dynamic hasIdx, idx;
@dynamic hasUid, uid;

typedef struct SlidePlaceHolders_LayoutPlaceHolderId__storage_ {
  uint32_t _has_storage_[1];
  int32_t idx;
  NSString *layout;
  NSString *uid;
} SlidePlaceHolders_LayoutPlaceHolderId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "layout",
        .dataTypeSpecific.className = NULL,
        .number = SlidePlaceHolders_LayoutPlaceHolderId_FieldNumber_Layout,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SlidePlaceHolders_LayoutPlaceHolderId__storage_, layout),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idx",
        .dataTypeSpecific.className = NULL,
        .number = SlidePlaceHolders_LayoutPlaceHolderId_FieldNumber_Idx,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SlidePlaceHolders_LayoutPlaceHolderId__storage_, idx),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = SlidePlaceHolders_LayoutPlaceHolderId_FieldNumber_Uid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SlidePlaceHolders_LayoutPlaceHolderId__storage_, uid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SlidePlaceHolders_LayoutPlaceHolderId class]
                                     rootClass:[SlideplaceholdersRoot class]
                                          file:SlideplaceholdersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SlidePlaceHolders_LayoutPlaceHolderId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(SlidePlaceHolders)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
