// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hyperlink.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class HyperLink_CustomShowLink;
@class HyperLink_Email;
@class HyperLink_LinkSlide;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum HyperLink_LinkType

typedef GPB_ENUM(HyperLink_LinkType) {
  /** no link */
  HyperLink_LinkType_None = 0,

  /** url link */
  HyperLink_LinkType_Link = 1,

  /** linked to email */
  HyperLink_LinkType_Email = 2,

  /** linked to a slide */
  HyperLink_LinkType_Slide = 3,

  /** Linked to a Custom Show. */
  HyperLink_LinkType_Custom = 4,
};

GPBEnumDescriptor *HyperLink_LinkType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL HyperLink_LinkType_IsValidValue(int32_t value);

#pragma mark - Enum HyperLink_LinkOpenType

typedef GPB_ENUM(HyperLink_LinkOpenType) {
  /** open in new window. */
  HyperLink_LinkOpenType_New = 1,

  /** open in self. */
  HyperLink_LinkOpenType_Self = 2,
};

GPBEnumDescriptor *HyperLink_LinkOpenType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL HyperLink_LinkOpenType_IsValidValue(int32_t value);

#pragma mark - Enum HyperLink_LinkSlide_LinkSlideType

typedef GPB_ENUM(HyperLink_LinkSlide_LinkSlideType) {
  /** fixed to a particular slide , will point to the slide unique id. */
  HyperLink_LinkSlide_LinkSlideType_Fixed = 1,

  /** linked dynamically to a slide, meaning always linked to the previous slide etc... */
  HyperLink_LinkSlide_LinkSlideType_Dynamic = 2,
};

GPBEnumDescriptor *HyperLink_LinkSlide_LinkSlideType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL HyperLink_LinkSlide_LinkSlideType_IsValidValue(int32_t value);

#pragma mark - Enum HyperLink_LinkSlide_DynamicSlideType

typedef GPB_ENUM(HyperLink_LinkSlide_DynamicSlideType) {
  /** next slide */
  HyperLink_LinkSlide_DynamicSlideType_Next = 1,

  /** previous slide */
  HyperLink_LinkSlide_DynamicSlideType_Previous = 2,

  /** first slide */
  HyperLink_LinkSlide_DynamicSlideType_First = 3,

  /** last slide */
  HyperLink_LinkSlide_DynamicSlideType_Last = 4,

  /** last viewed slide. */
  HyperLink_LinkSlide_DynamicSlideType_Lastviewed = 5,
};

GPBEnumDescriptor *HyperLink_LinkSlide_DynamicSlideType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL HyperLink_LinkSlide_DynamicSlideType_IsValidValue(int32_t value);

#pragma mark - HyperlinkRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface HyperlinkRoot : GPBRootObject
@end

#pragma mark - HyperLink

typedef GPB_ENUM(HyperLink_FieldNumber) {
  HyperLink_FieldNumber_Type = 1,
  HyperLink_FieldNumber_Link = 2,
  HyperLink_FieldNumber_Email = 3,
  HyperLink_FieldNumber_Slide = 4,
  HyperLink_FieldNumber_Custom = 5,
  HyperLink_FieldNumber_Tooltip = 6,
  HyperLink_FieldNumber_Opentype = 7,
};

@interface HyperLink : GPBMessage

/** type of link */
@property(nonatomic, readwrite) HyperLink_LinkType type;

@property(nonatomic, readwrite) BOOL hasType;
/** <regex name="url" value="^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\:\\'\\/\\\\\\+=&amp;%\\$#_]*)?$"/> */
@property(nonatomic, readwrite, copy, null_resettable) NSString *link;
/** Test to see if @c link has been set. */
@property(nonatomic, readwrite) BOOL hasLink;

/** email address link */
@property(nonatomic, readwrite, strong, null_resettable) HyperLink_Email *email;
/** Test to see if @c email has been set. */
@property(nonatomic, readwrite) BOOL hasEmail;

/** linked to a slide. */
@property(nonatomic, readwrite, strong, null_resettable) HyperLink_LinkSlide *slide;
/** Test to see if @c slide has been set. */
@property(nonatomic, readwrite) BOOL hasSlide;

/** Linked to a Custom Show. */
@property(nonatomic, readwrite, strong, null_resettable) HyperLink_CustomShowLink *custom;
/** Test to see if @c custom has been set. */
@property(nonatomic, readwrite) BOOL hasCustom;

/** <regex name="document_name" value="[0-9a-zA-Z_~`#%&amp;\\^\\*\\(\\)\\{\\}\\[\\]\\+\\*\\|\\=\\-\\.\\$\@\\?\\,\\:;\\'\\/\\!\\P{InBasicLatin}\\s]+"/> */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tooltip;
/** Test to see if @c tooltip has been set. */
@property(nonatomic, readwrite) BOOL hasTooltip;

@property(nonatomic, readwrite) HyperLink_LinkOpenType opentype;

@property(nonatomic, readwrite) BOOL hasOpentype;
@end

#pragma mark - HyperLink_Email

typedef GPB_ENUM(HyperLink_Email_FieldNumber) {
  HyperLink_Email_FieldNumber_Address = 1,
  HyperLink_Email_FieldNumber_Subject = 2,
};

@interface HyperLink_Email : GPBMessage

/** <regex name="email" value="^[a-zA-Z0-9]([\\w\\-\\.\\+\\']*)\@([\\w\\-\\.]*)(\\.[a-zA-Z]{2,8}(\\.[a-zA-Z]{2}){0,2})$"/> */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;
/** Test to see if @c address has been set. */
@property(nonatomic, readwrite) BOOL hasAddress;

/** <regex name="document_name" value="[0-9a-zA-Z_~`#%&amp;\\^\\*\\(\\)\\{\\}\\[\\]\\+\\*\\|\\=\\-\\.\\$\@\\?\\,\\:;\\'\\/\\!\\P{InBasicLatin}\\s]+"/> */
@property(nonatomic, readwrite, copy, null_resettable) NSString *subject;
/** Test to see if @c subject has been set. */
@property(nonatomic, readwrite) BOOL hasSubject;

@end

#pragma mark - HyperLink_LinkSlide

typedef GPB_ENUM(HyperLink_LinkSlide_FieldNumber) {
  HyperLink_LinkSlide_FieldNumber_Type = 1,
  HyperLink_LinkSlide_FieldNumber_Fixed = 2,
  HyperLink_LinkSlide_FieldNumber_Dynamic = 3,
};

@interface HyperLink_LinkSlide : GPBMessage

/** slide link type */
@property(nonatomic, readwrite) HyperLink_LinkSlide_LinkSlideType type;

@property(nonatomic, readwrite) BOOL hasType;
/** <regex name="mathuuid"  value="^[a-f0-9A-F]{8}-[a-f0-9A-F]{4}-[a-f0-9A-F]{4}-[a-f0-9A-F]{4}-[a-f0-9A-F]{12}$" /> */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fixed;
/** Test to see if @c fixed has been set. */
@property(nonatomic, readwrite) BOOL hasFixed;

/** dynamic link */
@property(nonatomic, readwrite) HyperLink_LinkSlide_DynamicSlideType dynamic;

@property(nonatomic, readwrite) BOOL hasDynamic;
@end

#pragma mark - HyperLink_CustomShowLink

typedef GPB_ENUM(HyperLink_CustomShowLink_FieldNumber) {
  HyperLink_CustomShowLink_FieldNumber_Id_p = 1,
  HyperLink_CustomShowLink_FieldNumber_Return_p = 2,
};

@interface HyperLink_CustomShowLink : GPBMessage

/** <regex name="mathuuid"  value="^[a-f0-9A-F]{8}-[a-f0-9A-F]{4}-[a-f0-9A-F]{4}-[a-f0-9A-F]{4}-[a-f0-9A-F]{12}$" /> */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

/** Return to slideshow at the end of Custom show. */
@property(nonatomic, readwrite) BOOL return_p;

@property(nonatomic, readwrite) BOOL hasReturn_p;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
