// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: picturevalue.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Picturevalue.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PicturevalueRoot

@implementation PicturevalueRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PicturevalueRoot_FileDescriptor

static GPBFileDescriptor *PicturevalueRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PictureValue

@implementation PictureValue

@dynamic hasId_p, id_p;
@dynamic hasType, type;
@dynamic hasURL, URL;
@dynamic hasPictureName, pictureName;
@dynamic hasRelId, relId;

typedef struct PictureValue__storage_ {
  uint32_t _has_storage_[1];
  PictureValue_PictureType type;
  NSString *id_p;
  NSString *URL;
  NSString *pictureName;
  NSString *relId;
} PictureValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PictureValue_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PictureValue__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PictureValue_PictureType_EnumDescriptor,
        .number = PictureValue_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PictureValue__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PictureValue_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PictureValue__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pictureName",
        .dataTypeSpecific.className = NULL,
        .number = PictureValue_FieldNumber_PictureName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PictureValue__storage_, pictureName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relId",
        .dataTypeSpecific.className = NULL,
        .number = PictureValue_FieldNumber_RelId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PictureValue__storage_, relId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PictureValue class]
                                     rootClass:[PicturevalueRoot class]
                                          file:PicturevalueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PictureValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003!!!\000\004\013\000\005\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PictureValue_PictureType

GPBEnumDescriptor *PictureValue_PictureType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Userdefined\000Themebg\000Clipart\000Texture\000Exte"
        "rnal\000Placeholder\000";
    static const int32_t values[] = {
        PictureValue_PictureType_Userdefined,
        PictureValue_PictureType_Themebg,
        PictureValue_PictureType_Clipart,
        PictureValue_PictureType_Texture,
        PictureValue_PictureType_External,
        PictureValue_PictureType_Placeholder,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PictureValue_PictureType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PictureValue_PictureType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PictureValue_PictureType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PictureValue_PictureType_Userdefined:
    case PictureValue_PictureType_Themebg:
    case PictureValue_PictureType_Clipart:
    case PictureValue_PictureType_Texture:
    case PictureValue_PictureType_External:
    case PictureValue_PictureType_Placeholder:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
