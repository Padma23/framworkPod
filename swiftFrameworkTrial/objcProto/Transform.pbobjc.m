// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Transform.pbobjc.h"
 #import "Dimension.pbobjc.h"
 #import "Position.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TransformRoot

@implementation TransformRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TransformRoot_FileDescriptor

static GPBFileDescriptor *TransformRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Transform

@implementation Transform

@dynamic hasRotate, rotate;
@dynamic hasFliph, fliph;
@dynamic hasFlipv, flipv;
@dynamic hasDim, dim;
@dynamic hasPos, pos;
@dynamic hasChDim, chDim;
@dynamic hasChPos, chPos;

typedef struct Transform__storage_ {
  uint32_t _has_storage_[1];
  int32_t rotate;
  Dimension *dim;
  Position *pos;
  Dimension *chDim;
  Position *chPos;
} Transform__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rotate",
        .dataTypeSpecific.className = NULL,
        .number = Transform_FieldNumber_Rotate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transform__storage_, rotate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fliph",
        .dataTypeSpecific.className = NULL,
        .number = Transform_FieldNumber_Fliph,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "flipv",
        .dataTypeSpecific.className = NULL,
        .number = Transform_FieldNumber_Flipv,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dim",
        .dataTypeSpecific.className = GPBStringifySymbol(Dimension),
        .number = Transform_FieldNumber_Dim,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Transform__storage_, dim),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pos",
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .number = Transform_FieldNumber_Pos,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Transform__storage_, pos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chDim",
        .dataTypeSpecific.className = GPBStringifySymbol(Dimension),
        .number = Transform_FieldNumber_ChDim,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Transform__storage_, chDim),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chPos",
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .number = Transform_FieldNumber_ChPos,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Transform__storage_, chPos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transform class]
                                     rootClass:[TransformRoot class]
                                          file:TransformRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transform__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\005\000\007\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
