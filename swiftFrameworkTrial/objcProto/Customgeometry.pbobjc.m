// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: customgeometry.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Customgeometry.pbobjc.h"
 #import "Pathobject.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CustomgeometryRoot

@implementation CustomgeometryRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CustomgeometryRoot_FileDescriptor

static GPBFileDescriptor *CustomgeometryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.adventnet.zoho.show.slides"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - CustomGeometry

@implementation CustomGeometry

@dynamic pathListArray, pathListArray_Count;
@dynamic textboxArray, textboxArray_Count;

typedef struct CustomGeometry__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *pathListArray;
  GPBFloatArray *textboxArray;
} CustomGeometry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pathListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomGeometry_Path),
        .number = CustomGeometry_FieldNumber_PathListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CustomGeometry__storage_, pathListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "textboxArray",
        .dataTypeSpecific.className = NULL,
        .number = CustomGeometry_FieldNumber_TextboxArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CustomGeometry__storage_, textboxArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomGeometry class]
                                     rootClass:[CustomgeometryRoot class]
                                          file:CustomgeometryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomGeometry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000pathList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CustomGeometry_Path

@implementation CustomGeometry_Path

@dynamic hasWidth, width;
@dynamic hasHeight, height;
@dynamic pathArray, pathArray_Count;

typedef struct CustomGeometry_Path__storage_ {
  uint32_t _has_storage_[1];
  float width;
  float height;
  NSMutableArray *pathArray;
} CustomGeometry_Path__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = CustomGeometry_Path_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CustomGeometry_Path__storage_, width),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = CustomGeometry_Path_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CustomGeometry_Path__storage_, height),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pathArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PathObject),
        .number = CustomGeometry_Path_FieldNumber_PathArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CustomGeometry_Path__storage_, pathArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomGeometry_Path class]
                                     rootClass:[CustomgeometryRoot class]
                                          file:CustomgeometryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomGeometry_Path__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(CustomGeometry)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
